Calcite parsing passed, start to transform. SELECT CHARTEST FROM CUGINI.VAA
[32m- 0501[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CUGINI.VAA
[32m- 0502[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CUGINI.VAA WHERE CHARTEST <> 'Twenty Characters...'
[32m- 0503[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CUGINI.VAA
[32m- 0504[0m
Calcite parsing passed, start to transform. SELECT CHARTEST FROM CUGINI.VBB
[32m- 0505[0m
Calcite parsing passed, start to transform. SELECT CHARTEST FROM CUGINI.VCC
[32m- 0506[0m
Calcite parsing passed, start to transform. SELECT CHARTEST FROM CUGINI.VDD
[32m- 0507[0m
Calcite parsing passed, start to transform. SELECT COL2 FROM CUGINI.VVTABLE WHERE COL1 = 0
Calcite parsing passed, start to transform. SELECT COL2 FROM CUGINI.VVTABLE WHERE COL1 = 0
Calcite parsing passed, start to transform. SELECT COL2 FROM CUGINI.VVTABLE WHERE COL1 = 0
[31m- 0508 match for 0508:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('COL2)][0m
[31m   'Filter ('COL1 = 0)[0m
[31m    'UnresolvedRelation [CUGINI,VVTABLE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  COL2: double[0m
[31m  Project [COL2#871][0m
[31m   Filter (COL1#870 = cast(0 as double))[0m
[31m    MetastoreRelation cugini, vvtable, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [COL2#871][0m
[31m   Filter (COL1#870 = 0.0)[0m
[31m    MetastoreRelation cugini, vvtable, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [COL2#871][0m
[31m   Filter (COL1#870 = 0.0)[0m
[31m    HiveTableScan [COL2#871,COL1#870], (MetastoreRelation cugini, vvtable, None)[0m
  
[31m  Code Generation: true[0m
[31m  COL2[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !1                       1.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1 FROM CUGINI.VII
Calcite parsing passed, start to transform. SELECT C1 FROM CUGINI.VII
Calcite parsing passed, start to transform. SELECT C1 FROM CUGINI.VII
[31m- 0509 match for 0509:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('C1)][0m
[31m   'UnresolvedRelation [CUGINI,VII], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double[0m
[31m  Project [C1#1105][0m
[31m   MetastoreRelation cugini, vii, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [C1#1105][0m
[31m   MetastoreRelation cugini, vii, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [C1#1105], (MetastoreRelation cugini, vii, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !3                       3.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WORKS_P WHERE EMPNUM = 'E9'
[32m- 0510[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WORKS_P WHERE EMPNUM = 'E2'
[32m- 0511[0m
Calcite parsing passed, start to transform. SELECT 'USER',PNAME FROM HU.PROJ
[32m- 0512[0m
Calcite parsing passed, start to transform. SELECT PNUM,'BUDGET IN GRAMS IS ',BUDGET * 5 FROM HU.PROJ WHERE PNUM = 'P1'
[32m- 0513[0m
Calcite parsing passed, start to transform. SELECT EMPNUM,10 FROM HU.STAFF WHERE GRADE = 10
[32m- 0514[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, 10 FROM HU.STAFF
[32m- 0515[0m
Calcite parsing passed, start to transform. SELECT EMPNUM,EMPNAME FROM HU.STAFF WHERE EMPNUM='E7'
[32m- 0517[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.PROJ
[32m- 0519[0m
Calcite parsing passed, start to transform. SELECT EMPNUM,PNUM FROM HU.WORKS WHERE EMPNUM='E8'
[32m- 0521[0m
Calcite parsing passed, start to transform. SELECT EMPNUM,EMPNAME FROM HU.STAFF WHERE EMPNUM='E8'
[32m- 0523[0m
Calcite parsing passed, start to transform. SELECT EMPNUM,EMPNAME,GRADE FROM HU.STAFF3 WHERE EMPNUM = 'E3'
[32m- 0524[0m
Calcite parsing passed, start to transform. SELECT EMPNUM,EMPNAME,GRADE FROM HU.STAFF3 WHERE EMPNUM = 'E8'
[32m- 0525[0m
Calcite parsing passed, start to transform. SELECT EMPNUM,EMPNAME FROM HU.STAFF4 WHERE EMPNUM = 'E6'
[32m- 0528[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.STAFF4
[32m- 0529[0m
Calcite parsing passed, start to transform. SELECT PNUM,PNAME,BUDGET FROM HU.PROJ WHERE PNUM = 'P3'
[32m- 0530[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM HU.PROJ
[32m- 0531[0m
Calcite parsing passed, start to transform. SELECT * FROM HU.UPUNIQ WHERE NUMKEY = 3
[32m- 0532[0m
Calcite parsing passed, start to transform. SELECT EMPNAME FROM STAFF4 WHERE GRADE=0
[32m- 0534[0m
Calcite parsing passed, start to transform. SELECT GRADE FROM STAFF4 WHERE (EMPNAME IS NULL) AND CITY = '               '
Calcite parsing passed, start to transform. SELECT GRADE FROM STAFF4 WHERE (EMPNAME IS NULL) AND CITY = '               '
Calcite parsing passed, start to transform. SELECT GRADE FROM STAFF4 WHERE (EMPNAME IS NULL) AND CITY = '               '
[31m- 0535 match for 0535:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('GRADE)][0m
[31m   'Filter (isnull('EMPNAME) && ('CITY =                ))[0m
[31m    'UnresolvedRelation [STAFF4], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  GRADE: double[0m
[31m  Project [GRADE#3977][0m
[31m   Filter (isnull(EMPNAME#3976) && (CITY#3978 =                ))[0m
[31m    MetastoreRelation SUN, staff4, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [GRADE#3977][0m
[31m   Filter (isnull(EMPNAME#3976) && (CITY#3978 =                ))[0m
[31m    MetastoreRelation SUN, staff4, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [GRADE#3977][0m
[31m   Filter (isnull(EMPNAME#3976) && (CITY#3978 =                ))[0m
[31m    HiveTableScan [GRADE#3977,EMPNAME#3976,CITY#3978], (MetastoreRelation SUN, staff4, None)[0m
  
[31m  Code Generation: true[0m
[31m  GRADE[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !40                      40.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT EMPNAME FROM STAFF14 WHERE EMPNAME = 'SUN'
[32m- 0536[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF16 WHERE EMPNAME IS NULL
[32m- 0537[0m
Calcite parsing passed, start to transform. SELECT EMPNAME FROM STAFF16 WHERE EMPNUM = 'E2'
[32m- 0538[0m
Calcite parsing passed, start to transform. SELECT GRADE  FROM STAFF16 WHERE EMPNUM = 'E3'
[32m- 0539[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF5
[32m- 0540[0m
Calcite parsing passed, start to transform. SELECT GRADE FROM STAFF6 WHERE GRADE > 10
Calcite parsing passed, start to transform. SELECT GRADE FROM STAFF6 WHERE GRADE > 10
Calcite parsing passed, start to transform. SELECT GRADE FROM STAFF6 WHERE GRADE > 10
[31m- 0541 match for 0541:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('GRADE)][0m
[31m   'Filter ('GRADE > 10)[0m
[31m    'UnresolvedRelation [STAFF6], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  GRADE: double[0m
[31m  Project [GRADE#4633][0m
[31m   Filter (GRADE#4633 > cast(10 as double))[0m
[31m    MetastoreRelation SUN, staff6, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [GRADE#4633][0m
[31m   Filter (GRADE#4633 > 10.0)[0m
[31m    MetastoreRelation SUN, staff6, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (GRADE#4633 > 10.0)[0m
[31m   HiveTableScan [GRADE#4633], (MetastoreRelation SUN, staff6, None)[0m
  
[31m  Code Generation: true[0m
[31m  GRADE[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !11                      11.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF7
[32m- 0542[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF8
[32m- 0543[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF8
[32m- 0544[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF13
[32m- 0545[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF13
[32m- 0546[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF9
[32m- 0547[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF10
[32m- 0548[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF5
[32m- 0549[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF5 WHERE GRADE = 15
[32m- 0550[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF11
[32m- 0551[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF12
[32m- 0552[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF15
[32m- 0553[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF15
[32m- 0554[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF15
[32m- 0555[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF15
[32m- 0556[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF5 WHERE GRADE = 14
[32m- 0557[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF6 WHERE GRADE = 14
[32m- 0558[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF7 WHERE GRADE = 14
[32m- 0559[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF8 WHERE EMPNAME = 'Alice'
[32m- 0560[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF13 WHERE EMPNAME = 'Alice'
[32m- 0561[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF9 WHERE EMPNAME = 'Susan'
[32m- 0562[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF10 WHERE GRADE = 11
[32m- 0563[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF11 WHERE EMPNAME = 'Susan' AND GRADE = 11
[32m- 0564[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF12 WHERE GRADE = 11
[32m- 0565[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF15 WHERE EMPNAME = 'Alice'
[32m- 0566[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WORKS3
[32m- 0567[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WORKS3
[32m- 0568[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WORKS3 WHERE PNUM = 'P2'
[32m- 0569[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM STAFF3 WHERE EMPNUM = 'E1'
[32m- 0570[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM STAFF3 WHERE EMPNUM = 'E1'
[32m- 0571[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM STAFF3 WHERE EMPNUM = 'E1'
[32m- 0572[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF3
[32m- 0573[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF3
[32m- 0574[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF3 WHERE EMPNUM = 'E2'
[32m- 0575[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF3
[32m- 0576[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF3 WHERE EMPNUM = 'E2'
[32m- 0577[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WORKS3 WHERE EMPNUM = 'E2'
[32m- 0578[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WORKS WHERE EMPNUM = 'E1'
[32m- 0579[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WORKS3 WHERE EMPNUM = 'E1'
[32m- 0580[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF_C WHERE MGR = 'E1'
[32m- 0581[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM STAFF_C WHERE EMPNUM = 'E1'
[32m- 0582[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM STAFF_C WHERE EMPNUM = 'E9'
[32m- 0583[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF_C WHERE MGR = 'E9'
[32m- 0584[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM STAFF_C WHERE EMPNUM = 'E1'
[32m- 0585[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF_C WHERE EMPNUM ='E6'
[32m- 0586[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF_C WHERE MGR = 'E1'
[32m- 0587[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF_C WHERE MGR = 'E5'
[32m- 0588[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM PROJ_M WHERE MGR = 'E5'
[32m- 0589[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM STAFF_M WHERE EMPNUM = 'E2'
[32m- 0590[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM STAFF_M WHERE EMPNUM = 'E9'
[32m- 0591[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF_M WHERE EMPNUM = 'E2'
[32m- 0592[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM PROJ_M WHERE MGR = 'E3'
[32m- 0593[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM PROJ_M WHERE MGR = 'E5'
[32m- 0594[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF_M WHERE PRI_WK = 'P9'
[32m- 0595[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ2_F10
[32m- 0596[0m
Calcite parsing passed, start to transform. SELECT P1 FROM SIZ2_P WHERE P1 = '  A'
Calcite parsing passed, start to transform. SELECT P1 FROM SIZ2_P WHERE P1 = '  A'
Calcite parsing passed, start to transform. SELECT P1 FROM SIZ2_P WHERE P1 = '  A'
[31m- 0597 match for 0597:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('P1)][0m
[31m   'Filter ('P1 =   A)[0m
[31m    'UnresolvedRelation [SIZ2_P], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  P1: string[0m
[31m  Project [P1#10002][0m
[31m   Filter (P1#10002 =   A)[0m
[31m    MetastoreRelation SUN, siz2_p, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [P1#10002][0m
[31m   Filter (P1#10002 =   A)[0m
[31m    MetastoreRelation SUN, siz2_p, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (P1#10002 =   A)[0m
[31m   HiveTableScan [P1#10002], (MetastoreRelation SUN, siz2_p, None)[0m
  
[31m  Code Generation: true[0m
[31m  P1[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !A                         A (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ2_P WHERE P1 = '  A'
[32m- 0598[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ2_P WHERE P1 = '  A'
[32m- 0599[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ2_P WHERE P1 = '  A'
[32m- 0600[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ2_F1 WHERE F1 = '  A'
[32m- 0601[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ3_P5 WHERE F1 = 11
[32m- 0602[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ3_P5 WHERE F1 = 11
[32m- 0603[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ3_F,SIZ3_P1,SIZ3_P2,SIZ3_P3,SIZ3_P4, SIZ3_P5,SIZ3_P6 WHERE P1 = SIZ3_P1.F1 AND P2 = SIZ3_P2.F1 AND P3 = SIZ3_P3.F1 AND P4 = SIZ3_P4.F1 AND P5 = SIZ3_P5.F1 AND P6 = SIZ3_P6.F1 AND SIZ3_P3.F1 BETWEEN 1 AND 2
[32m- 0604[0m
Calcite parsing passed, start to transform. SELECT COUNT(*)  FROM EMP WHERE ENO = 41
[32m- 0605[0m
Calcite parsing passed, start to transform. SELECT COUNT(*)  FROM EMP WHERE ENO = 21
[32m- 0606[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM EMP WHERE DNO = 12 AND DNAME = 'Education' AND ENO = 21 AND ENAME = 'Tom'
[32m- 0607[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM EMP WHERE DNO = 12 AND ENO = 21 AND ENAME = 'Tom'
[32m- 0608[0m
Calcite parsing passed, start to transform. SELECT MAX(F1),MIN(F1) FROM SIZ3_P3
Calcite parsing passed, start to transform. SELECT MAX(F1),MIN(F1) FROM SIZ3_P3
Calcite parsing passed, start to transform. SELECT MAX(F1),MIN(F1) FROM SIZ3_P3
[31m- 0609 match for 0609:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('MAX('F1)),unresolvedalias('MIN('F1))][0m
[31m   'UnresolvedRelation [SIZ3_P3], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double, _c1: double[0m
[31m  Aggregate [max(F1#12014) AS _c0#12016,min(F1#12014) AS _c1#12017][0m
[31m   MetastoreRelation SUN, siz3_p3, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [max(F1#12014) AS _c0#12016,min(F1#12014) AS _c1#12017][0m
[31m   Project [F1#12014][0m
[31m    MetastoreRelation SUN, siz3_p3, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(max(F1#12014),mode=Final,isDistinct=false),(min(F1#12014),mode=Final,isDistinct=false)], output=[_c0#12016,_c1#12017])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(max(F1#12014),mode=Partial,isDistinct=false),(min(F1#12014),mode=Partial,isDistinct=false)], output=[max#12021,min#12023])[0m
[31m     HiveTableScan [F1#12014], (MetastoreRelation SUN, siz3_p3, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	_c1[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !5	1                     5.0	1.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT MAX(F1),MIN(F1) FROM SIZ2_F3
Calcite parsing passed, start to transform. SELECT MAX(F1),MIN(F1) FROM SIZ2_F3
Calcite parsing passed, start to transform. SELECT MAX(F1),MIN(F1) FROM SIZ2_F3
[31m- 0610 match for 0610:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('MAX('F1)),unresolvedalias('MIN('F1))][0m
[31m   'UnresolvedRelation [SIZ2_F3], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double, _c1: double[0m
[31m  Aggregate [max(F1#12225) AS _c0#12227,min(F1#12225) AS _c1#12228][0m
[31m   MetastoreRelation SUN, siz2_f3, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [max(F1#12225) AS _c0#12227,min(F1#12225) AS _c1#12228][0m
[31m   Project [F1#12225][0m
[31m    MetastoreRelation SUN, siz2_f3, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(max(F1#12225),mode=Final,isDistinct=false),(min(F1#12225),mode=Final,isDistinct=false)], output=[_c0#12227,_c1#12228])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(max(F1#12225),mode=Partial,isDistinct=false),(min(F1#12225),mode=Partial,isDistinct=false)], output=[max#12232,min#12234])[0m
[31m     HiveTableScan [F1#12225], (MetastoreRelation SUN, siz2_f3, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	_c1[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !4	2                     4.0	2.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT MAX(F_KEY),MIN(F_KEY),MAX(P_KEY),MIN(P_KEY) FROM MID1
Calcite parsing passed, start to transform. SELECT MAX(F_KEY),MIN(F_KEY),MAX(P_KEY),MIN(P_KEY) FROM MID1
Calcite parsing passed, start to transform. SELECT MAX(F_KEY),MIN(F_KEY),MAX(P_KEY),MIN(P_KEY) FROM MID1
[31m- 0611 match for 0611:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('MAX('F_KEY)),unresolvedalias('MIN('F_KEY)),unresolvedalias('MAX('P_KEY)),unresolvedalias('MIN('P_KEY))][0m
[31m   'UnresolvedRelation [MID1], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double, _c1: double, _c2: double, _c3: double[0m
[31m  Aggregate [max(F_KEY#12437) AS _c0#12438,min(F_KEY#12437) AS _c1#12439,max(P_KEY#12436) AS _c2#12440,min(P_KEY#12436) AS _c3#12441][0m
[31m   MetastoreRelation SUN, mid1, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [max(F_KEY#12437) AS _c0#12438,min(F_KEY#12437) AS _c1#12439,max(P_KEY#12436) AS _c2#12440,min(P_KEY#12436) AS _c3#12441][0m
[31m   MetastoreRelation SUN, mid1, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(max(F_KEY#12437),mode=Final,isDistinct=false),(min(F_KEY#12437),mode=Final,isDistinct=false),(max(P_KEY#12436),mode=Final,isDistinct=false),(min(P_KEY#12436),mode=Final,isDistinct=false)], output=[_c0#12438,_c1#12439,_c2#12440,_c3#12441])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(max(F_KEY#12437),mode=Partial,isDistinct=false),(min(F_KEY#12437),mode=Partial,isDistinct=false),(max(P_KEY#12436),mode=Partial,isDistinct=false),(min(P_KEY#12436),mode=Partial,isDistinct=false)], output=[max#12447,min#12449,max#12451,min#12453])[0m
[31m     HiveTableScan [p_key#12436,f_key#12437], (MetastoreRelation SUN, mid1, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	_c1	_c2	_c3[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !22	2	24	2               22.0	2.0	24.0	2.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF_C
[32m- 0612[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM STAFF_P WHERE EMPNUM = 'E1'
[32m- 0613[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF_P WHERE EMPNUM = 'E2'
[32m- 0614[0m
Calcite parsing passed, start to transform. SELECT NICKNAME, INSURANCE1 FROM CHAR_DEFAULT WHERE SEX_CODE = 'M'
[32m- 0615[0m
Calcite parsing passed, start to transform. SELECT SEX_CODE FROM CHAR_DEFAULT WHERE INSURANCE1 = 'Kaise'
[32m- 0616[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM EXACT_DEF WHERE BODY_TEMP = 99.0 AND MAX_NUM = -55555 AND MIN_NUM = .000001 OR BODY_TEMP = 98.6 AND MAX_NUM = 100 AND MIN_NUM = .2
[32m- 0617[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM APPROX_DEF WHERE (Y_COUNT BETWEEN -9.991E10 AND -9.989E10) AND (Z_COUNT BETWEEN 3.44E-11 AND 3.46E-11) AND (ZZ_COUNT BETWEEN -7.6778E-7 AND -7.6776E-7) OR (X_COUNT BETWEEN 1.77E12 AND 1.79E12)
[32m- 0618[0m
Calcite parsing passed, start to transform. SELECT COUNT(*)  FROM SIZE_TAB WHERE COL4 BETWEEN -1.46E22 AND -1.048575E22 GROUP BY COL1, COL2, COL3
[32m- 0619[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM C_TRANSACTION WHERE COMMOD_NO = 17
[32m- 0620[0m
Calcite parsing passed, start to transform. SELECT UNIT_PRICE, FROM_DATE, TO_DATE, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY DESC
Calcite parsing passed, start to transform. SELECT UNIT_PRICE, FROM_DATE, TO_DATE, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY DESC
Calcite parsing passed, start to transform. SELECT UNIT_PRICE, FROM_DATE, TO_DATE, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY DESC
[31m- 0621 match for 0621:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['COMMODITY DESC], true[0m
[31m   'Project [unresolvedalias('UNIT_PRICE),unresolvedalias('FROM_DATE),unresolvedalias('TO_DATE),unresolvedalias('COMMODITY)][0m
[31m    'UnresolvedRelation [DOLLARS_PER_POUND], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  UNIT_PRICE: double, FROM_DATE: double, TO_DATE: double, COMMODITY: string[0m
[31m  Sort [COMMODITY#13508 DESC], true[0m
[31m   Project [UNIT_PRICE#13509,FROM_DATE#13510,TO_DATE#13511,COMMODITY#13508][0m
[31m    MetastoreRelation SUN, dollars_per_pound, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [COMMODITY#13508 DESC], true[0m
[31m   Project [UNIT_PRICE#13509,FROM_DATE#13510,TO_DATE#13511,COMMODITY#13508][0m
[31m    MetastoreRelation SUN, dollars_per_pound, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [COMMODITY#13508 DESC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(COMMODITY#13508 DESC)[0m
[31m     HiveTableScan [UNIT_PRICE#13509,FROM_DATE#13510,TO_DATE#13511,COMMODITY#13508], (MetastoreRelation SUN, dollars_per_pound, None)[0m
  
[31m  Code Generation: true[0m
[31m  UNIT_PRICE	FROM_DATE	TO_DATE	COMMODITY[0m
[31m  !== HIVE - 2 row(s) ==                                            == CATALYST - 2 row(s) ==[0m
[31m  !0.0670745929118773946360153256704980842912	871012	871212	Wheat   0.0670745929118774	871012.0	871212.0	Wheat[0m
[31m  !0.5	880707	880707	Alfalfa                                        0.5	880707.0	880707.0	Alfalfa (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM COST_PER_UNIT
[32m- 0622[0m
Calcite parsing passed, start to transform. SELECT CURRENCY, MEASURE, UNIT_PRICE, COMMODITY FROM COST_PER_UNIT
Calcite parsing passed, start to transform. SELECT CURRENCY, MEASURE, UNIT_PRICE, COMMODITY FROM COST_PER_UNIT
Calcite parsing passed, start to transform. SELECT CURRENCY, MEASURE, UNIT_PRICE, COMMODITY FROM COST_PER_UNIT
[31m- 0623 match for 0623:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('CURRENCY),unresolvedalias('MEASURE),unresolvedalias('UNIT_PRICE),unresolvedalias('COMMODITY)][0m
[31m   'UnresolvedRelation [COST_PER_UNIT], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  CURRENCY: string, MEASURE: string, UNIT_PRICE: double, COMMODITY: string[0m
[31m  Project [CURRENCY#13791,MEASURE#13792,UNIT_PRICE#13790,COMMODITY#13789][0m
[31m   MetastoreRelation SUN, cost_per_unit, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [CURRENCY#13791,MEASURE#13792,UNIT_PRICE#13790,COMMODITY#13789][0m
[31m   MetastoreRelation SUN, cost_per_unit, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [CURRENCY#13791,MEASURE#13792,UNIT_PRICE#13790,COMMODITY#13789], (MetastoreRelation SUN, cost_per_unit, None)[0m
  
[31m  Code Generation: true[0m
[31m  CURRENCY	MEASURE	UNIT_PRICE	COMMODITY[0m
[31m  !== HIVE - 24 row(s) ==                                            == CATALYST - 24 row(s) ==[0m
[31m  !DM	KILO	0.3279202320136228182205193699446573009791	Wheat          DM	KILO	0.3279202320136228	Wheat[0m
[31m  !DM	KILO	2.44444444444444444444444444444444444444	Alfalfa          DM	KILO	2.4444444444444446	Alfalfa[0m
[31m  !DM	OUNCE	0.00894327905491698595146871008939974457216	Wheat        DM	OUNCE	0.008943279054916986	Wheat[0m
[31m  !DM	OUNCE	0.0666666666666666666666666666666666666667	Alfalfa       DM	OUNCE	0.06666666666666667	Alfalfa[0m
[31m  !DM	POUND	0.149054650915283099191145168156662409536	Wheat          DM	POUND	0.1490546509152831	Wheat[0m
[31m  !DM	POUND	1.11111111111111111111111111111111111111	Alfalfa         DM	POUND	1.1111111111111112	Alfalfa[0m
[31m  !DM	TON	2222.222222222222222222222222222222222222	Alfalfa          DM	TON	2222.222222222222	Alfalfa[0m
[31m  !DM	TON	298.109301830566198382290336313324819071	Wheat             DM	TON	298.1093018305662	Wheat[0m
[31m  !DOLLAR	KILO	0.1475641044061302681992337164750957854406	Wheat      DOLLAR	KILO	0.14756410440613027	Wheat[0m
[31m   DOLLAR	KILO	1.1	Alfalfa                                           DOLLAR	KILO	1.1	Alfalfa[0m
[31m  !DOLLAR	OUNCE	0.004024475574712643678160919540229885057472	Wheat   DOLLAR	OUNCE	0.004024475574712643	Wheat[0m
[31m   DOLLAR	OUNCE	0.03	Alfalfa                                         DOLLAR	OUNCE	0.03	Alfalfa[0m
[31m  !DOLLAR	POUND	0.0670745929118773946360153256704980842912	Wheat     DOLLAR	POUND	0.0670745929118774	Wheat[0m
[31m   DOLLAR	POUND	0.5	Alfalfa                                          DOLLAR	POUND	0.5	Alfalfa[0m
[31m  !DOLLAR	TON	1000	Alfalfa                                           DOLLAR	TON	1000.0	Alfalfa[0m
[31m  !DOLLAR	TON	134.149185823754789272030651340996168582	Wheat         DOLLAR	TON	134.14918582375478	Wheat[0m
[31m  !POUND	KILO	0.077258693406350925758761108102144390283	Wheat        POUND	KILO	0.07725869340635093	Wheat[0m
[31m  !POUND	KILO	0.5759162303664921465968586387434554973822	Alfalfa     POUND	KILO	0.5759162303664922	Alfalfa[0m
[31m  !POUND	OUNCE	0.002107055274718661611602575675513028825902	Wheat    POUND	OUNCE	0.0021070552747186615	Wheat[0m
[31m  !POUND	OUNCE	0.0157068062827225130890052356020942408377	Alfalfa    POUND	OUNCE	0.015706806282722512	Alfalfa[0m
[31m  !POUND	POUND	0.035117587911977693526709594591883813765	Wheat       POUND	POUND	0.035117587911977693	Wheat[0m
[31m  !POUND	POUND	0.2617801047120418848167539267015706806283	Alfalfa    POUND	POUND	0.2617801047120419	Alfalfa[0m
[31m  !POUND	TON	523.560209424083769633507853403141361257	Alfalfa        POUND	TON	523.5602094240837	Alfalfa[0m
[31m  !POUND	TON	70.23517582395538705341918918376762752984	Wheat         POUND	TON	70.23517582395539	Wheat (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT (100 + 7) * UNIT_PRICE * 700 / 100, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY
Calcite parsing passed, start to transform. SELECT (100 + 7) * UNIT_PRICE * 700 / 100, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY
Calcite parsing passed, start to transform. SELECT (100 + 7) * UNIT_PRICE * 700 / 100, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY
[31m- 0624 match for 0624:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['COMMODITY ASC], true[0m
[31m   'Project [unresolvedalias(((((100 + 7) * 'UNIT_PRICE) * 700) / 100)),unresolvedalias('COMMODITY)][0m
[31m    'UnresolvedRelation [DOLLARS_PER_POUND], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double, COMMODITY: string[0m
[31m  Sort [COMMODITY#13976 ASC], true[0m
[31m   Project [(((cast((100 + 7) as double) * UNIT_PRICE#13977) * cast(700 as double)) / cast(100 as double)) AS _c0#13980,COMMODITY#13976][0m
[31m    MetastoreRelation SUN, dollars_per_pound, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [COMMODITY#13976 ASC], true[0m
[31m   Project [(((107.0 * UNIT_PRICE#13977) * 700.0) / 100.0) AS _c0#13980,COMMODITY#13976][0m
[31m    MetastoreRelation SUN, dollars_per_pound, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [COMMODITY#13976 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(COMMODITY#13976 ASC)[0m
[31m     Project [(((107.0 * UNIT_PRICE#13977) * 700.0) / 100.0) AS _c0#13980,COMMODITY#13976][0m
[31m      HiveTableScan [UNIT_PRICE#13977,COMMODITY#13976], (MetastoreRelation SUN, dollars_per_pound, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	COMMODITY[0m
[31m  !== HIVE - 2 row(s) ==                             == CATALYST - 2 row(s) ==[0m
[31m   374.5	Alfalfa                                     374.5	Alfalfa[0m
[31m  !50.23887009099616858237547892720306513412	Wheat   50.23887009099617	Wheat (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT EXP_NAME, BTH_DATE FROM EXPERIENCE WHERE EXP_NAME IS NOT NULL AND BTH_DATE IS NOT NULL AND DESCR = 'Car Mechanic'
Calcite parsing passed, start to transform. SELECT EXP_NAME, BTH_DATE FROM EXPERIENCE WHERE EXP_NAME IS NOT NULL AND BTH_DATE IS NOT NULL AND DESCR = 'Car Mechanic'
Calcite parsing passed, start to transform. SELECT EXP_NAME, BTH_DATE FROM EXPERIENCE WHERE EXP_NAME IS NOT NULL AND BTH_DATE IS NOT NULL AND DESCR = 'Car Mechanic'
[31m- 0625 match for 0625:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('EXP_NAME),unresolvedalias('BTH_DATE)][0m
[31m   'Filter ((isnotnull('EXP_NAME) && isnotnull('BTH_DATE)) && ('DESCR = Car Mechanic))[0m
[31m    'UnresolvedRelation [EXPERIENCE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  EXP_NAME: string, BTH_DATE: double[0m
[31m  Project [EXP_NAME#14166,BTH_DATE#14167][0m
[31m   Filter ((isnotnull(EXP_NAME#14166) && isnotnull(BTH_DATE#14167)) && (DESCR#14169 = Car Mechanic))[0m
[31m    MetastoreRelation SUN, experience, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [EXP_NAME#14166,BTH_DATE#14167][0m
[31m   Filter ((isnotnull(EXP_NAME#14166) && isnotnull(BTH_DATE#14167)) && (DESCR#14169 = Car Mechanic))[0m
[31m    MetastoreRelation SUN, experience, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [EXP_NAME#14166,BTH_DATE#14167][0m
[31m   Filter ((isnotnull(EXP_NAME#14166) && isnotnull(BTH_DATE#14167)) && (DESCR#14169 = Car Mechanic))[0m
[31m    HiveTableScan [EXP_NAME#14166,BTH_DATE#14167,DESCR#14169], (MetastoreRelation SUN, experience, None)[0m
  
[31m  Code Generation: true[0m
[31m  EXP_NAME	BTH_DATE[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !Lilian	112156           Lilian	112156.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM EXPERIENCE WHERE DESCR = 'Car Mechanic'
[32m- 0626[0m
Calcite parsing passed, start to transform. SELECT EXP_NAME, DESCR, BTH_DATE FROM EXPERIENCE ORDER BY EXP_NAME, BTH_DATE
Calcite parsing passed, start to transform. SELECT EXP_NAME, DESCR, BTH_DATE FROM EXPERIENCE ORDER BY EXP_NAME, BTH_DATE
Calcite parsing passed, start to transform. SELECT EXP_NAME, DESCR, BTH_DATE FROM EXPERIENCE ORDER BY EXP_NAME, BTH_DATE
[31m- 0627 match for 0627:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EXP_NAME ASC,'BTH_DATE ASC], true[0m
[31m   'Project [unresolvedalias('EXP_NAME),unresolvedalias('DESCR),unresolvedalias('BTH_DATE)][0m
[31m    'UnresolvedRelation [EXPERIENCE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  EXP_NAME: string, DESCR: string, BTH_DATE: double[0m
[31m  Sort [EXP_NAME#14447 ASC,BTH_DATE#14448 ASC], true[0m
[31m   Project [EXP_NAME#14447,DESCR#14450,BTH_DATE#14448][0m
[31m    MetastoreRelation SUN, experience, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [EXP_NAME#14447 ASC,BTH_DATE#14448 ASC], true[0m
[31m   Project [EXP_NAME#14447,DESCR#14450,BTH_DATE#14448][0m
[31m    MetastoreRelation SUN, experience, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [EXP_NAME#14447 ASC,BTH_DATE#14448 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(EXP_NAME#14447 ASC,BTH_DATE#14448 ASC)[0m
[31m     HiveTableScan [EXP_NAME#14447,DESCR#14450,BTH_DATE#14448], (MetastoreRelation SUN, experience, None)[0m
  
[31m  Code Generation: true[0m
[31m  EXP_NAME	DESCR	BTH_DATE[0m
[31m  !== HIVE - 20 row(s) ==       == CATALYST - 20 row(s) ==[0m
[31m  !NULL	Artist	NULL             NULL	Fashion Model	NULL[0m
[31m  !NULL	Fashion Model	NULL      NULL	Car Mechanic	NULL[0m
[31m  !NULL	Car Mechanic	NULL       NULL	Artist	NULL[0m
[31m  !NULL	Photographer	20434      NULL	Photographer	20434.0[0m
[31m  !NULL	Car Mechanic	62068      NULL	Car Mechanic	62068.0[0m
[31m  !NULL	Car Mechanic	112156     NULL	Car Mechanic	112156.0[0m
[31m  !David	Porter	101024          David	Farmer	101024.0[0m
[31m  !David	Monk	101024            David	Porter	101024.0[0m
[31m  !David	Farmer	101024          David	Monk	101024.0[0m
[31m  !John	Actor	30542             John	Actor	30542.0[0m
[31m  !Joseph	Sportsman	20556       Joseph	Sportsman	20556.0[0m
[31m  !Joseph	Teacher	20556         Joseph	Teacher	20556.0[0m
[31m   Lilian	Soccer Player	NULL    Lilian	Soccer Player	NULL[0m
[31m  !Lilian	Nurse	112156          Lilian	Baby siter	112156.0[0m
[31m  !Lilian	Car Mechanic	112156   Lilian	Nurse	112156.0[0m
[31m  !Lilian	Baby siter	112156     Lilian	Car Mechanic	112156.0[0m
[31m  !Mary	Fireman	121245          Mary	Fireman	121245.0[0m
[31m  !Peter	Movie Producer	20434   Peter	Movie Producer	20434.0[0m
[31m   Tom	Car Mechanic	NULL        Tom	Car Mechanic	NULL[0m
[31m   Yolanda	Car Mechanic	NULL    Yolanda	Car Mechanic	NULL (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT ENAME FROM EMP WHERE DNAME = 'Education'
[32m- 0628[0m
Calcite parsing passed, start to transform. SELECT DNAME FROM EMP WHERE ENAME = 'Joan'
[32m- 0629[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF5
[32m- 0630[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF5 WHERE GRADE IS NULL
[32m- 0631[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF6_WITH_GRADES
[32m- 0632[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF6
[32m- 0633[0m
Calcite parsing passed, start to transform. SELECT EMPNAME FROM STAFF6 WHERE GRADE IS NULL
[32m- 0634[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF9
[32m- 0635[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF9
[32m- 0636[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM DEPT WHERE DNO = 10
[32m- 0637[0m
Calcite parsing passed, start to transform. SELECT * FROM DEPT ORDER BY DNO
Calcite parsing passed, start to transform. SELECT * FROM DEPT ORDER BY DNO
Calcite parsing passed, start to transform. SELECT * FROM DEPT ORDER BY DNO
[31m- 0638 match for 0638:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['DNO ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'UnresolvedRelation [DEPT], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  dno: double, dname: string, dean: string[0m
[31m  Sort [DNO#15898 ASC], true[0m
[31m   Project [dno#15898,dname#15899,dean#15900][0m
[31m    MetastoreRelation SUN, dept, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [DNO#15898 ASC], true[0m
[31m   MetastoreRelation SUN, dept, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [DNO#15898 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(DNO#15898 ASC)[0m
[31m     HiveTableScan [dno#15898,dname#15899,dean#15900], (MetastoreRelation SUN, dept, None)[0m
  
[31m  Code Generation: true[0m
[31m  dno	dname	dean[0m
[31m  !== HIVE - 6 row(s) ==     == CATALYST - 6 row(s) ==[0m
[31m  !11	VOLLEYBALL	VICKI       11.0	VOLLEYBALL	VICKI[0m
[31m  !12	Computer	Charles       12.0	Computer	Charles[0m
[31m  !13	Physics	Richard        13.0	Physics	Richard[0m
[31m  !14	EDUCATION	Jeffersion   14.0	EDUCATION	Jeffersion[0m
[31m  !15	English	Liss           15.0	English	Liss[0m
[31m  !20	Architecture	Richard   20.0	Architecture	Richard (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT ENO, ENAME, DNO, DNAME FROM EMP ORDER BY ENO
Calcite parsing passed, start to transform. SELECT ENO, ENAME, DNO, DNAME FROM EMP ORDER BY ENO
Calcite parsing passed, start to transform. SELECT ENO, ENAME, DNO, DNAME FROM EMP ORDER BY ENO
[31m- 0639 match for 0639:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['ENO ASC], true[0m
[31m   'Project [unresolvedalias('ENO),unresolvedalias('ENAME),unresolvedalias('DNO),unresolvedalias('DNAME)][0m
[31m    'UnresolvedRelation [EMP], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  ENO: double, ENAME: string, DNO: double, DNAME: string[0m
[31m  Sort [ENO#16236 ASC], true[0m
[31m   Project [ENO#16236,ENAME#16237,DNO#16239,DNAME#16240][0m
[31m    MetastoreRelation SUN, emp, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [ENO#16236 ASC], true[0m
[31m   Project [ENO#16236,ENAME#16237,DNO#16239,DNAME#16240][0m
[31m    MetastoreRelation SUN, emp, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [ENO#16236 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(ENO#16236 ASC)[0m
[31m     HiveTableScan [ENO#16236,ENAME#16237,DNO#16239,DNAME#16240], (MetastoreRelation SUN, emp, None)[0m
  
[31m  Code Generation: true[0m
[31m  ENO	ENAME	DNO	DNAME[0m
[31m  !== HIVE - 9 row(s) ==     == CATALYST - 9 row(s) ==[0m
[31m  !13	MARY	15	VOLLEYBALL     13.0	MARY	15.0	VOLLEYBALL[0m
[31m  !22	David	12	Computer      22.0	David	12.0	Computer[0m
[31m  !23	Lilian	12	Computer     23.0	Lilian	12.0	Computer[0m
[31m  !24	Mary	13	Physics        24.0	Mary	13.0	Physics[0m
[31m  !25	Joan	13	Physics        25.0	Joan	13.0	Physics[0m
[31m  !27	Peter	15	English       27.0	Peter	15.0	English[0m
[31m  !28	BARBARA	14	EDUCATION   28.0	BARBARA	14.0	EDUCATION[0m
[31m  !30	Thomas	12	Computer     30.0	Thomas	12.0	Computer[0m
[31m  !41	Tom	20	Architecture    41.0	Tom	20.0	Architecture (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1, C2, C3 FROM ICAST2
Calcite parsing passed, start to transform. SELECT C1, C2, C3 FROM ICAST2
Calcite parsing passed, start to transform. SELECT C1, C2, C3 FROM ICAST2
[31m- 0640 match for 0640:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('C1),unresolvedalias('C2),unresolvedalias('C3)][0m
[31m   'UnresolvedRelation [ICAST2], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double, C2: float, C3: double[0m
[31m  Project [C1#16605,C2#16606,C3#16607][0m
[31m   MetastoreRelation FLATER, icast2, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [C1#16605,C2#16606,C3#16607][0m
[31m   MetastoreRelation FLATER, icast2, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [C1#16605,C2#16606,C3#16607], (MetastoreRelation FLATER, icast2, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1	C2	C3[0m
[31m  !== HIVE - 19 row(s) ==   == CATALYST - 19 row(s) ==[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !3	3	3.142                3.0	3.0	3.142 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1, C2, C3 FROM ICAST2
Calcite parsing passed, start to transform. SELECT C1, C2, C3 FROM ICAST2
Calcite parsing passed, start to transform. SELECT C1, C2, C3 FROM ICAST2
[31m- 0641 match for 0641:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('C1),unresolvedalias('C2),unresolvedalias('C3)][0m
[31m   'UnresolvedRelation [ICAST2], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double, C2: float, C3: double[0m
[31m  Project [C1#16789,C2#16790,C3#16791][0m
[31m   MetastoreRelation FLATER, icast2, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [C1#16789,C2#16790,C3#16791][0m
[31m   MetastoreRelation FLATER, icast2, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [C1#16789,C2#16790,C3#16791], (MetastoreRelation FLATER, icast2, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1	C2	C3[0m
[31m  !== HIVE - 19 row(s) ==   == CATALYST - 19 row(s) ==[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241[0m
[31m  !5	5	5.241                5.0	5.0	5.241 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1, C2, C3 FROM ICAST2
Calcite parsing passed, start to transform. SELECT C1, C2, C3 FROM ICAST2
Calcite parsing passed, start to transform. SELECT C1, C2, C3 FROM ICAST2
[31m- 0642 match for 0642:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('C1),unresolvedalias('C2),unresolvedalias('C3)][0m
[31m   'UnresolvedRelation [ICAST2], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double, C2: float, C3: double[0m
[31m  Project [C1#16973,C2#16974,C3#16975][0m
[31m   MetastoreRelation FLATER, icast2, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [C1#16973,C2#16974,C3#16975][0m
[31m   MetastoreRelation FLATER, icast2, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [C1#16973,C2#16974,C3#16975], (MetastoreRelation FLATER, icast2, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1	C2	C3[0m
[31m  !== HIVE - 19 row(s) ==   == CATALYST - 19 row(s) ==[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1[0m
[31m  !2	2.1	9.1                2.0	2.1	9.1 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.ECCO
[32m- 0643[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP1 WHERE NAME = 'KERI' AND GRP = 10
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP1 WHERE NAME = 'KERI' AND GRP = 10
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP1 WHERE NAME = 'KERI' AND GRP = 10
[31m- 0644 match for 0644:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('EMPNUM)][0m
[31m   'Filter (('NAME = KERI) && ('GRP = 10))[0m
[31m    'UnresolvedRelation [NAMGRP1], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  EMPNUM: double[0m
[31m  Project [EMPNUM#17269][0m
[31m   Filter ((NAME#17270 = KERI) && (GRP#17271 = cast(10 as double)))[0m
[31m    MetastoreRelation FLATER, namgrp1, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [EMPNUM#17269][0m
[31m   Filter ((NAME#17270 = KERI) && (GRP#17271 = 10.0))[0m
[31m    MetastoreRelation FLATER, namgrp1, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [EMPNUM#17269][0m
[31m   Filter ((NAME#17270 = KERI) && (GRP#17271 = 10.0))[0m
[31m    HiveTableScan [EMPNUM#17269,NAME#17270,GRP#17271], (MetastoreRelation FLATER, namgrp1, None)[0m
  
[31m  Code Generation: true[0m
[31m  EMPNUM[0m
[31m  !== HIVE - 361 row(s) ==   == CATALYST - 361 row(s) ==[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP1 WHERE NAME = 'MARY' AND GRP = 20
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP1 WHERE NAME = 'MARY' AND GRP = 20
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP1 WHERE NAME = 'MARY' AND GRP = 20
[31m- 0645 match for 0645:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('EMPNUM)][0m
[31m   'Filter (('NAME = MARY) && ('GRP = 20))[0m
[31m    'UnresolvedRelation [NAMGRP1], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  EMPNUM: double[0m
[31m  Project [EMPNUM#17453][0m
[31m   Filter ((NAME#17454 = MARY) && (GRP#17455 = cast(20 as double)))[0m
[31m    MetastoreRelation FLATER, namgrp1, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [EMPNUM#17453][0m
[31m   Filter ((NAME#17454 = MARY) && (GRP#17455 = 20.0))[0m
[31m    MetastoreRelation FLATER, namgrp1, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [EMPNUM#17453][0m
[31m   Filter ((NAME#17454 = MARY) && (GRP#17455 = 20.0))[0m
[31m    HiveTableScan [EMPNUM#17453,NAME#17454,GRP#17455], (MetastoreRelation FLATER, namgrp1, None)[0m
  
[31m  Code Generation: true[0m
[31m  EMPNUM[0m
[31m  !== HIVE - 361 row(s) ==   == CATALYST - 361 row(s) ==[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP1 WHERE (NAME <> 'MARY' AND NAME <> 'KERI') OR GRP <> 20 AND GRP <> 10 OR EMPNUM <> 0 AND EMPNUM <> 1 OR NAME IS NULL OR GRP IS NULL OR EMPNUM IS NULL
[32m- 0646[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP2 WHERE NAME = 'KERI' AND GRP = 10
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP2 WHERE NAME = 'KERI' AND GRP = 10
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP2 WHERE NAME = 'KERI' AND GRP = 10
[31m- 0647 match for 0647:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('EMPNUM)][0m
[31m   'Filter (('NAME = KERI) && ('GRP = 10))[0m
[31m    'UnresolvedRelation [NAMGRP2], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  EMPNUM: double[0m
[31m  Project [EMPNUM#17730][0m
[31m   Filter ((NAME#17731 = KERI) && (GRP#17732 = cast(10 as double)))[0m
[31m    MetastoreRelation FLATER, namgrp2, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [EMPNUM#17730][0m
[31m   Filter ((NAME#17731 = KERI) && (GRP#17732 = 10.0))[0m
[31m    MetastoreRelation FLATER, namgrp2, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [EMPNUM#17730][0m
[31m   Filter ((NAME#17731 = KERI) && (GRP#17732 = 10.0))[0m
[31m    HiveTableScan [EMPNUM#17730,NAME#17731,GRP#17732], (MetastoreRelation FLATER, namgrp2, None)[0m
  
[31m  Code Generation: true[0m
[31m  EMPNUM[0m
[31m  !== HIVE - 361 row(s) ==   == CATALYST - 361 row(s) ==[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0[0m
[31m  !0                         0.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP2 WHERE NAME = 'MARY' AND GRP = 20
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP2 WHERE NAME = 'MARY' AND GRP = 20
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NAMGRP2 WHERE NAME = 'MARY' AND GRP = 20
[31m- 0648 match for 0648:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('EMPNUM)][0m
[31m   'Filter (('NAME = MARY) && ('GRP = 20))[0m
[31m    'UnresolvedRelation [NAMGRP2], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  EMPNUM: double[0m
[31m  Project [EMPNUM#17914][0m
[31m   Filter ((NAME#17915 = MARY) && (GRP#17916 = cast(20 as double)))[0m
[31m    MetastoreRelation FLATER, namgrp2, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [EMPNUM#17914][0m
[31m   Filter ((NAME#17915 = MARY) && (GRP#17916 = 20.0))[0m
[31m    MetastoreRelation FLATER, namgrp2, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [EMPNUM#17914][0m
[31m   Filter ((NAME#17915 = MARY) && (GRP#17916 = 20.0))[0m
[31m    HiveTableScan [EMPNUM#17914,NAME#17915,GRP#17916], (MetastoreRelation FLATER, namgrp2, None)[0m
  
[31m  Code Generation: true[0m
[31m  EMPNUM[0m
[31m  !== HIVE - 361 row(s) ==   == CATALYST - 361 row(s) ==[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP2 WHERE NAME <> 'MARY' AND NAME <> 'KERI' OR GRP <> 20 AND GRP <> 10 OR EMPNUM <> 0 AND EMPNUM <> 1 OR NAME IS NULL OR GRP IS NULL OR EMPNUM IS NULL
[32m- 0649[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NMGRP2 WHERE NAME = 'MARY' AND GRP = 20
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NMGRP2 WHERE NAME = 'MARY' AND GRP = 20
Calcite parsing passed, start to transform. SELECT EMPNUM FROM NMGRP2 WHERE NAME = 'MARY' AND GRP = 20
[31m- 0650 match for 0650:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('EMPNUM)][0m
[31m   'Filter (('NAME = MARY) && ('GRP = 20))[0m
[31m    'UnresolvedRelation [NMGRP2], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  EMPNUM: double[0m
[31m  Project [EMPNUM#18191][0m
[31m   Filter ((NAME#18192 = MARY) && (GRP#18193 = cast(20 as double)))[0m
[31m    MetastoreRelation FLATER, nmgrp2, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [EMPNUM#18191][0m
[31m   Filter ((NAME#18192 = MARY) && (GRP#18193 = 20.0))[0m
[31m    MetastoreRelation FLATER, nmgrp2, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [EMPNUM#18191][0m
[31m   Filter ((NAME#18192 = MARY) && (GRP#18193 = 20.0))[0m
[31m    HiveTableScan [EMPNUM#18191,NAME#18192,GRP#18193], (MetastoreRelation FLATER, nmgrp2, None)[0m
  
[31m  Code Generation: true[0m
[31m  EMPNUM[0m
[31m  !== HIVE - 361 row(s) ==   == CATALYST - 361 row(s) ==[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0[0m
[31m  !1                         1.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NMGRP2 WHERE NAME <> 'MARY' OR GRP <> 20 OR EMPNUM <> 1 OR NAME IS NULL OR GRP IS NULL OR EMPNUM IS NULL
[32m- 0651[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP3 WHERE EMPNUM = 0 AND NAME = 'KERI' AND GRP = 10
[32m- 0652[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP3 WHERE EMPNUM = 1 AND NAME = 'MARY' AND GRP = 20
[32m- 0653[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP3 WHERE EMPNUM = 5 AND NAME = 'HARRY' AND GRP IS NULL
[32m- 0654[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP3 WHERE EMPNUM = 7 AND NAME = 'LARRY' AND GRP IS NULL
[32m- 0655[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP3 WHERE EMPNUM = 9 AND NAME = 'BARRY' AND GRP IS NULL
[32m- 0656[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP3
[32m- 0657[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NMGRP3 WHERE NAME = 'HARRY' AND GRP IS NULL
[32m- 0658[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NMGRP3 WHERE NAME = 'MARY' AND GRP = 30
[32m- 0659[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NMGRP3 WHERE NAME = 'MARY' AND GRP = 40
[32m- 0660[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NMGRP3 WHERE NAME = 'BARRY' AND GRP IS NULL
[32m- 0661[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NMGRP3 WHERE NAME = 'LARRY' AND GRP IS NULL
[32m- 0662[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NMGRP3
[32m- 0663[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP4 WHERE EMPNUM = 0 AND NAME = 'KERI' AND GRP = 10
[32m- 0664[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP4 WHERE EMPNUM = 1 AND NAME = 'MARY' AND GRP = 20
[32m- 0665[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP4 WHERE EMPNUM = 2 AND NAME IS NULL AND GRP = 30
[32m- 0666[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP4 WHERE EMPNUM = 3 AND NAME IS NULL AND GRP = 40
[32m- 0667[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NAMGRP4
[32m- 0668[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM UUSIG
[32m- 0669[0m
Calcite parsing passed, start to transform. SELECT COUNT(DISTINCT U1) FROM UUSIG
[32m- 0670[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM UUSIG WHERE U1 < 0 OR U1 > 3 OR U1 IS NULL
[32m- 0671[0m
Calcite parsing passed, start to transform. SELECT * FROM ABOVE_AVERAGE ORDER BY COLUMN_1
Calcite parsing passed, start to transform. SELECT * FROM ABOVE_AVERAGE ORDER BY COLUMN_1
Calcite parsing passed, start to transform. SELECT * FROM ABOVE_AVERAGE ORDER BY COLUMN_1
[31m- 0672 match for 0672:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['COLUMN_1 ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'UnresolvedRelation [ABOVE_AVERAGE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  column_1: string, column_2: double, column_3: string[0m
[31m  Sort [COLUMN_1#20358 ASC], true[0m
[31m   Project [column_1#20358,column_2#20359,column_3#20360][0m
[31m    MetastoreRelation FLATER, above_average, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [COLUMN_1#20358 ASC], true[0m
[31m   MetastoreRelation FLATER, above_average, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [COLUMN_1#20358 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(COLUMN_1#20358 ASC)[0m
[31m     HiveTableScan [column_1#20358,column_2#20359,column_3#20360], (MetastoreRelation FLATER, above_average, None)[0m
  
[31m  Code Generation: true[0m
[31m  column_1	column_2	column_3[0m
[31m  !== HIVE - 3 row(s) ==    == CATALYST - 3 row(s) ==[0m
[31m  !MAX	30000	Gaithersburg   MAX	30000.0	Gaithersburg[0m
[31m  !P2	30000	Vienna          P2	30000.0	Vienna[0m
[31m  !P7	15000	Gaithersburg    P7	15000.0	Gaithersburg (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT * FROM STAFF_DUP ORDER BY CITY
Calcite parsing passed, start to transform. SELECT * FROM STAFF_DUP ORDER BY CITY
Calcite parsing passed, start to transform. SELECT * FROM STAFF_DUP ORDER BY CITY
[31m- 0673 match for 0673:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['CITY ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'UnresolvedRelation [STAFF_DUP], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  empnum: string, empname: string, grade: double, city: string[0m
[31m  Sort [CITY#20545 ASC], true[0m
[31m   Project [empnum#20542,empname#20543,grade#20544,city#20545][0m
[31m    MetastoreRelation FLATER, staff_dup, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [CITY#20545 ASC], true[0m
[31m   MetastoreRelation FLATER, staff_dup, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [CITY#20545 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(CITY#20545 ASC)[0m
[31m     HiveTableScan [empnum#20542,empname#20543,grade#20544,city#20545], (MetastoreRelation FLATER, staff_dup, None)[0m
  
[31m  Code Generation: true[0m
[31m  empnum	empname	grade	city[0m
[31m  !== HIVE - 3 row(s) ==         == CATALYST - 3 row(s) ==[0m
[31m  !E7	SULLIVAN	15	Gaithersburg   E7	SULLIVAN	15.0	Gaithersburg[0m
[31m  !E6	Fidel	0	Havana             E6	Fidel	0.0	Havana[0m
[31m  !E13	ff	82	gg                  E13	ff	82.0	gg (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF_DUP
[32m- 0674[0m
Calcite parsing passed, start to transform. SELECT C2, C1, C3 FROM FOUR_CITIES ORDER BY C3, C2
Calcite parsing passed, start to transform. SELECT C2, C1, C3 FROM FOUR_CITIES ORDER BY C3, C2
Calcite parsing passed, start to transform. SELECT C2, C1, C3 FROM FOUR_CITIES ORDER BY C3, C2
[31m- 0675 match for 0675:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['C3 ASC,'C2 ASC], true[0m
[31m   'Project [unresolvedalias('C2),unresolvedalias('C1),unresolvedalias('C3)][0m
[31m    'UnresolvedRelation [FOUR_CITIES], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C2: string, C1: string, C3: double[0m
[31m  Sort [C3#20825 ASC,C2#20824 ASC], true[0m
[31m   Project [C2#20824,C1#20823,C3#20825][0m
[31m    MetastoreRelation FLATER, four_cities, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [C3#20825 ASC,C2#20824 ASC], true[0m
[31m   Project [C2#20824,C1#20823,C3#20825][0m
[31m    MetastoreRelation FLATER, four_cities, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [C3#20825 ASC,C2#20824 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(C3#20825 ASC,C2#20824 ASC)[0m
[31m     HiveTableScan [C2#20824,C1#20823,C3#20825], (MetastoreRelation FLATER, four_cities, None)[0m
  
[31m  Code Generation: true[0m
[31m  C2	C1	C3[0m
[31m  !== HIVE - 5 row(s) ==   == CATALYST - 5 row(s) ==[0m
[31m  !NULL	P	666              NULL	P	666.0[0m
[31m  !Gaithersburg	P	666      Gaithersburg	P	666.0[0m
[31m  !Gaithersburg	S	777      Gaithersburg	S	777.0[0m
[31m  !Havana	S	777            Havana	S	777.0[0m
[31m  !gg	S	777                gg	S	777.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM FOUR_CITIES
[32m- 0676[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FOUR_CITIES WHERE C3 > 0
[32m- 0677[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FOUR_CITIES WHERE C2 = 'Vienna'
[32m- 0678[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JNULL3
[32m- 0679[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JNULL3 WHERE D2 IS NOT NULL OR D1 IS NOT NULL
[32m- 0680[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JNULL5
[32m- 0681[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JNULL6 WHERE C2 IS NOT NULL
[32m- 0682[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JNULL3
[32m- 0683[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JNULL3 WHERE C1 IS NULL
[32m- 0684[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JNULL3 WHERE D1 IS NULL
[32m- 0685[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JNULL3 WHERE D2 IS NULL
[32m- 0686[0m
Calcite parsing passed, start to transform. SELECT AVG(D1) * 10 FROM JNULL3
Calcite parsing passed, start to transform. SELECT AVG(D1) * 10 FROM JNULL3
Calcite parsing passed, start to transform. SELECT AVG(D1) * 10 FROM JNULL3
[31m- 0687 match for 0687:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(('AVG('D1) * 10))][0m
[31m   'UnresolvedRelation [JNULL3], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double[0m
[31m  Aggregate [(avg(D1#22031) * cast(10 as double)) AS _c0#22033][0m
[31m   MetastoreRelation FLATER, jnull3, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [(avg(D1#22031) * 10.0) AS _c0#22033][0m
[31m   Project [D1#22031][0m
[31m    MetastoreRelation FLATER, jnull3, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(average(D1#22031),mode=Final,isDistinct=false)], output=[_c0#22033])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(average(D1#22031),mode=Partial,isDistinct=false)], output=[currentSum#22038,currentCount#22039L])[0m
[31m     HiveTableScan [D1#22031], (MetastoreRelation FLATER, jnull3, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !15                      15.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JNULL6 WHERE C2 = 1
[32m- 0688[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JNULL6 WHERE C2 IS NULL
[32m- 0689[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JNULL6 WHERE C2 = C1 AND D1 IS NULL
[32m- 0690[0m
Calcite parsing passed, start to transform. SELECT MAX(AGE) FROM CHANGGVIEW
Calcite parsing passed, start to transform. SELECT MAX(AGE) FROM CHANGGVIEW
Calcite parsing passed, start to transform. SELECT MAX(AGE) FROM CHANGGVIEW
[31m- 0691 match for 0691:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('MAX('AGE))][0m
[31m   'UnresolvedRelation [CHANGGVIEW], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double[0m
[31m  Aggregate [max(AGE#22518) AS _c0#22519][0m
[31m   MetastoreRelation FLATER, changgview, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [max(AGE#22518) AS _c0#22519][0m
[31m   Project [AGE#22518][0m
[31m    MetastoreRelation FLATER, changgview, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(max(AGE#22518),mode=Final,isDistinct=false)], output=[_c0#22519])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(max(AGE#22518),mode=Partial,isDistinct=false)], output=[max#22522])[0m
[31m     HiveTableScan [AGE#22518], (MetastoreRelation FLATER, changgview, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !16                      16.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CHANGG
[32m- 0692[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CHANGG WHERE AGE > 30
[32m- 0693[0m
Calcite parsing passed, start to transform. SELECT NAAM FROM CHANGG WHERE NUMBRR LIKE '%000%'
[32m- 0694[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM OBITUARIES WHERE BORN <> DATE '1880-01-01' OR BORN IS NULL OR DIED <> TESTING1 OR DIED IS NULL OR ENTERED <> TESTING2 OR ENTERED IS NULL
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM OBITUARIES WHERE BORN <> DATE '1880-01-01' OR BORN IS NULL OR DIED <> TESTING1 OR DIED IS NULL OR ENTERED <> TESTING2 OR ENTERED IS NULL
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM OBITUARIES WHERE BORN <> DATE '1880-01-01' OR BORN IS NULL OR DIED <> TESTING1 OR DIED IS NULL OR ENTERED <> TESTING2 OR ENTERED IS NULL
[31m- 0695 match for 0695:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(count(1))][0m
[31m   'Filter (((((NOT ('BORN = -32872) || isnull('BORN)) || NOT ('DIED = 'TESTING1)) || isnull('DIED)) || NOT ('ENTERED = 'TESTING2)) || isnull('ENTERED))[0m
[31m    'UnresolvedRelation [OBITUARIES], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: bigint[0m
[31m  Aggregate [count(1) AS _c0#23077L][0m
[31m   Filter (((((NOT (cast(BORN#23072 as string) = cast(-32872 as string)) || isnull(BORN#23072)) || NOT (DIED#23073 = TESTING1#23075)) || isnull(DIED#23073)) || NOT (ENTERED#23074 = TESTING2#23076)) || isnull(ENTERED#23074))[0m
[31m    MetastoreRelation FLATER, obituaries, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [count(1) AS _c0#23077L][0m
[31m   Project[0m
[31m    Filter (((((NOT (cast(BORN#23072 as string) = 1880-01-01) || isnull(BORN#23072)) || NOT (DIED#23073 = TESTING1#23075)) || isnull(DIED#23073)) || NOT (ENTERED#23074 = TESTING2#23076)) || isnull(ENTERED#23074))[0m
[31m     MetastoreRelation FLATER, obituaries, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(count(1),mode=Final,isDistinct=false)], output=[_c0#23077L])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(count(1),mode=Partial,isDistinct=false)], output=[currentCount#23080L])[0m
[31m     Project[0m
[31m      Filter (((((NOT (cast(BORN#23072 as string) = 1880-01-01) || isnull(BORN#23072)) || NOT (DIED#23073 = TESTING1#23075)) || isnull(DIED#23073)) || NOT (ENTERED#23074 = TESTING2#23076)) || isnull(ENTERED#23074))[0m
[31m       HiveTableScan [ENTERED#23074,TESTING2#23076,BORN#23072,TESTING1#23075,DIED#23073], (MetastoreRelation FLATER, obituaries, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !0                       1 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT TRIM ('X' FROM SPONSOR) FROM WEIRDPAD WHERE TRIM (NAAM) = 'KEITH'
zcerror[31m- 0696 *** ; SELECT TRIM ('X' FROM SPONSOR) FROM WEIRDPAD WHERE TRIM (NAAM) = 'KEITH' ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT TRIM (LEADING 'X' FROM SPONSOR) FROM WEIRDPAD WHERE TRIM (TRAILING FROM NAAM) = '    KEITH'
zcerror[31m- 0697 *** ; SELECT TRIM (LEADING 'X' FROM SPONSOR) FROM WEIRDPAD WHERE TRIM (TRAILING FROM NAAM) = '    KEITH' ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT TRIM (LEADING 'X' FROM SPONSOR) FROM WEIRDPAD WHERE TRIM (TRAILING 'X' FROM SPONSOR) = 'XXXXKATE'
zcerror[31m- 0698 *** ; SELECT TRIM (LEADING 'X' FROM SPONSOR) FROM WEIRDPAD WHERE TRIM (TRAILING 'X' FROM SPONSOR) = 'XXXXKATE' ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT TRIM (LEADING FROM B.NAAM)  FROM WEIRDPAD A, WEIRDPAD B WHERE TRIM (BOTH 'B' FROM A.NAAM) = TRIM (BOTH 'X' FROM B.SPONSOR)
zcerror[31m- 0699 *** ; SELECT TRIM (LEADING FROM B.NAAM)  FROM WEIRDPAD A, WEIRDPAD B WHERE TRIM (BOTH 'B' FROM A.NAAM) = TRIM (BOTH 'X' FROM B.SPONSOR) ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WEIRDPAD A, WEIRDPAD B WHERE TRIM (LEADING '0' FROM A.SPONSOR) = TRIM (' ' FROM B.NAAM)
zcerror[31m- 0700 *** ; SELECT COUNT(*) FROM WEIRDPAD A, WEIRDPAD B WHERE TRIM (LEADING '0' FROM A.SPONSOR) = TRIM (' ' FROM B.NAAM) ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WEIRDPAD
[32m- 0701[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WEIRDPAD WHERE NAAM = 'KATE' OR SPONSOR = 'KATE'
[32m- 0702[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WEIRDPAD
[32m- 0703[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WEIRDPAD WHERE TRIM (PADCHAR FROM SPONSOR) IS NULL
zcerror[31m- 0704 *** ; SELECT COUNT(*) FROM WEIRDPAD WHERE TRIM (PADCHAR FROM SPONSOR) IS NULL ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WEIRDPAD WHERE TRIM (PADCHAR FROM SPONSOR) = 'KEITH'
zcerror[31m- 0705 *** ; SELECT COUNT(*) FROM WEIRDPAD WHERE TRIM (PADCHAR FROM SPONSOR) = 'KEITH' ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, SUM (HOURS) FROM WORKWEEK WHERE HOURS > 20 GROUP BY EMPNUM HAVING EMPNUM = 'E1'
[32m- 0706[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM WORKWEEK WHERE HOURS > 40
[32m- 0707[0m
Calcite parsing passed, start to transform. SELECT EMPNAME FROM HU.STAFF, WORKWEEK WHERE HU.STAFF.EMPNUM = WORKWEEK.EMPNUM AND HOURS = 12
[31m- 0708 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: cannot resolve 'HU.STAFF.EMPNUM' given input columns empnum, city, empname, hours, empnum, grade;[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF.EMPNUM' given input columns empnum, city, empname, hours, empnum, grade;[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:108)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:118)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:126)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:126)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:103)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:44)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('EMPNAME)][0m
[31m   'Filter (('HU.STAFF.EMPNUM = 'WORKWEEK.EMPNUM) && ('HOURS = 12))[0m
[31m    'Join Inner, None[0m
[31m     'UnresolvedRelation [HU,STAFF], None[0m
[31m     'UnresolvedRelation [WORKWEEK], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.catalyst.analysis.UnresolvedException: Invalid call to toAttribute on unresolved object, tree: unresolvedalias('EMPNAME)[0m
[31m  'Project [unresolvedalias('EMPNAME)][0m
[31m   'Filter (('HU.STAFF.EMPNUM = EMPNUM#24300) && (HOURS#24301 = cast(12 as double)))[0m
[31m    Join Inner, None[0m
[31m     MetastoreRelation hu, staff, None[0m
[31m     MetastoreRelation FLATER, workweek, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF.EMPNUM' given input columns empnum, city, empname, hours, empnum, grade;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF.EMPNUM' given input columns empnum, city, empname, hours, empnum, grade;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF.EMPNUM' given input columns empnum, city, empname, hours, empnum, grade;[0m
[31m  == HIVE - 0 row(s) == (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*), MAX(EMPNUM), MIN(EMPNUM), AVG(HOURS) FROM WORKWEEK
Calcite parsing passed, start to transform. SELECT COUNT(*), MAX(EMPNUM), MIN(EMPNUM), AVG(HOURS) FROM WORKWEEK
Calcite parsing passed, start to transform. SELECT COUNT(*), MAX(EMPNUM), MIN(EMPNUM), AVG(HOURS) FROM WORKWEEK
[31m- 0709 match for 0709:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(count(1)),unresolvedalias('MAX('EMPNUM)),unresolvedalias('MIN('EMPNUM)),unresolvedalias('AVG('HOURS))][0m
[31m   'UnresolvedRelation [WORKWEEK], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: bigint, _c1: string, _c2: string, _c3: double[0m
[31m  Aggregate [count(1) AS _c0#24389L,max(EMPNUM#24387) AS _c1#24390,min(EMPNUM#24387) AS _c2#24391,avg(HOURS#24388) AS _c3#24392][0m
[31m   MetastoreRelation FLATER, workweek, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [count(1) AS _c0#24389L,max(EMPNUM#24387) AS _c1#24390,min(EMPNUM#24387) AS _c2#24391,avg(HOURS#24388) AS _c3#24392][0m
[31m   MetastoreRelation FLATER, workweek, None[0m
  
[31m  == Physical Plan ==[0m
[31m  SortBasedAggregate(key=[], functions=[(count(1),mode=Final,isDistinct=false),(max(EMPNUM#24387),mode=Final,isDistinct=false),(min(EMPNUM#24387),mode=Final,isDistinct=false),(average(HOURS#24388),mode=Final,isDistinct=false)], output=[_c0#24389L,_c1#24390,_c2#24391,_c3#24392])[0m
[31m   ConvertToSafe[0m
[31m    TungstenExchange SinglePartition[0m
[31m     ConvertToUnsafe[0m
[31m      SortBasedAggregate(key=[], functions=[(count(1),mode=Partial,isDistinct=false),(max(EMPNUM#24387),mode=Partial,isDistinct=false),(min(EMPNUM#24387),mode=Partial,isDistinct=false),(average(HOURS#24388),mode=Partial,isDistinct=false)], output=[currentCount#24399L,max#24401,min#24403,currentSum#24406,currentCount#24407L])[0m
[31m       HiveTableScan [empnum#24387,hours#24388], (MetastoreRelation FLATER, workweek, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	_c1	_c2	_c3[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !16	e1	E1	55             16	e1	E1	55.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT EMPNAME FROM HU.STAFF WHERE EMPNUM = (SELECT EMPNUM FROM WORKWEEK WHERE HOURS = 12)
zcerror[31m- 0710 *** ; SELECT EMPNAME FROM HU.STAFF WHERE EMPNUM = (SELECT EMPNUM FROM WORKWEEK WHERE HOURS = 12) ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT EMPNAME FROM HU.STAFF WHERE EMPNUM = (SELECT EMPNUM FROM HU.WORKS GROUP BY EMPNUM, HOURS HAVING HOURS = 12)
zcerror[31m- 0711 *** ; SELECT EMPNAME FROM HU.STAFF WHERE EMPNUM = (SELECT EMPNUM FROM HU.WORKS GROUP BY EMPNUM, HOURS HAVING HOURS = 12) ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM QUALSTAR
[32m- 0712[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SUBQ2
[32m- 0713[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, GRADE, CITY, HOURS FROM QUALSTAR WHERE EMPNAME = 'Carmen'
[32m- 0714[0m
Calcite parsing passed, start to transform. SELECT HU.STAFF.*, HOURS FROM HU.STAFF, HU.WORKS WHERE HU.STAFF.EMPNUM = HU.WORKS.EMPNUM AND EMPNAME = 'Carmen'
zcerror[31m- 0715 *** ; SELECT HU.STAFF.*, HOURS FROM HU.STAFF, HU.WORKS WHERE HU.STAFF.EMPNUM = HU.WORKS.EMPNUM AND EMPNAME = 'Carmen' ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CORRQUALSTAR
[32m- 0716[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CORRSUBQ2
[32m- 0717[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, GRADE, CITY, HOURS FROM CORRQUALSTAR WHERE EMPNAME = 'Carmen'
[32m- 0718[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM LUSER_DATA
[32m- 0719[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM LUSERS
[32m- 0720[0m
Calcite parsing passed, start to transform. SELECT CAST (AVG (CAST (USER_TYPED AS INT)) AS INT) FROM USER_INPUT
Calcite parsing passed, start to transform. SELECT CAST (AVG (CAST (USER_TYPED AS INT)) AS INT) FROM USER_INPUT
Calcite parsing passed, start to transform. SELECT CAST (AVG (CAST (USER_TYPED AS INT)) AS INT) FROM USER_INPUT
[31m- 0721 match for 0721:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(cast('AVG(cast('USER_TYPED as int)) as int))][0m
[31m   'UnresolvedRelation [USER_INPUT], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: int[0m
[31m  Aggregate [cast(avg(cast(cast(cast(USER_TYPED#25584 as decimal(20,0)) as int) as bigint)) as int) AS _c0#25586][0m
[31m   MetastoreRelation FLATER, user_input, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [cast(avg(cast(cast(cast(USER_TYPED#25584 as decimal(20,0)) as int) as bigint)) as int) AS _c0#25586][0m
[31m   Project [USER_TYPED#25584][0m
[31m    MetastoreRelation FLATER, user_input, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(average(cast(cast(cast(USER_TYPED#25584 as decimal(20,0)) as int) as bigint)),mode=Final,isDistinct=false)], output=[_c0#25586])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(average(cast(cast(cast(USER_TYPED#25584 as decimal(20,0)) as int) as bigint)),mode=Partial,isDistinct=false)], output=[currentSum#25591,currentCount#25592L])[0m
[31m     HiveTableScan [USER_TYPED#25584], (MetastoreRelation FLATER, user_input, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !6                       5 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT AVG (USER_INPUT) FROM STANDARD_INPUT
Calcite parsing passed, start to transform. SELECT AVG (USER_INPUT) FROM STANDARD_INPUT
Calcite parsing passed, start to transform. SELECT AVG (USER_INPUT) FROM STANDARD_INPUT
[31m- 0722 match for 0722:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('AVG('USER_INPUT))][0m
[31m   'UnresolvedRelation [STANDARD_INPUT], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double[0m
[31m  Aggregate [avg(USER_INPUT#25800) AS _c0#25802][0m
[31m   MetastoreRelation FLATER, standard_input, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [avg(USER_INPUT#25800) AS _c0#25802][0m
[31m   Project [USER_INPUT#25800][0m
[31m    MetastoreRelation FLATER, standard_input, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(average(USER_INPUT#25800),mode=Final,isDistinct=false)], output=[_c0#25802])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(average(USER_INPUT#25800),mode=Partial,isDistinct=false)], output=[currentSum#25807,currentCount#25808L])[0m
[31m     HiveTableScan [USER_INPUT#25800], (MetastoreRelation FLATER, standard_input, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !5.49                    5.490000000000002 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT SUM (USER_INPUT) * 100, SUM (RECEIVABLE) FROM STANDARD_INPUT
Calcite parsing passed, start to transform. SELECT SUM (USER_INPUT) * 100, SUM (RECEIVABLE) FROM STANDARD_INPUT
Calcite parsing passed, start to transform. SELECT SUM (USER_INPUT) * 100, SUM (RECEIVABLE) FROM STANDARD_INPUT
[31m- 0723 match for 0723:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(('SUM('USER_INPUT) * 100)),unresolvedalias('SUM('RECEIVABLE))][0m
[31m   'UnresolvedRelation [STANDARD_INPUT], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double, _c1: double[0m
[31m  Aggregate [(sum(USER_INPUT#26008) * cast(100 as double)) AS _c0#26011,sum(cast(RECEIVABLE#26009 as double)) AS _c1#26010][0m
[31m   MetastoreRelation FLATER, standard_input, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [(sum(USER_INPUT#26008) * 100.0) AS _c0#26011,sum(cast(RECEIVABLE#26009 as double)) AS _c1#26010][0m
[31m   Project [USER_INPUT#26008,RECEIVABLE#26009][0m
[31m    MetastoreRelation FLATER, standard_input, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(sum(USER_INPUT#26008),mode=Final,isDistinct=false),(sum(cast(RECEIVABLE#26009 as double)),mode=Final,isDistinct=false)], output=[_c0#26011,_c1#26010])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(sum(USER_INPUT#26008),mode=Partial,isDistinct=false),(sum(cast(RECEIVABLE#26009 as double)),mode=Partial,isDistinct=false)], output=[currentSum#26015,currentSum#26017])[0m
[31m     HiveTableScan [USER_INPUT#26008,RECEIVABLE#26009], (MetastoreRelation FLATER, standard_input, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	_c1[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !-96705	-467.06          -96705.0	-467.05999994277954 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SSSLOG WHERE ENTERED_BY = 'FLATER' AND SEVERITY = 1 AND PROBLEM IS NULL
[32m- 0724[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SSSLOG WHERE ENTERED_BY = 'FLATER' AND SEVERITY = 1 AND PROBLEM = 'Cross-linked inode'
[32m- 0725[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SSSLOG WHERE ENTERED_BY = 'system' AND SEVERITY = 1 AND PROBLEM = 'Freed a free frag'
[32m- 0726[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SSSLOG WHERE ENTERED_BY = 'nobody' AND SEVERITY = 6 AND PROBLEM IS NULL
[32m- 0727[0m
Calcite parsing passed, start to transform. SELECT CH1A, CH1B, CH1C FROM CH1
[32m- 0728[0m
Calcite parsing passed, start to transform. SELECT CH1A, CH1B, CH1C FROM CH1
[32m- 0729[0m
Calcite parsing passed, start to transform. SELECT NUM1C1 * 100, NUM1C2, NUM1C3 FROM NUM1
Calcite parsing passed, start to transform. SELECT NUM1C1 * 100, NUM1C2, NUM1C3 FROM NUM1
Calcite parsing passed, start to transform. SELECT NUM1C1 * 100, NUM1C2, NUM1C3 FROM NUM1
[31m- 0730 match for 0730:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(('NUM1C1 * 100)),unresolvedalias('NUM1C2),unresolvedalias('NUM1C3)][0m
[31m   'UnresolvedRelation [NUM1], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double, NUM1C2: double, NUM1C3: double[0m
[31m  Project [(NUM1C1#26769 * cast(100 as double)) AS _c0#26772,NUM1C2#26770,NUM1C3#26771][0m
[31m   MetastoreRelation FLATER, num1, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [(NUM1C1#26769 * 100.0) AS _c0#26772,NUM1C2#26770,NUM1C3#26771][0m
[31m   MetastoreRelation FLATER, num1, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [(NUM1C1#26769 * 100.0) AS _c0#26772,NUM1C2#26770,NUM1C3#26771][0m
[31m   HiveTableScan [NUM1C1#26769,NUM1C2#26770,NUM1C3#26771], (MetastoreRelation FLATER, num1, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	NUM1C2	NUM1C3[0m
[31m  !== HIVE - 2 row(s) ==   == CATALYST - 2 row(s) ==[0m
[31m  !0	0	0                   0.0	0.0	0.0[0m
[31m  !999	-99	9               999.0	-99.0	9.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT NUM1C1 * 100, NUM1C2, NUM1C3 FROM NUM1
Calcite parsing passed, start to transform. SELECT NUM1C1 * 100, NUM1C2, NUM1C3 FROM NUM1
Calcite parsing passed, start to transform. SELECT NUM1C1 * 100, NUM1C2, NUM1C3 FROM NUM1
[31m- 0731 match for 0731:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(('NUM1C1 * 100)),unresolvedalias('NUM1C2),unresolvedalias('NUM1C3)][0m
[31m   'UnresolvedRelation [NUM1], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double, NUM1C2: double, NUM1C3: double[0m
[31m  Project [(NUM1C1#26956 * cast(100 as double)) AS _c0#26959,NUM1C2#26957,NUM1C3#26958][0m
[31m   MetastoreRelation FLATER, num1, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [(NUM1C1#26956 * 100.0) AS _c0#26959,NUM1C2#26957,NUM1C3#26958][0m
[31m   MetastoreRelation FLATER, num1, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [(NUM1C1#26956 * 100.0) AS _c0#26959,NUM1C2#26957,NUM1C3#26958][0m
[31m   HiveTableScan [NUM1C1#26956,NUM1C2#26957,NUM1C3#26958], (MetastoreRelation FLATER, num1, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	NUM1C2	NUM1C3[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !0	0	0                   0.0	0.0	0.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM VERBOSE_INV
[32m- 0732[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM INCOMPLETES
[32m- 0733[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM COMPLETES
[32m- 0734[0m
NoViableAltException(-1@[323:1: atomExpression : ( ( KW_NULL )=> KW_NULL -> TOK_NULL | ( constant )=> constant | castExpression | caseExpression | whenExpression | ( functionName LPAREN )=> function | tableOrColumn | LPAREN ! expression RPAREN !);])
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser$DFA32.specialStateTransition(HiveParser_IdentifiersParser.java)
	at org.antlr.runtime.DFA.predict(DFA.java:80)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.atomExpression(HiveParser_IdentifiersParser.java:6177)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceFieldExpression(HiveParser_IdentifiersParser.java:6383)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceUnaryPrefixExpression(HiveParser_IdentifiersParser.java:6768)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceUnarySuffixExpression(HiveParser_IdentifiersParser.java:6828)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceBitwiseXorExpression(HiveParser_IdentifiersParser.java:7012)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceStarExpression(HiveParser_IdentifiersParser.java:7195)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedencePlusExpression(HiveParser_IdentifiersParser.java:7332)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceAmpersandExpression(HiveParser_IdentifiersParser.java:7483)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceBitwiseOrExpression(HiveParser_IdentifiersParser.java:7634)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceEqualExpression(HiveParser_IdentifiersParser.java:8290)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceNotExpression(HiveParser_IdentifiersParser.java:9177)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceAndExpression(HiveParser_IdentifiersParser.java:9327)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceOrExpression(HiveParser_IdentifiersParser.java:9455)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.expression(HiveParser_IdentifiersParser.java:6105)
	at org.apache.hadoop.hive.ql.parse.HiveParser.expression(HiveParser.java:45846)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.searchCondition(HiveParser_FromClauseParser.java:6637)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.whereClause(HiveParser_FromClauseParser.java:6545)
	at org.apache.hadoop.hive.ql.parse.HiveParser.whereClause(HiveParser.java:45849)
	at org.apache.hadoop.hive.ql.parse.HiveParser.selectStatement(HiveParser.java:41543)
	at org.apache.hadoop.hive.ql.parse.HiveParser.regularBody(HiveParser.java:41402)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpressionBody(HiveParser.java:40413)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpression(HiveParser.java:40283)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1590)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.spark.sql.hive.HiveQl$.getAst(HiveQl.scala:258)
	at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:283)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.hive.HiveQl$.parseSql(HiveQl.scala:276)
	at org.apache.spark.sql.hive.HiveQLDialect.parse(HiveContext.scala:62)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.getLogicalPlan(CalciteDialect.scala:54)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.execution.datasources.DDLParser.parse(DDLParser.scala:42)
	at org.apache.spark.sql.SQLContext.parseSql(SQLContext.scala:189)
	at org.apache.spark.sql.hive.HiveContext.parseSql(HiveContext.scala:280)
	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.<init>(TestHive.scala:179)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:34)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
	at scala.collection.AbstractTraversable.map(Traversable.scala:105)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 0735 *** FAILED ***[0m
[31m  org.apache.spark.sql.AnalysisException: cannot recognize input near '<EOF>' '<EOF>' '<EOF>' in expression specification; line 1 pos 136[0m
[31m  at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:296)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM VERBOSE_INV WHERE ITEMTEXT = 'Lousy excuse for a tape deck' AND CONDTEXT = 'Visibly damaged (no returns)' AND COSTTEXT = 'Expensive'
[32m- 0736[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM VERBOSE_INV WHERE ITEMTEXT = 'Self-destruct VGA monitor w/ critical need detect' AND CONDTEXT = 'Slightly used' AND COSTTEXT = 'Robbery\; a complete and total rip-off'
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM VERBOSE_INV WHERE ITEMTEXT = 'Self-destruct VGA monitor w/ critical need detect' AND CONDTEXT = 'Slightly used' AND COSTTEXT = 'Robbery\; a complete and total rip-off'
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM VERBOSE_INV WHERE ITEMTEXT = 'Self-destruct VGA monitor w/ critical need detect' AND CONDTEXT = 'Slightly used' AND COSTTEXT = 'Robbery\; a complete and total rip-off'
[31m- 0737 match for 0737:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(count(1))][0m
[31m   'Filter ((('ITEMTEXT = Self-destruct VGA monitor w/ critical need detect) && ('CONDTEXT = Slightly used)) && ('COSTTEXT = Robbery\; a complete and total rip-off))[0m
[31m    'UnresolvedRelation [VERBOSE_INV], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: bigint[0m
[31m  Aggregate [count(1) AS _c0#27582L][0m
[31m   Filter (((ITEMTEXT#27579 = Self-destruct VGA monitor w/ critical need detect) && (CONDTEXT#27580 = Slightly used)) && (COSTTEXT#27581 = Robbery\; a complete and total rip-off))[0m
[31m    MetastoreRelation FLATER, verbose_inv, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [count(1) AS _c0#27582L][0m
[31m   Project[0m
[31m    Filter (((ITEMTEXT#27579 = Self-destruct VGA monitor w/ critical need detect) && (CONDTEXT#27580 = Slightly used)) && (COSTTEXT#27581 = Robbery\; a complete and total rip-off))[0m
[31m     MetastoreRelation FLATER, verbose_inv, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(count(1),mode=Final,isDistinct=false)], output=[_c0#27582L])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(count(1),mode=Partial,isDistinct=false)], output=[currentCount#27585L])[0m
[31m     Project[0m
[31m      Filter (((ITEMTEXT#27579 = Self-destruct VGA monitor w/ critical need detect) && (CONDTEXT#27580 = Slightly used)) && (COSTTEXT#27581 = Robbery\; a complete and total rip-off))[0m
[31m       HiveTableScan [ITEMTEXT#27579,CONDTEXT#27580,COSTTEXT#27581], (MetastoreRelation FLATER, verbose_inv, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !1                       0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM VERBOSE_INV WHERE ITEMTEXT = 'Self-destruct VGA monitor w/ critical need detect' AND CONDTEXT = 'Visibly damaged (no returns)' AND COSTTEXT = 'Outrageously expensive'
[32m- 0738[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM VERBOSE_INV WHERE ITEMTEXT = 'World''s worst VCR' AND CONDTEXT = 'Returned as defective' AND COSTTEXT = 'Absurdly expensive'
[32m- 0739[0m
Calcite parsing passed, start to transform. SELECT * FROM PTYPES ORDER BY NUM
Calcite parsing passed, start to transform. SELECT * FROM PTYPES ORDER BY NUM
Calcite parsing passed, start to transform. SELECT * FROM PTYPES ORDER BY NUM
[31m- 0740 match for 0740:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['NUM ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'UnresolvedRelation [PTYPES], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  type: string, num: double[0m
[31m  Sort [NUM#27965 ASC], true[0m
[31m   Project [type#27964,num#27965][0m
[31m    MetastoreRelation FLATER, ptypes, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [NUM#27965 ASC], true[0m
[31m   MetastoreRelation FLATER, ptypes, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [NUM#27965 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(NUM#27965 ASC)[0m
[31m     HiveTableScan [type#27964,num#27965], (MetastoreRelation FLATER, ptypes, None)[0m
  
[31m  Code Generation: true[0m
[31m  type	num[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !Code	3                  Code	3.0 (HiveComparisonTest.scala:433)[0m
NoViableAltException(313@[192:1: tableName : (db= identifier DOT tab= identifier -> ^( TOK_TABNAME $db $tab) |tab= identifier -> ^( TOK_TABNAME $tab) );])
	at org.antlr.runtime.DFA.noViableAlt(DFA.java:158)
	at org.antlr.runtime.DFA.predict(DFA.java:144)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.tableName(HiveParser_FromClauseParser.java:4747)
	at org.apache.hadoop.hive.ql.parse.HiveParser.tableName(HiveParser.java:45918)
	at org.apache.hadoop.hive.ql.parse.HiveParser.createTableStatement(HiveParser.java:5029)
	at org.apache.hadoop.hive.ql.parse.HiveParser.ddlStatement(HiveParser.java:2640)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1650)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.spark.sql.hive.HiveQl$.getAst(HiveQl.scala:258)
	at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:283)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.hive.HiveQl$.parseSql(HiveQl.scala:276)
	at org.apache.spark.sql.hive.HiveQLDialect.parse(HiveContext.scala:62)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.getLogicalPlan(CalciteDialect.scala:54)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.execution.datasources.DDLParser.parse(DDLParser.scala:42)
	at org.apache.spark.sql.SQLContext.parseSql(SQLContext.scala:189)
	at org.apache.spark.sql.hive.HiveContext.parseSql(HiveContext.scala:280)
	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.<init>(TestHive.scala:179)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:34)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
	at scala.collection.AbstractTraversable.map(Traversable.scala:105)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 0741 *** FAILED ***[0m
[31m  org.apache.spark.sql.AnalysisException: cannot recognize input near '"PStaff"' '(' 'PNUM' in table name; line 1 pos 13[0m
[31m  at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:296)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT * FROM PTYPES ORDER BY NUM
Calcite parsing passed, start to transform. SELECT * FROM PTYPES ORDER BY NUM
Calcite parsing passed, start to transform. SELECT * FROM PTYPES ORDER BY NUM
[31m- 0742 match for 0742:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['NUM ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'UnresolvedRelation [PTYPES], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  type: string, num: double[0m
[31m  Sort [NUM#28196 ASC], true[0m
[31m   Project [type#28195,num#28196][0m
[31m    MetastoreRelation FLATER, ptypes, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [NUM#28196 ASC], true[0m
[31m   MetastoreRelation FLATER, ptypes, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [NUM#28196 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(NUM#28196 ASC)[0m
[31m     HiveTableScan [type#28195,num#28196], (MetastoreRelation FLATER, ptypes, None)[0m
  
[31m  Code Generation: true[0m
[31m  type	num[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !Code	3                  Code	3.0 (HiveComparisonTest.scala:433)[0m
NoViableAltException(313@[192:1: tableName : (db= identifier DOT tab= identifier -> ^( TOK_TABNAME $db $tab) |tab= identifier -> ^( TOK_TABNAME $tab) );])
	at org.antlr.runtime.DFA.noViableAlt(DFA.java:158)
	at org.antlr.runtime.DFA.predict(DFA.java:144)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.tableName(HiveParser_FromClauseParser.java:4747)
	at org.apache.hadoop.hive.ql.parse.HiveParser.tableName(HiveParser.java:45918)
	at org.apache.hadoop.hive.ql.parse.HiveParser.createTableStatement(HiveParser.java:5029)
	at org.apache.hadoop.hive.ql.parse.HiveParser.ddlStatement(HiveParser.java:2640)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1650)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.spark.sql.hive.HiveQl$.getAst(HiveQl.scala:258)
	at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:283)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.hive.HiveQl$.parseSql(HiveQl.scala:276)
	at org.apache.spark.sql.hive.HiveQLDialect.parse(HiveContext.scala:62)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.getLogicalPlan(CalciteDialect.scala:54)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.execution.datasources.DDLParser.parse(DDLParser.scala:42)
	at org.apache.spark.sql.SQLContext.parseSql(SQLContext.scala:189)
	at org.apache.spark.sql.hive.HiveContext.parseSql(HiveContext.scala:280)
	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.<init>(TestHive.scala:179)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:34)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
	at scala.collection.AbstractTraversable.map(Traversable.scala:105)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 0743 *** FAILED ***[0m
[31m  org.apache.spark.sql.AnalysisException: cannot recognize input near '"PStaff"' '(' 'PNUM' in table name; line 1 pos 13[0m
[31m  at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:296)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT EXTRACT (HOUR FROM HOURS), EXTRACT (MINUTE FROM HOURS) FROM PROJ_HOURS ORDER BY PNUM
Calcite parsing passed, start to transform. SELECT EXTRACT (HOUR FROM HOURS), EXTRACT (MINUTE FROM HOURS) FROM PROJ_HOURS ORDER BY PNUM
Calcite parsing passed, start to transform. SELECT EXTRACT (HOUR FROM HOURS), EXTRACT (MINUTE FROM HOURS) FROM PROJ_HOURS ORDER BY PNUM
[31m- 0744 match for 0744:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['PNUM ASC], true[0m
[31m   'Project [unresolvedalias(hour('HOURS)),unresolvedalias(minute('HOURS))][0m
[31m    'UnresolvedRelation [PROJ_HOURS], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: int, _c1: int[0m
[31m  Project [_c0#28428,_c1#28429][0m
[31m   Sort [PNUM#28426 ASC], true[0m
[31m    Project [hour(cast(HOURS#28427 as timestamp)) AS _c0#28428,minute(cast(HOURS#28427 as timestamp)) AS _c1#28429,PNUM#28426][0m
[31m     MetastoreRelation FLATER, proj_hours, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [_c0#28428,_c1#28429][0m
[31m   Sort [PNUM#28426 ASC], true[0m
[31m    Project [hour(cast(HOURS#28427 as timestamp)) AS _c0#28428,minute(cast(HOURS#28427 as timestamp)) AS _c1#28429,PNUM#28426][0m
[31m     MetastoreRelation FLATER, proj_hours, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenProject [_c0#28428,_c1#28429][0m
[31m   TungstenSort [PNUM#28426 ASC], true, 0[0m
[31m    ConvertToUnsafe[0m
[31m     Exchange rangepartitioning(PNUM#28426 ASC)[0m
[31m      Project [hour(cast(HOURS#28427 as timestamp)) AS _c0#28428,minute(cast(HOURS#28427 as timestamp)) AS _c1#28429,PNUM#28426][0m
[31m       HiveTableScan [HOURS#28427,PNUM#28426], (MetastoreRelation FLATER, proj_hours, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	_c1[0m
[31m  !== HIVE - 14 row(s) ==   == CATALYST - 14 row(s) ==[0m
[31m  !2	0                      NULL	NULL[0m
[31m   NULL	NULL                NULL	NULL[0m
[31m  !5	30                     NULL	NULL[0m
[31m   NULL	NULL                NULL	NULL[0m
[31m  !1	0                      NULL	NULL[0m
[31m   NULL	NULL                NULL	NULL[0m
[31m  !4	0                      NULL	NULL[0m
[31m   NULL	NULL                NULL	NULL[0m
[31m  !10	0                     NULL	NULL[0m
[31m   NULL	NULL                NULL	NULL[0m
[31m   NULL	NULL                NULL	NULL[0m
[31m   NULL	NULL                NULL	NULL[0m
[31m   NULL	NULL                NULL	NULL[0m
[31m   NULL	NULL                NULL	NULL (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT EXTRACT (SECOND FROM RUN_SECONDS) FROM TYPE_TIMES ORDER BY JOB_TYPE
NoViableAltException(118@[151:1: selectExpression : ( ( tableAllColumns )=> tableAllColumns | expression );])
	at org.antlr.runtime.DFA.noViableAlt(DFA.java:158)
	at org.antlr.runtime.DFA.predict(DFA.java:116)
	at org.apache.hadoop.hive.ql.parse.HiveParser_SelectClauseParser.selectExpression(HiveParser_SelectClauseParser.java:3731)
	at org.apache.hadoop.hive.ql.parse.HiveParser.selectExpression(HiveParser.java:45837)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.function(HiveParser_IdentifiersParser.java:3850)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.atomExpression(HiveParser_IdentifiersParser.java:6280)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceFieldExpression(HiveParser_IdentifiersParser.java:6383)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceUnaryPrefixExpression(HiveParser_IdentifiersParser.java:6768)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceUnarySuffixExpression(HiveParser_IdentifiersParser.java:6828)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceBitwiseXorExpression(HiveParser_IdentifiersParser.java:7012)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceStarExpression(HiveParser_IdentifiersParser.java:7172)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedencePlusExpression(HiveParser_IdentifiersParser.java:7332)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceAmpersandExpression(HiveParser_IdentifiersParser.java:7483)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceBitwiseOrExpression(HiveParser_IdentifiersParser.java:7634)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceEqualExpression(HiveParser_IdentifiersParser.java:8164)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceNotExpression(HiveParser_IdentifiersParser.java:9177)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceAndExpression(HiveParser_IdentifiersParser.java:9296)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceOrExpression(HiveParser_IdentifiersParser.java:9455)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.expression(HiveParser_IdentifiersParser.java:6105)
	at org.apache.hadoop.hive.ql.parse.HiveParser.expression(HiveParser.java:45846)
	at org.apache.hadoop.hive.ql.parse.HiveParser_SelectClauseParser.selectItem(HiveParser_SelectClauseParser.java:2907)
	at org.apache.hadoop.hive.ql.parse.HiveParser_SelectClauseParser.selectList(HiveParser_SelectClauseParser.java:1373)
	at org.apache.hadoop.hive.ql.parse.HiveParser_SelectClauseParser.selectClause(HiveParser_SelectClauseParser.java:1128)
	at org.apache.hadoop.hive.ql.parse.HiveParser.selectClause(HiveParser.java:45817)
	at org.apache.hadoop.hive.ql.parse.HiveParser.selectStatement(HiveParser.java:41495)
	at org.apache.hadoop.hive.ql.parse.HiveParser.regularBody(HiveParser.java:41402)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpressionBody(HiveParser.java:40413)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpression(HiveParser.java:40283)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1590)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:396)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:308)
	at org.apache.hadoop.hive.ql.Driver.compileInternal(Driver.java:1122)
	at org.apache.hadoop.hive.ql.Driver.runInternal(Driver.java:1170)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:1059)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:1049)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:429)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)
	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)
	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)
	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)
	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)
	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)
	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)
	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)
	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 0745 golden answer for query:[0m
[31m  Error: FAILED: ParseException line 1:23 cannot recognize input near 'SECOND' 'FROM' 'RUN_SECONDS' in select expression[0m
[31m  org.apache.spark.sql.execution.QueryExecutionException: FAILED: ParseException line 1:23 cannot recognize input near 'SECOND' 'FROM' 'RUN_SECONDS' in select expression[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:433)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  SELECT EXTRACT (SECOND FROM RUN_SECONDS) FROM TYPE_TIMES ORDER BY JOB_TYPE (HiveComparisonTest.scala:343)[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM NOT_HERE
[32m- 0746[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM U_SIG
[32m- 0747[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM USIG
[32m- 0748[0m
Calcite parsing passed, start to transform. SELECT EMPNUM FROM HU.STAFF3 NATURAL LEFT JOIN HU.STAFF NATURAL INNER JOIN HU.STAFF4 ORDER BY EMPNUM DESC
[31m- 0749 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29163, EMPNUM#29167, EMPNUM#29171.;[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29163, EMPNUM#29167, EMPNUM#29171.;[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve(LogicalPlan.scala:278)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveChildren(LogicalPlan.scala:162)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4$$anonfun$19.apply(Analyzer.scala:387)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4$$anonfun$19.apply(Analyzer.scala:387)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$.withPosition(package.scala:48)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4.applyOrElse(Analyzer.scala:387)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4.applyOrElse(Analyzer.scala:383)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:108)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:118)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2$1.apply(QueryPlan.scala:122)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:122)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:126)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:126)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8.applyOrElse(Analyzer.scala:383)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8.applyOrElse(Analyzer.scala:277)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$.apply(Analyzer.scala:277)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$.apply(Analyzer.scala:276)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:83)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:80)[0m
[31m  	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)[0m
[31m  	at scala.collection.immutable.List.foldLeft(List.scala:84)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:80)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:72)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:72)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed$lzycompute(TestHive.scala:195)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed(TestHive.scala:180)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNUM DESC], true[0m
[31m   'Project [unresolvedalias('EMPNUM)][0m
[31m    'Join Inner, None[0m
[31m     'Join LeftOuter, None[0m
[31m      'UnresolvedRelation [HU,STAFF3], None[0m
[31m      'UnresolvedRelation [HU,STAFF], None[0m
[31m     'UnresolvedRelation [HU,STAFF4], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29175, EMPNUM#29179, EMPNUM#29183.;[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29187, EMPNUM#29191, EMPNUM#29195.;[0m
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29199, EMPNUM#29203, EMPNUM#29207.;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29211, EMPNUM#29215, EMPNUM#29219.;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29223, EMPNUM#29227, EMPNUM#29231.;[0m
[31m  == HIVE - 0 row(s) == (HiveComparisonTest.scala:366)[0m
NoViableAltException(26@[150:5: ( ( Identifier LPAREN )=> partitionedTableFunction | tableSource | subQuerySource | virtualTableSource )])
	at org.antlr.runtime.DFA.noViableAlt(DFA.java:158)
	at org.antlr.runtime.DFA.predict(DFA.java:144)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.fromSource(HiveParser_FromClauseParser.java:3711)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.joinSource(HiveParser_FromClauseParser.java:1873)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.fromClause(HiveParser_FromClauseParser.java:1518)
	at org.apache.hadoop.hive.ql.parse.HiveParser.fromClause(HiveParser.java:45861)
	at org.apache.hadoop.hive.ql.parse.HiveParser.selectStatement(HiveParser.java:41516)
	at org.apache.hadoop.hive.ql.parse.HiveParser.regularBody(HiveParser.java:41402)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpressionBody(HiveParser.java:40413)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpression(HiveParser.java:40283)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1590)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.spark.sql.hive.HiveQl$.getAst(HiveQl.scala:258)
	at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:283)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.hive.HiveQl$.parseSql(HiveQl.scala:276)
	at org.apache.spark.sql.hive.HiveQLDialect.parse(HiveContext.scala:62)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.getLogicalPlan(CalciteDialect.scala:54)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.execution.datasources.DDLParser.parse(DDLParser.scala:42)
	at org.apache.spark.sql.SQLContext.parseSql(SQLContext.scala:189)
	at org.apache.spark.sql.hive.HiveContext.parseSql(HiveContext.scala:280)
	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.<init>(TestHive.scala:179)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:34)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
	at scala.collection.AbstractTraversable.map(Traversable.scala:105)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 0750 *** FAILED ***[0m
[31m  org.apache.spark.sql.AnalysisException: cannot recognize input near '(' 'HU' '.' in from source; line 1 pos 20[0m
[31m  at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:296)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  ...[0m
NoViableAltException(26@[150:5: ( ( Identifier LPAREN )=> partitionedTableFunction | tableSource | subQuerySource | virtualTableSource )])
	at org.antlr.runtime.DFA.noViableAlt(DFA.java:158)
	at org.antlr.runtime.DFA.predict(DFA.java:144)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.fromSource(HiveParser_FromClauseParser.java:3711)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.joinSource(HiveParser_FromClauseParser.java:1910)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.fromClause(HiveParser_FromClauseParser.java:1518)
	at org.apache.hadoop.hive.ql.parse.HiveParser.fromClause(HiveParser.java:45861)
	at org.apache.hadoop.hive.ql.parse.HiveParser.selectStatement(HiveParser.java:41516)
	at org.apache.hadoop.hive.ql.parse.HiveParser.regularBody(HiveParser.java:41402)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpressionBody(HiveParser.java:40413)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpression(HiveParser.java:40283)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1590)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.spark.sql.hive.HiveQl$.getAst(HiveQl.scala:258)
	at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:283)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.hive.HiveQl$.parseSql(HiveQl.scala:276)
	at org.apache.spark.sql.hive.HiveQLDialect.parse(HiveContext.scala:62)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.getLogicalPlan(CalciteDialect.scala:54)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.execution.datasources.DDLParser.parse(DDLParser.scala:42)
	at org.apache.spark.sql.SQLContext.parseSql(SQLContext.scala:189)
	at org.apache.spark.sql.hive.HiveContext.parseSql(HiveContext.scala:280)
	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.<init>(TestHive.scala:179)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:34)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
	at scala.collection.AbstractTraversable.map(Traversable.scala:105)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 0751 *** FAILED ***[0m
[31m  org.apache.spark.sql.AnalysisException: cannot recognize input near '(' 'HU' '.' in from source; line 1 pos 48[0m
[31m  at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:296)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, CITY, SALARY FROM HU.STAFF3 LEFT JOIN STAFF66 USING (EMPNUM) UNION SELECT EMPNUM, CITY, SALARY FROM HU.STAFF3 RIGHT JOIN STAFF66 USING (EMPNUM) ORDER BY EMPNUM
zcerror[31m- 0752 *** ; SELECT EMPNUM, CITY, SALARY FROM HU.STAFF3 LEFT JOIN STAFF66 USING (EMPNUM) UNION SELECT EMPNUM, CITY, SALARY FROM HU.STAFF3 RIGHT JOIN STAFF66 USING (EMPNUM) ORDER BY EMPNUM ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT * FROM STAFF66 NATURAL INNER JOIN HU.STAFF3
[32m- 0753[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, EMPNAME, SALARY FROM HU.STAFF3 NATURAL LEFT OUTER JOIN STAFF66 WHERE EMPNUM > 'E1' ORDER BY EMPNUM ASC
[31m- 0754 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29661, EMPNUM#29668.;[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29661, EMPNUM#29668.;[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve(LogicalPlan.scala:278)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveChildren(LogicalPlan.scala:162)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4$$anonfun$19.apply(Analyzer.scala:387)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4$$anonfun$19.apply(Analyzer.scala:387)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$.withPosition(package.scala:48)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4.applyOrElse(Analyzer.scala:387)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4.applyOrElse(Analyzer.scala:383)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:108)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:118)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:126)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:126)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8.applyOrElse(Analyzer.scala:383)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8.applyOrElse(Analyzer.scala:277)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$.apply(Analyzer.scala:277)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$.apply(Analyzer.scala:276)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:83)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:80)[0m
[31m  	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)[0m
[31m  	at scala.collection.immutable.List.foldLeft(List.scala:84)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:80)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:72)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:72)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed$lzycompute(TestHive.scala:195)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed(TestHive.scala:180)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNUM ASC], true[0m
[31m   'Project [unresolvedalias('EMPNUM),unresolvedalias('EMPNAME),unresolvedalias('SALARY)][0m
[31m    'Filter ('EMPNUM > E1)[0m
[31m     'Join LeftOuter, None[0m
[31m      'UnresolvedRelation [HU,STAFF3], None[0m
[31m      'UnresolvedRelation [STAFF66], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29669, EMPNUM#29676.;[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29677, EMPNUM#29684.;[0m
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29685, EMPNUM#29692.;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29693, EMPNUM#29700.;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29701, EMPNUM#29708.;[0m
[31m  == HIVE - 0 row(s) == (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, EMPNAME, SALARY FROM STAFF66 NATURAL RIGHT OUTER JOIN HU.STAFF WHERE EMPNUM > 'E1' ORDER BY EMPNUM DESC
[31m- 0755 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29986, EMPNUM#29987.;[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29986, EMPNUM#29987.;[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve(LogicalPlan.scala:278)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveChildren(LogicalPlan.scala:162)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4$$anonfun$19.apply(Analyzer.scala:387)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4$$anonfun$19.apply(Analyzer.scala:387)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$.withPosition(package.scala:48)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4.applyOrElse(Analyzer.scala:387)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$applyOrElse$4.applyOrElse(Analyzer.scala:383)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:108)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:118)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:126)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:126)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8.applyOrElse(Analyzer.scala:383)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8.applyOrElse(Analyzer.scala:277)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$.apply(Analyzer.scala:277)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$.apply(Analyzer.scala:276)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:83)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:80)[0m
[31m  	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)[0m
[31m  	at scala.collection.immutable.List.foldLeft(List.scala:84)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:80)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:72)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:72)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed$lzycompute(TestHive.scala:195)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed(TestHive.scala:180)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNUM DESC], true[0m
[31m   'Project [unresolvedalias('EMPNUM),unresolvedalias('EMPNAME),unresolvedalias('SALARY)][0m
[31m    'Filter ('EMPNUM > E1)[0m
[31m     'Join RightOuter, None[0m
[31m      'UnresolvedRelation [STAFF66], None[0m
[31m      'UnresolvedRelation [HU,STAFF], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#29994, EMPNUM#29995.;[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#30002, EMPNUM#30003.;[0m
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#30010, EMPNUM#30011.;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#30018, EMPNUM#30019.;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#30026, EMPNUM#30027.;[0m
[31m  == HIVE - 3 row(s) ==[0m
[31m  E7	SULLIVAN	NULL[0m
[31m  E6	Fidel	NULL[0m
[31m  E13	ff	NULL (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT * FROM STAFF66 RIGHT JOIN HU.STAFF USING ( GRADE, EMPNUM, EMPNAME) WHERE EMPNUM > 'E1' ORDER BY EMPNUM
(List(STAFF66, GRADE),List(HU, STAFF, GRADE))
(List(STAFF66, EMPNUM),List(HU, STAFF, EMPNUM))
(List(STAFF66, EMPNAME),List(HU, STAFF, EMPNAME))
ListBuffer(('STAFF66.EMPNUM = 'HU.STAFF.EMPNUM), ('STAFF66.EMPNAME = 'HU.STAFF.EMPNAME))
NoViableAltException(280@[184:5: ( ( tableProperties )=>props= tableProperties )?])
	at org.antlr.runtime.DFA.noViableAlt(DFA.java:158)
	at org.antlr.runtime.DFA.predict(DFA.java:116)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.tableSource(HiveParser_FromClauseParser.java:4552)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.fromSource(HiveParser_FromClauseParser.java:3729)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.joinSource(HiveParser_FromClauseParser.java:1910)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.fromClause(HiveParser_FromClauseParser.java:1518)
	at org.apache.hadoop.hive.ql.parse.HiveParser.fromClause(HiveParser.java:45861)
	at org.apache.hadoop.hive.ql.parse.HiveParser.selectStatement(HiveParser.java:41516)
	at org.apache.hadoop.hive.ql.parse.HiveParser.regularBody(HiveParser.java:41402)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpressionBody(HiveParser.java:40413)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpression(HiveParser.java:40283)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1590)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:396)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:308)
	at org.apache.hadoop.hive.ql.Driver.compileInternal(Driver.java:1122)
	at org.apache.hadoop.hive.ql.Driver.runInternal(Driver.java:1170)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:1059)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:1049)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:429)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)
	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)
	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)
	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)
	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)
	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)
	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)
	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)
	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 0756 golden answer for query:[0m
[31m  Error: FAILED: ParseException line 1:42 cannot recognize input near 'USING' '(' 'GRADE' in table source[0m
[31m  org.apache.spark.sql.execution.QueryExecutionException: FAILED: ParseException line 1:42 cannot recognize input near 'USING' '(' 'GRADE' in table source[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:433)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  SELECT * FROM STAFF66 RIGHT JOIN HU.STAFF USING ( GRADE, EMPNUM, EMPNAME) WHERE EMPNUM > 'E1' ORDER BY EMPNUM (HiveComparisonTest.scala:343)[0m
Calcite parsing passed, start to transform. SELECT * FROM HU.STAFF3 LEFT JOIN STAFF66 USING (GRADE, EMPNUM) WHERE EMPNUM > 'E1' ORDER BY EMPNUM ASC
(List(HU, STAFF3, GRADE),List(STAFF66, GRADE))
(List(HU, STAFF3, EMPNUM),List(STAFF66, EMPNUM))
[31m- 0757 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: cannot resolve 'HU.STAFF3.GRADE' given input columns grade, salary, city, empnum, grade, empnum, empname, empname;[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.GRADE' given input columns grade, salary, city, empnum, grade, empnum, empname, empname;[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:108)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:119)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:126)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:126)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:103)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:44)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNUM ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'Filter ('EMPNUM > E1)[0m
[31m     'Join LeftOuter, Some((('HU.STAFF3.GRADE = 'STAFF66.GRADE) && ('HU.STAFF3.EMPNUM = 'STAFF66.EMPNUM)))[0m
[31m      'UnresolvedRelation [HU,STAFF3], None[0m
[31m      'UnresolvedRelation [STAFF66], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.catalyst.analysis.UnresolvedException: Invalid call to toAttribute on unresolved object, tree: unresolvedalias(*)[0m
[31m  'Sort ['EMPNUM ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'Filter ('EMPNUM > E1)[0m
[31m     'Join LeftOuter, Some((('HU.STAFF3.GRADE = GRADE#30229) && ('HU.STAFF3.EMPNUM = EMPNUM#30230)))[0m
[31m      MetastoreRelation hu, staff3, None[0m
[31m      MetastoreRelation FLATER, staff66, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.GRADE' given input columns grade, salary, city, empnum, grade, empnum, empname, empname;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.GRADE' given input columns grade, salary, city, empnum, grade, empnum, empname, empname;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.GRADE' given input columns grade, salary, city, empnum, grade, empnum, empname, empname;[0m
[31m  == HIVE - 0 row(s) == (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, GRADE, HU.STAFF3.EMPNAME, CITY, SALARY, STAFF66.EMPNAME FROM HU.STAFF3 LEFT JOIN STAFF66 USING (GRADE, EMPNUM) WHERE EMPNUM = 'E3'
(List(HU, STAFF3, GRADE),List(STAFF66, GRADE))
(List(HU, STAFF3, EMPNUM),List(STAFF66, EMPNUM))
[31m- 0758 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: cannot resolve 'HU.STAFF3.GRADE' given input columns grade, empname, salary, empnum, empname, grade, city, empnum;[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.GRADE' given input columns grade, empname, salary, empnum, empname, grade, city, empnum;[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:108)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:119)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:126)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:126)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:103)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:44)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('EMPNUM),unresolvedalias('GRADE),unresolvedalias('HU.STAFF3.EMPNAME),unresolvedalias('CITY),unresolvedalias('SALARY),unresolvedalias('STAFF66.EMPNAME)][0m
[31m   'Filter ('EMPNUM = E3)[0m
[31m    'Join LeftOuter, Some((('HU.STAFF3.GRADE = 'STAFF66.GRADE) && ('HU.STAFF3.EMPNUM = 'STAFF66.EMPNUM)))[0m
[31m     'UnresolvedRelation [HU,STAFF3], None[0m
[31m     'UnresolvedRelation [STAFF66], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.catalyst.analysis.UnresolvedException: Invalid call to toAttribute on unresolved object, tree: unresolvedalias('EMPNUM)[0m
[31m  'Project [unresolvedalias('EMPNUM),unresolvedalias('GRADE),unresolvedalias('HU.STAFF3.EMPNAME),unresolvedalias('CITY),unresolvedalias('SALARY),unresolvedalias('STAFF66.EMPNAME)][0m
[31m   'Filter ('EMPNUM = E3)[0m
[31m    'Join LeftOuter, Some((('HU.STAFF3.GRADE = GRADE#30371) && ('HU.STAFF3.EMPNUM = EMPNUM#30372)))[0m
[31m     MetastoreRelation hu, staff3, None[0m
[31m     MetastoreRelation FLATER, staff66, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.GRADE' given input columns grade, empname, salary, empnum, empname, grade, city, empnum;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.GRADE' given input columns grade, empname, salary, empnum, empname, grade, city, empnum;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.GRADE' given input columns grade, empname, salary, empnum, empname, grade, city, empnum;[0m
[31m  == HIVE - 0 row(s) == (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFF66 NATURAL RIGHT JOIN HU.PROJ
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFF66 NATURAL RIGHT JOIN HU.PROJ
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFF66 NATURAL RIGHT JOIN HU.PROJ
[31m- 0759 match for 0759:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(count(1))][0m
[31m   'Join RightOuter, None[0m
[31m    'UnresolvedRelation [STAFF66], None[0m
[31m    'UnresolvedRelation [HU,PROJ], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: bigint[0m
[31m  Aggregate [count(1) AS _c0#30537L][0m
[31m   Join RightOuter, None[0m
[31m    MetastoreRelation FLATER, staff66, None[0m
[31m    MetastoreRelation hu, proj, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [count(1) AS _c0#30537L][0m
[31m   Project[0m
[31m    Join RightOuter, None[0m
[31m     Project[0m
[31m      MetastoreRelation FLATER, staff66, None[0m
[31m     Project[0m
[31m      MetastoreRelation hu, proj, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(count(1),mode=Final,isDistinct=false)], output=[_c0#30537L])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(count(1),mode=Partial,isDistinct=false)], output=[currentCount#30540L])[0m
[31m     TungstenProject[0m
[31m      CartesianProduct[0m
[31m       HiveTableScan (MetastoreRelation FLATER, staff66, None)[0m
[31m       HiveTableScan (MetastoreRelation hu, proj, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !3                       0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT * FROM HU.WORKS NATURAL LEFT JOIN HU.PROJ ORDER BY EMPNUM DESC, PNUM
[31m- 0760 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: Reference 'PNUM' is ambiguous, could be: PNUM#30973, PNUM#30975.;[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'PNUM' is ambiguous, could be: PNUM#30973, PNUM#30975.;[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve(LogicalPlan.scala:278)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve(LogicalPlan.scala:172)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$$anonfun$org$apache$spark$sql$catalyst$analysis$Analyzer$$resolveSortOrders$1$$anonfun$4.applyOrElse(Analyzer.scala:422)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$$anonfun$org$apache$spark$sql$catalyst$analysis$Analyzer$$resolveSortOrders$1$$anonfun$4.applyOrElse(Analyzer.scala:420)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$$anonfun$org$apache$spark$sql$catalyst$analysis$Analyzer$$resolveSortOrders$1.apply(Analyzer.scala:420)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$$anonfun$org$apache$spark$sql$catalyst$analysis$Analyzer$$resolveSortOrders$1.apply(Analyzer.scala:414)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32)[0m
[31m  	at scala.collection.mutable.ListBuffer.foreach(ListBuffer.scala:45)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$resolveSortOrders(Analyzer.scala:414)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveSortReferences$.resolveAndFindMissing(Analyzer.scala:466)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveSortReferences$$anonfun$apply$9.applyOrElse(Analyzer.scala:443)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveSortReferences$$anonfun$apply$9.applyOrElse(Analyzer.scala:440)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveSortReferences$.apply(Analyzer.scala:440)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveSortReferences$.apply(Analyzer.scala:439)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:83)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:80)[0m
[31m  	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)[0m
[31m  	at scala.collection.immutable.List.foldLeft(List.scala:84)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:80)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:72)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:72)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed$lzycompute(TestHive.scala:195)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed(TestHive.scala:180)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNUM DESC,'PNUM ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'Join LeftOuter, None[0m
[31m     'UnresolvedRelation [HU,WORKS], None[0m
[31m     'UnresolvedRelation [HU,PROJ], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'PNUM' is ambiguous, could be: PNUM#30981, PNUM#30983.;[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'PNUM' is ambiguous, could be: PNUM#30989, PNUM#30991.;[0m
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'PNUM' is ambiguous, could be: PNUM#30997, PNUM#30999.;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'PNUM' is ambiguous, could be: PNUM#31005, PNUM#31007.;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: Reference 'PNUM' is ambiguous, could be: PNUM#31013, PNUM#31015.;[0m
[31m  == HIVE - 27 row(s) ==[0m
[31m  P2	e1	NULL	CALM	Code	30000	Vienna[0m
[31m  P5	e1	NULL	IRM	Test	10000	NULL[0m
[31m  p2	e1	NULL	NULL	NULL	NULL	NULL[0m
[31m  low	UPP	NULL	NULL	NULL	NULL	NULL[0m
[31m  P7	E9	10	PROGRAM	RISC	15000	Gaithersburg[0m
[31m  P9	E9	NULL	NULL	NULL	NULL	NULL[0m
[31m  P8	E8	NULL	NULL	NULL	NULL	NULL[0m
[31m  P4	E7	NULL	NULL	NULL	NULL	NULL[0m
[31m  P2	E6	55	CALM	Code	30000	Vienna[0m
[31m  P6	E6	NULL	NULL	NULL	NULL	NULL[0m
[31m  P5	E5	NULL	IRM	Test	10000	NULL[0m
[31m  P4	E4	NULL	NULL	NULL	NULL	NULL[0m
[31m  p4	E4	NULL	NULL	NULL	NULL	NULL[0m
[31m  P2	E3	100	CALM	Code	30000	Vienna[0m
[31m  P5	E3	100	IRM	Test	10000	NULL[0m
[31m  P6	E3	NULL	NULL	NULL	NULL	NULL[0m
[31m  P22	E22	NULL	NULL	NULL	NULL	NULL[0m
[31m  P1	E2	NULL	NULL	NULL	NULL	NULL[0m
[31m  P2	E2	NULL	CALM	Code	30000	Vienna[0m
[31m  P18	E18	NULL	NULL	NULL	NULL	NULL[0m
[31m  P1	E1	NULL	NULL	NULL	NULL	NULL[0m
[31m  P2	E1	NULL	CALM	Code	30000	Vienna[0m
[31m  P4	E1	NULL	NULL	NULL	NULL	NULL[0m
[31m  P5	E1	NULL	IRM	Test	10000	NULL[0m
[31m  P6	E1	NULL	NULL	NULL	NULL	NULL[0m
[31m  P7	E1	NULL	PROGRAM	RISC	15000	Gaithersburg[0m
[31m  p2	E1	NULL	NULL	NULL	NULL	NULL (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT * FROM HU.WORKS JOIN HU.PROJ USING (PNUM) ORDER BY EMPNUM DESC, PNUM
(List(HU, WORKS, PNUM),List(HU, PROJ, PNUM))
[31m- 0761 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: cannot resolve 'HU.WORKS.PNUM' given input columns city, budget, ptype, pname, pnum, hours, empnum, pnum;[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.WORKS.PNUM' given input columns city, budget, ptype, pname, pnum, hours, empnum, pnum;[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:108)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:119)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:126)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:126)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:103)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:44)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNUM DESC,'PNUM ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'Join Inner, Some(('HU.WORKS.PNUM = 'HU.PROJ.PNUM))[0m
[31m     'UnresolvedRelation [HU,WORKS], None[0m
[31m     'UnresolvedRelation [HU,PROJ], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.catalyst.analysis.UnresolvedException: Invalid call to toAttribute on unresolved object, tree: unresolvedalias(*)[0m
[31m  'Sort ['EMPNUM DESC,'PNUM ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'Join Inner, Some(('HU.WORKS.PNUM = 'HU.PROJ.PNUM))[0m
[31m     MetastoreRelation hu, works, None[0m
[31m     MetastoreRelation hu, proj, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.WORKS.PNUM' given input columns city, budget, ptype, pname, pnum, hours, empnum, pnum;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.WORKS.PNUM' given input columns city, budget, ptype, pname, pnum, hours, empnum, pnum;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: cannot resolve 'HU.WORKS.PNUM' given input columns city, budget, ptype, pname, pnum, hours, empnum, pnum;[0m
[31m  == HIVE - 11 row(s) ==[0m
[31m  P2	e1	NULL	CALM	Code	30000	Vienna[0m
[31m  P5	e1	NULL	IRM	Test	10000	NULL[0m
[31m  P7	E9	10	PROGRAM	RISC	15000	Gaithersburg[0m
[31m  P2	E6	55	CALM	Code	30000	Vienna[0m
[31m  P5	E5	NULL	IRM	Test	10000	NULL[0m
[31m  P2	E3	100	CALM	Code	30000	Vienna[0m
[31m  P5	E3	100	IRM	Test	10000	NULL[0m
[31m  P2	E2	NULL	CALM	Code	30000	Vienna[0m
[31m  P2	E1	NULL	CALM	Code	30000	Vienna[0m
[31m  P5	E1	NULL	IRM	Test	10000	NULL[0m
[31m  P7	E1	NULL	PROGRAM	RISC	15000	Gaithersburg (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT * FROM HU.WORKS RIGHT JOIN HU.PROJ ON HU.WORKS.PNUM = HU.PROJ.PNUM ORDER BY 1 DESC, 2
zcerror[31m- 0762 *** ; SELECT * FROM HU.WORKS RIGHT JOIN HU.PROJ ON HU.WORKS.PNUM = HU.PROJ.PNUM ORDER BY 1 DESC, 2 ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT EMPNAME, CITY, T_DECIMAL FROM HU.STAFF LEFT OUTER JOIN SEVEN_TYPES ON -GRADE / 11 BETWEEN T_REAL AND T_DECIMAL ORDER BY EMPNAME
Calcite parsing passed, start to transform. SELECT EMPNAME, CITY, T_DECIMAL FROM HU.STAFF LEFT OUTER JOIN SEVEN_TYPES ON -GRADE / 11 BETWEEN T_REAL AND T_DECIMAL ORDER BY EMPNAME
Calcite parsing passed, start to transform. SELECT EMPNAME, CITY, T_DECIMAL FROM HU.STAFF LEFT OUTER JOIN SEVEN_TYPES ON -GRADE / 11 BETWEEN T_REAL AND T_DECIMAL ORDER BY EMPNAME
[31m- 0763 match for 0763:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNAME ASC], true[0m
[31m   'Project [unresolvedalias('EMPNAME),unresolvedalias('CITY),unresolvedalias('T_DECIMAL)][0m
[31m    'Join LeftOuter, Some((((-'GRADE / 11) >= 'T_REAL) && ((-'GRADE / 11) <= 'T_DECIMAL)))[0m
[31m     'UnresolvedRelation [HU,STAFF], None[0m
[31m     'UnresolvedRelation [SEVEN_TYPES], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  EMPNAME: string, CITY: string, T_DECIMAL: double[0m
[31m  Sort [EMPNAME#31599 ASC], true[0m
[31m   Project [EMPNAME#31599,CITY#31601,T_DECIMAL#31605][0m
[31m    Join LeftOuter, Some((((-GRADE#31600 / cast(11 as double)) >= cast(T_REAL#31606 as double)) && ((-GRADE#31600 / cast(11 as double)) <= T_DECIMAL#31605)))[0m
[31m     MetastoreRelation hu, staff, None[0m
[31m     MetastoreRelation FLATER, seven_types, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [EMPNAME#31599 ASC], true[0m
[31m   Project [EMPNAME#31599,CITY#31601,T_DECIMAL#31605][0m
[31m    Join LeftOuter, Some((((-GRADE#31600 / 11.0) >= cast(T_REAL#31606 as double)) && ((-GRADE#31600 / 11.0) <= T_DECIMAL#31605)))[0m
[31m     Project [CITY#31601,EMPNAME#31599,GRADE#31600][0m
[31m      MetastoreRelation hu, staff, None[0m
[31m     Project [T_REAL#31606,T_DECIMAL#31605][0m
[31m      MetastoreRelation FLATER, seven_types, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [EMPNAME#31599 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(EMPNAME#31599 ASC)[0m
[31m     ConvertToSafe[0m
[31m      TungstenProject [EMPNAME#31599,CITY#31601,T_DECIMAL#31605][0m
[31m       BroadcastNestedLoopJoin BuildLeft, LeftOuter, Some((((-GRADE#31600 / 11.0) >= cast(T_REAL#31606 as double)) && ((-GRADE#31600 / 11.0) <= T_DECIMAL#31605)))[0m
[31m        HiveTableScan [CITY#31601,EMPNAME#31599,GRADE#31600], (MetastoreRelation hu, staff, None)[0m
[31m        HiveTableScan [T_REAL#31606,T_DECIMAL#31605], (MetastoreRelation FLATER, seven_types, None)[0m
  
[31m  Code Generation: true[0m
[31m  EMPNAME	CITY	T_DECIMAL[0m
[31m  !== HIVE - 4 row(s) ==        == CATALYST - 4 row(s) ==[0m
[31m  !Fidel	Havana	0               Fidel	Havana	0.0[0m
[31m  !Fidel	Havana	0               Fidel	Havana	0.0[0m
[31m   SULLIVAN	Gaithersburg	NULL   SULLIVAN	Gaithersburg	NULL[0m
[31m   ff	gg	NULL                   ff	gg	NULL (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT T_INT, T_CHAR, EMPNAME, EMPNUM, GRADE FROM SEVEN_TYPES RIGHT JOIN HU.STAFF ON GRADE IN (10, 11, 13) AND EMPNUM = T_CHAR ORDER BY EMPNAME, T_INT
Calcite parsing passed, start to transform. SELECT T_INT, T_CHAR, EMPNAME, EMPNUM, GRADE FROM SEVEN_TYPES RIGHT JOIN HU.STAFF ON GRADE IN (10, 11, 13) AND EMPNUM = T_CHAR ORDER BY EMPNAME, T_INT
Calcite parsing passed, start to transform. SELECT T_INT, T_CHAR, EMPNAME, EMPNUM, GRADE FROM SEVEN_TYPES RIGHT JOIN HU.STAFF ON GRADE IN (10, 11, 13) AND EMPNUM = T_CHAR ORDER BY EMPNAME, T_INT
[31m- 0764 match for 0764:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNAME ASC,'T_INT ASC], true[0m
[31m   'Project [unresolvedalias('T_INT),unresolvedalias('T_CHAR),unresolvedalias('EMPNAME),unresolvedalias('EMPNUM),unresolvedalias('GRADE)][0m
[31m    'Join RightOuter, Some(('GRADE IN (10,11,13) && ('EMPNUM = 'T_CHAR)))[0m
[31m     'UnresolvedRelation [SEVEN_TYPES], None[0m
[31m     'UnresolvedRelation [HU,STAFF], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  T_INT: double, T_CHAR: string, EMPNAME: string, EMPNUM: string, GRADE: double[0m
[31m  Sort [EMPNAME#32249 ASC,T_INT#32241 ASC], true[0m
[31m   Project [T_INT#32241,T_CHAR#32242,EMPNAME#32249,EMPNUM#32248,GRADE#32250][0m
[31m    Join RightOuter, Some((GRADE#32250 IN (cast(10 as double),cast(11 as double),cast(13 as double)) && (EMPNUM#32248 = T_CHAR#32242)))[0m
[31m     MetastoreRelation FLATER, seven_types, None[0m
[31m     MetastoreRelation hu, staff, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [EMPNAME#32249 ASC,T_INT#32241 ASC], true[0m
[31m   Project [T_INT#32241,T_CHAR#32242,EMPNAME#32249,EMPNUM#32248,GRADE#32250][0m
[31m    Join RightOuter, Some((GRADE#32250 IN (10.0,11.0,13.0) && (EMPNUM#32248 = T_CHAR#32242)))[0m
[31m     Project [T_INT#32241,T_CHAR#32242][0m
[31m      MetastoreRelation FLATER, seven_types, None[0m
[31m     Project [EMPNAME#32249,EMPNUM#32248,GRADE#32250][0m
[31m      MetastoreRelation hu, staff, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [EMPNAME#32249 ASC,T_INT#32241 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(EMPNAME#32249 ASC,T_INT#32241 ASC)[0m
[31m     ConvertToSafe[0m
[31m      TungstenProject [T_INT#32241,T_CHAR#32242,EMPNAME#32249,EMPNUM#32248,GRADE#32250][0m
[31m       BroadcastHashOuterJoin [T_CHAR#32242], [EMPNUM#32248], RightOuter, Some(GRADE#32250 IN (10.0,11.0,13.0))[0m
[31m        ConvertToUnsafe[0m
[31m         HiveTableScan [T_INT#32241,T_CHAR#32242], (MetastoreRelation FLATER, seven_types, None)[0m
[31m        ConvertToUnsafe[0m
[31m         HiveTableScan [EMPNAME#32249,EMPNUM#32248,GRADE#32250], (MetastoreRelation hu, staff, None)[0m
  
[31m  Code Generation: true[0m
[31m  T_INT	T_CHAR	EMPNAME	EMPNUM	GRADE[0m
[31m  !== HIVE - 3 row(s) ==      == CATALYST - 3 row(s) ==[0m
[31m  !NULL	NULL	Fidel	E6	0       NULL	NULL	Fidel	E6	0.0[0m
[31m  !NULL	NULL	SULLIVAN	E7	15   NULL	NULL	SULLIVAN	E7	15.0[0m
[31m  !NULL	NULL	ff	E13	82        NULL	NULL	ff	E13	82.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT HU.STAFF.CITY,EMPNAME,PNAME,BUDGET FROM HU.STAFF LEFT JOIN HU.PROJ ON HU.STAFF.CITY = HU.PROJ.CITY AND HU.STAFF.CITY <> 'Vienna' AND EMPNAME <> 'Don' WHERE BUDGET > 15000 OR BUDGET IS NULL ORDER BY HU.STAFF.CITY, EMPNAME, BUDGET
[31m- 0765 golden answer for query:[0m
[31m  Error: FAILED: SemanticException Line 1:23 Invalid path ''/home/cherry/sotc_cloud-panthera-nist-test/plusd/0765/PROJ.csv'': No files matching path file:/home/cherry/sotc_cloud-panthera-nist-test/plusd/0765/PROJ.csv[0m
[31m  org.apache.spark.sql.execution.QueryExecutionException: FAILED: SemanticException Line 1:23 Invalid path ''/home/cherry/sotc_cloud-panthera-nist-test/plusd/0765/PROJ.csv'': No files matching path file:/home/cherry/sotc_cloud-panthera-nist-test/plusd/0765/PROJ.csv[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:433)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  LOAD DATA LOCAL INPATH '/home/cherry/sotc_cloud-panthera-nist-test/plusd/0765/PROJ.csv' OVERWRITE INTO TABLE PROJ (HiveComparisonTest.scala:343)[0m
Calcite parsing passed, start to transform. SELECT HU.STAFF.CITY,EMPNAME,PNAME,BUDGET FROM HU.STAFF LEFT JOIN HU.PROJ ON HU.STAFF.CITY = HU.PROJ.CITY AND HU.STAFF.CITY <> 'Vienna' WHERE (BUDGET > 15000 OR BUDGET IS NULL) AND EMPNAME <> 'Don' ORDER BY HU.STAFF.CITY, EMPNAME, BUDGET
[31m- 0766 golden answer for query:[0m
[31m  Error: FAILED: SemanticException Line 1:23 Invalid path ''/home/cherry/sotc_cloud-panthera-nist-test/plusd/0766/PROJ.csv'': No files matching path file:/home/cherry/sotc_cloud-panthera-nist-test/plusd/0766/PROJ.csv[0m
[31m  org.apache.spark.sql.execution.QueryExecutionException: FAILED: SemanticException Line 1:23 Invalid path ''/home/cherry/sotc_cloud-panthera-nist-test/plusd/0766/PROJ.csv'': No files matching path file:/home/cherry/sotc_cloud-panthera-nist-test/plusd/0766/PROJ.csv[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:433)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  LOAD DATA LOCAL INPATH '/home/cherry/sotc_cloud-panthera-nist-test/plusd/0766/PROJ.csv' OVERWRITE INTO TABLE PROJ (HiveComparisonTest.scala:343)[0m
Calcite parsing passed, start to transform. SELECT XX.T_INT, YY.T_INT FROM SEVEN_TYPES XX RIGHT OUTER JOIN SEVEN_TYPES YY ON XX.T_INT = YY.T_INT +1 ORDER BY YY.T_INT
Calcite parsing passed, start to transform. SELECT XX.T_INT, YY.T_INT FROM SEVEN_TYPES XX RIGHT OUTER JOIN SEVEN_TYPES YY ON XX.T_INT = YY.T_INT +1 ORDER BY YY.T_INT
Calcite parsing passed, start to transform. SELECT XX.T_INT, YY.T_INT FROM SEVEN_TYPES XX RIGHT OUTER JOIN SEVEN_TYPES YY ON XX.T_INT = YY.T_INT +1 ORDER BY YY.T_INT
[31m- 0767 match for 0767:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['YY.T_INT ASC], true[0m
[31m   'Project [unresolvedalias('XX.T_INT),unresolvedalias('YY.T_INT)][0m
[31m    'Join RightOuter, Some(('XX.T_INT = ('YY.T_INT + 1)))[0m
[31m     'UnresolvedRelation [SEVEN_TYPES], Some(XX)[0m
[31m     'UnresolvedRelation [SEVEN_TYPES], Some(YY)[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  T_INT: double, T_INT: double[0m
[31m  Sort [T_INT#32788 ASC], true[0m
[31m   Project [T_INT#32781,T_INT#32788][0m
[31m    Join RightOuter, Some((T_INT#32781 = (T_INT#32788 + cast(1 as double))))[0m
[31m     MetastoreRelation FLATER, seven_types, Some(XX)[0m
[31m     MetastoreRelation FLATER, seven_types, Some(YY)[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [T_INT#32788 ASC], true[0m
[31m   Project [T_INT#32781,T_INT#32788][0m
[31m    Join RightOuter, Some((T_INT#32781 = (T_INT#32788 + 1.0)))[0m
[31m     Project [T_INT#32781][0m
[31m      MetastoreRelation FLATER, seven_types, Some(XX)[0m
[31m     Project [T_INT#32788][0m
[31m      MetastoreRelation FLATER, seven_types, Some(YY)[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [T_INT#32788 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(T_INT#32788 ASC)[0m
[31m     ConvertToSafe[0m
[31m      TungstenProject [T_INT#32781,T_INT#32788][0m
[31m       BroadcastHashOuterJoin [T_INT#32781], [(T_INT#32788 + 1.0)], RightOuter, None[0m
[31m        ConvertToUnsafe[0m
[31m         HiveTableScan [T_INT#32781], (MetastoreRelation FLATER, seven_types, Some(XX))[0m
[31m        ConvertToUnsafe[0m
[31m         HiveTableScan [T_INT#32788], (MetastoreRelation FLATER, seven_types, Some(YY))[0m
  
[31m  Code Generation: true[0m
[31m  T_INT	T_INT[0m
[31m  !== HIVE - 5 row(s) ==   == CATALYST - 5 row(s) ==[0m
[31m  !2	1                     2.0	1.0[0m
[31m  !3	2                     3.0	2.0[0m
[31m  !NULL	3                  NULL	3.0[0m
[31m  !NULL	12                 NULL	12.0[0m
[31m  !NULL	12                 NULL	12.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT GRADE, T_FLOAT, T_DOUBLE FROM HU.STAFF LEFT JOIN SEVEN_TYPES T7 ON GRADE * -40 > T7.T_FLOAT OR (T_DOUBLE -542.5 < GRADE AND T_DOUBLE -541.5 > GRADE) ORDER BY GRADE
Calcite parsing passed, start to transform. SELECT GRADE, T_FLOAT, T_DOUBLE FROM HU.STAFF LEFT JOIN SEVEN_TYPES T7 ON GRADE * -40 > T7.T_FLOAT OR (T_DOUBLE -542.5 < GRADE AND T_DOUBLE -541.5 > GRADE) ORDER BY GRADE
Calcite parsing passed, start to transform. SELECT GRADE, T_FLOAT, T_DOUBLE FROM HU.STAFF LEFT JOIN SEVEN_TYPES T7 ON GRADE * -40 > T7.T_FLOAT OR (T_DOUBLE -542.5 < GRADE AND T_DOUBLE -541.5 > GRADE) ORDER BY GRADE
[31m- 0768 match for 0768:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['GRADE ASC], true[0m
[31m   'Project [unresolvedalias('GRADE),unresolvedalias('T_FLOAT),unresolvedalias('T_DOUBLE)][0m
[31m    'Join LeftOuter, Some(((('GRADE * -40) > 'T7.T_FLOAT) || ((('T_DOUBLE - 542.5) < 'GRADE) && (('T_DOUBLE - 541.5) > 'GRADE))))[0m
[31m     'UnresolvedRelation [HU,STAFF], None[0m
[31m     'UnresolvedRelation [SEVEN_TYPES], Some(T7)[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  GRADE: double, T_FLOAT: float, T_DOUBLE: float[0m
[31m  Sort [GRADE#33203 ASC], true[0m
[31m   Project [GRADE#33203,T_FLOAT#33210,T_DOUBLE#33211][0m
[31m    Join LeftOuter, Some((((GRADE#33203 * cast(-40 as double)) > cast(T_FLOAT#33210 as double)) || (((cast(T_DOUBLE#33211 as double) - cast(542.5 as double)) < GRADE#33203) && ((cast(T_DOUBLE#33211 as double) - cast(541.5 as double)) > GRADE#33203))))[0m
[31m     MetastoreRelation hu, staff, None[0m
[31m     MetastoreRelation FLATER, seven_types, Some(T7)[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [GRADE#33203 ASC], true[0m
[31m   Project [GRADE#33203,T_FLOAT#33210,T_DOUBLE#33211][0m
[31m    Join LeftOuter, Some((((GRADE#33203 * -40.0) > cast(T_FLOAT#33210 as double)) || (((cast(T_DOUBLE#33211 as double) - 542.5) < GRADE#33203) && ((cast(T_DOUBLE#33211 as double) - 541.5) > GRADE#33203))))[0m
[31m     Project [GRADE#33203][0m
[31m      MetastoreRelation hu, staff, None[0m
[31m     Project [T_FLOAT#33210,T_DOUBLE#33211][0m
[31m      MetastoreRelation FLATER, seven_types, Some(T7)[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [GRADE#33203 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(GRADE#33203 ASC)[0m
[31m     ConvertToSafe[0m
[31m      TungstenProject [GRADE#33203,T_FLOAT#33210,T_DOUBLE#33211][0m
[31m       BroadcastNestedLoopJoin BuildLeft, LeftOuter, Some((((GRADE#33203 * -40.0) > cast(T_FLOAT#33210 as double)) || (((cast(T_DOUBLE#33211 as double) - 542.5) < GRADE#33203) && ((cast(T_DOUBLE#33211 as double) - 541.5) > GRADE#33203))))[0m
[31m        HiveTableScan [GRADE#33203], (MetastoreRelation hu, staff, None)[0m
[31m        HiveTableScan [T_FLOAT#33210,T_DOUBLE#33211], (MetastoreRelation FLATER, seven_types, Some(T7))[0m
  
[31m  Code Generation: true[0m
[31m  GRADE	T_FLOAT	T_DOUBLE[0m
[31m  !== HIVE - 3 row(s) ==   == CATALYST - 3 row(s) ==[0m
[31m  !0	-444	-55              0.0	-444.0	-55.0[0m
[31m  !15	NULL	NULL            15.0	NULL	NULL[0m
[31m  !82	NULL	NULL            82.0	NULL	NULL (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT CAST (100.5 AS DECIMAL (3)) FROM HU.ECCO
[32m- 0769[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NO_DUCK WHERE GOOSE = 23.23
[32m- 0770[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NO_DUCK
[32m- 0771[0m
Calcite parsing passed, start to transform. SELECT CAST (CAST (3 AS DEC (5, 3)) AS CHAR (5)) FROM HU.ECCO
Calcite parsing passed, start to transform. SELECT CAST (CAST (3 AS DEC (5, 3)) AS CHAR (5)) FROM HU.ECCO
Calcite parsing passed, start to transform. SELECT CAST (CAST (3 AS DEC (5, 3)) AS CHAR (5)) FROM HU.ECCO
[31m- 0772 match for 0772:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(cast(cast(3 as decimal(5,3)) as string))][0m
[31m   'UnresolvedRelation [HU,ECCO], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: string[0m
[31m  Project [cast(cast(3 as decimal(5,3)) as string) AS _c0#33959][0m
[31m   MetastoreRelation hu, ecco, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [3.000 AS _c0#33959][0m
[31m   MetastoreRelation hu, ecco, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [3.000 AS _c0#33959][0m
[31m   HiveTableScan (MetastoreRelation hu, ecco, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !3                       3.000 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT OSPREY FROM NO_DUCK
[32m- 0773[0m
Calcite parsing passed, start to transform. SELECT OSPREY FROM NO_DUCK
[32m- 0774[0m
Calcite parsing passed, start to transform. SELECT CAST (-GOOSE AS CHAR (5)) FROM NO_DUCK
Calcite parsing passed, start to transform. SELECT CAST (-GOOSE AS CHAR (5)) FROM NO_DUCK
Calcite parsing passed, start to transform. SELECT CAST (-GOOSE AS CHAR (5)) FROM NO_DUCK
[31m- 0775 match for 0775:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(cast(-'GOOSE as string))][0m
[31m   'UnresolvedRelation [NO_DUCK], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: string[0m
[31m  Project [cast(-GOOSE#34341 as string) AS _c0#34345][0m
[31m   MetastoreRelation FLATER, no_duck, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [cast(-GOOSE#34341 as string) AS _c0#34345][0m
[31m   MetastoreRelation FLATER, no_duck, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [cast(-GOOSE#34341 as string) AS _c0#34345][0m
[31m   HiveTableScan [GOOSE#34341], (MetastoreRelation FLATER, no_duck, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !-12                     -12.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT CAST (-ALBATROSS AS CHAR (5)) FROM NO_DUCK
Calcite parsing passed, start to transform. SELECT CAST (-ALBATROSS AS CHAR (5)) FROM NO_DUCK
Calcite parsing passed, start to transform. SELECT CAST (-ALBATROSS AS CHAR (5)) FROM NO_DUCK
[31m- 0776 match for 0776:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(cast(-'ALBATROSS as string))][0m
[31m   'UnresolvedRelation [NO_DUCK], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: string[0m
[31m  Project [cast(-ALBATROSS#34532 as string) AS _c0#34535][0m
[31m   MetastoreRelation FLATER, no_duck, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [cast(-ALBATROSS#34532 as string) AS _c0#34535][0m
[31m   MetastoreRelation FLATER, no_duck, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [cast(-ALBATROSS#34532 as string) AS _c0#34535][0m
[31m   HiveTableScan [ALBATROSS#34532], (MetastoreRelation FLATER, no_duck, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !0                       -0.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT CAST (0230E-1 AS CHAR (10)) FROM HU.ECCO
Calcite parsing passed, start to transform. SELECT CAST (0230E-1 AS CHAR (10)) FROM HU.ECCO
Calcite parsing passed, start to transform. SELECT CAST (0230E-1 AS CHAR (10)) FROM HU.ECCO
[31m- 0777 match for 0777:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(cast(23.0 as string))][0m
[31m   'UnresolvedRelation [HU,ECCO], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: string[0m
[31m  Project [cast(23.0 as string) AS _c0#34743][0m
[31m   MetastoreRelation hu, ecco, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [23.0 AS _c0#34743][0m
[31m   MetastoreRelation hu, ecco, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [23.0 AS _c0#34743][0m
[31m   HiveTableScan (MetastoreRelation hu, ecco, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !23                      23.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT CAST (0230E+1 AS CHAR (10)) FROM HU.ECCO
Calcite parsing passed, start to transform. SELECT CAST (0230E+1 AS CHAR (10)) FROM HU.ECCO
Calcite parsing passed, start to transform. SELECT CAST (0230E+1 AS CHAR (10)) FROM HU.ECCO
[31m- 0778 match for 0778:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(cast(2.30E+3 as string))][0m
[31m   'UnresolvedRelation [HU,ECCO], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: string[0m
[31m  Project [cast(2.30E+3 as string) AS _c0#34969][0m
[31m   MetastoreRelation hu, ecco, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [2.30E+3 AS _c0#34969][0m
[31m   MetastoreRelation hu, ecco, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [2.30E+3 AS _c0#34969][0m
[31m   HiveTableScan (MetastoreRelation hu, ecco, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !2300                    2.30E+3 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT OSPREY FROM NO_DUCK
[32m- 0779[0m
Calcite parsing passed, start to transform. SELECT OSPREY FROM NO_DUCK
[32m- 0780[0m
Calcite parsing passed, start to transform. SELECT OSPREY FROM NO_DUCK
[32m- 0781[0m
Calcite parsing passed, start to transform. SELECT CAST (ALBATROSS AS CHAR (4)) FROM NO_DUCK
[32m- 0782[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NO_DUCK WHERE GOOSE IS NULL
[32m- 0784[0m
Calcite parsing passed, start to transform. SELECT CAST (GOOSE AS INT) FROM NO_DUCK
[32m- 0785[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.STAFF
[32m- 0786[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.STAFF WHERE EMPNAME LIKE 'H%'
[32m- 0787[0m
Calcite parsing passed, start to transform. SELECT * FROM CTRANS
Calcite parsing passed, start to transform. SELECT * FROM CTRANS
Calcite parsing passed, start to transform. SELECT * FROM CTRANS
[31m- 0788 match for 0788:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(*)][0m
[31m   'UnresolvedRelation [CTRANS], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  win_count: double[0m
[31m  Project [win_count#36280][0m
[31m   MetastoreRelation FLATER, ctrans, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  MetastoreRelation FLATER, ctrans, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [win_count#36280], (MetastoreRelation FLATER, ctrans, None)[0m
  
[31m  Code Generation: true[0m
[31m  win_count[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !24                      24.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT * FROM TRANSIENT ORDER BY WINDOW_ID
Calcite parsing passed, start to transform. SELECT * FROM TRANSIENT ORDER BY WINDOW_ID
Calcite parsing passed, start to transform. SELECT * FROM TRANSIENT ORDER BY WINDOW_ID
[31m- 0789 match for 0789:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['WINDOW_ID ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'UnresolvedRelation [TRANSIENT], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  window_id: double[0m
[31m  Sort [WINDOW_ID#36458 ASC], true[0m
[31m   Project [window_id#36458][0m
[31m    MetastoreRelation FLATER, transient, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [WINDOW_ID#36458 ASC], true[0m
[31m   MetastoreRelation FLATER, transient, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [WINDOW_ID#36458 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(WINDOW_ID#36458 ASC)[0m
[31m     HiveTableScan [window_id#36458], (MetastoreRelation FLATER, transient, None)[0m
  
[31m  Code Generation: true[0m
[31m  window_id[0m
[31m  !== HIVE - 24 row(s) ==   == CATALYST - 24 row(s) ==[0m
[31m  !1                        1.0[0m
[31m  !1                        1.0[0m
[31m  !1                        1.0[0m
[31m  !1                        1.0[0m
[31m  !1                        1.0[0m
[31m  !1                        1.0[0m
[31m  !1                        1.0[0m
[31m  !1                        1.0[0m
[31m  !1                        1.0[0m
[31m  !1                        1.0[0m
[31m  !1                        1.0[0m
[31m  !1                        1.0[0m
[31m  !2                        2.0[0m
[31m  !2                        2.0[0m
[31m  !2                        2.0[0m
[31m  !2                        2.0[0m
[31m  !2                        2.0[0m
[31m  !2                        2.0[0m
[31m  !2                        2.0[0m
[31m  !2                        2.0[0m
[31m  !2                        2.0[0m
[31m  !2                        2.0[0m
[31m  !2                        2.0[0m
[31m  !2                        2.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT * FROM HU.STAFF LEFT OUTER JOIN HU.WORKS USING (EMPNUM)
(List(HU, STAFF, EMPNUM),List(HU, WORKS, EMPNUM))
[31m- 0790 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: cannot resolve 'HU.STAFF.EMPNUM' given input columns pnum, hours, grade, empname, empnum, empnum, city;[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF.EMPNUM' given input columns pnum, hours, grade, empname, empnum, empnum, city;[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:108)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:119)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:126)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:126)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:103)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:44)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(*)][0m
[31m   'Join LeftOuter, Some(('HU.STAFF.EMPNUM = 'HU.WORKS.EMPNUM))[0m
[31m    'UnresolvedRelation [HU,STAFF], None[0m
[31m    'UnresolvedRelation [HU,WORKS], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.catalyst.analysis.UnresolvedException: Invalid call to toAttribute on unresolved object, tree: unresolvedalias(*)[0m
[31m  'Project [unresolvedalias(*)][0m
[31m   'Join LeftOuter, Some(('HU.STAFF.EMPNUM = 'HU.WORKS.EMPNUM))[0m
[31m    MetastoreRelation hu, staff, None[0m
[31m    MetastoreRelation hu, works, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF.EMPNUM' given input columns pnum, hours, grade, empname, empnum, empnum, city;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF.EMPNUM' given input columns pnum, hours, grade, empname, empnum, empnum, city;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF.EMPNUM' given input columns pnum, hours, grade, empname, empnum, empnum, city;[0m
[31m  == HIVE - 4 row(s) ==[0m
[31m  E7	SULLIVAN	15	Gaithersburg	P4	NULL[0m
[31m  E13	ff	82	gg	NULL	NULL[0m
[31m  E6	Fidel	0	Havana	P2	55[0m
[31m  E6	Fidel	0	Havana	P6	NULL (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM XX WHERE C4 = 'Timestamp' AND C5 BETWEEN TIMESTAMP '1993-11-10 00:01:00' AND TIMESTAMP '1993-11-10 00:03:00'
zcerror[31m- 0791 *** ; SELECT COUNT(*) FROM XX WHERE C4 = 'Timestamp' AND C5 BETWEEN TIMESTAMP '1993-11-10 00:01:00' AND TIMESTAMP '1993-11-10 00:03:00' ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FLATER.GRANT010
[32m- 0792[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FLATER.GRANT010
[32m- 0793[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FLATER.GRANT010
[32m- 0794[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FLATER.GRANT010
[32m- 0795[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FLATER.GRANT010 WHERE C1 = 0
[32m- 0796[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FLATER.GRANT010
[32m- 0797[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FLATER.GRANT010
[32m- 0798[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FLATER.GRANT010
[32m- 0799[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FLATER.X WHERE A = 0 AND B = 2 AND C = 0 AND D = 0
[32m- 0800[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, PNUM FROM WORKS ORDER BY EMPNUM, PNUM
[32m- 0801[0m
Calcite parsing passed, start to transform. SELECT SALARY, EMPNAME, HOURS, CITY FROM CTS1.STAFFb WHERE NULLIF(SALARY,HOURS) IS NULL ORDER BY EMPNAME
[31m- 0802 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: undefined function NULLIF;[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2$$anonfun$1.apply(hiveUDFs.scala:58)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2$$anonfun$1.apply(hiveUDFs.scala:58)[0m
[31m  	at scala.Option.getOrElse(Option.scala:120)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2.apply(hiveUDFs.scala:57)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2.apply(hiveUDFs.scala:53)[0m
[31m  	at scala.util.Try.getOrElse(Try.scala:77)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry.lookupFunction(hiveUDFs.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5$$anonfun$applyOrElse$23.apply(Analyzer.scala:490)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5$$anonfun$applyOrElse$23.apply(Analyzer.scala:490)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$.withPosition(package.scala:48)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5.applyOrElse(Analyzer.scala:489)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5.applyOrElse(Analyzer.scala:486)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:227)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:227)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:226)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionDown$1(QueryPlan.scala:76)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:86)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$1.apply(QueryPlan.scala:94)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDown(QueryPlan.scala:94)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressions(QueryPlan.scala:65)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10.applyOrElse(Analyzer.scala:486)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10.applyOrElse(Analyzer.scala:484)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$.apply(Analyzer.scala:484)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$.apply(Analyzer.scala:483)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:83)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:80)[0m
[31m  	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)[0m
[31m  	at scala.collection.immutable.List.foldLeft(List.scala:84)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:80)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:72)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:72)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed$lzycompute(TestHive.scala:195)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed(TestHive.scala:180)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNAME ASC], true[0m
[31m   'Project [unresolvedalias('SALARY),unresolvedalias('EMPNAME),unresolvedalias('HOURS),unresolvedalias('CITY)][0m
[31m    'Filter isnull('NULLIF('SALARY,'HOURS))[0m
[31m     'UnresolvedRelation [CTS1,STAFFB], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == HIVE - 2 row(s) ==[0m
[31m  10000	Kilroy	10000	Athens[0m
[31m  NULL	Nickos	NULL	Rhodes (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT SALARY,PNUM,HOURS,NULLIF(EMPNAME,CITY) FROM CTS1.STAFFb WHERE EMPNAME = CITY OR EMPNAME IS NULL ORDER BY PNUM
[31m- 0803 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: undefined function NULLIF;[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2$$anonfun$1.apply(hiveUDFs.scala:58)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2$$anonfun$1.apply(hiveUDFs.scala:58)[0m
[31m  	at scala.Option.getOrElse(Option.scala:120)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2.apply(hiveUDFs.scala:57)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2.apply(hiveUDFs.scala:53)[0m
[31m  	at scala.util.Try.getOrElse(Try.scala:77)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry.lookupFunction(hiveUDFs.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5$$anonfun$applyOrElse$23.apply(Analyzer.scala:490)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5$$anonfun$applyOrElse$23.apply(Analyzer.scala:490)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$.withPosition(package.scala:48)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5.applyOrElse(Analyzer.scala:489)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5.applyOrElse(Analyzer.scala:486)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:227)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:227)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:226)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionDown$1(QueryPlan.scala:76)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:86)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1$1.apply(QueryPlan.scala:90)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:90)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$1.apply(QueryPlan.scala:94)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDown(QueryPlan.scala:94)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressions(QueryPlan.scala:65)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10.applyOrElse(Analyzer.scala:486)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10.applyOrElse(Analyzer.scala:484)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$.apply(Analyzer.scala:484)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$.apply(Analyzer.scala:483)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:83)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:80)[0m
[31m  	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)[0m
[31m  	at scala.collection.immutable.List.foldLeft(List.scala:84)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:80)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:72)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:72)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed$lzycompute(TestHive.scala:195)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed(TestHive.scala:180)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['PNUM ASC], true[0m
[31m   'Project [unresolvedalias('SALARY),unresolvedalias('PNUM),unresolvedalias('HOURS),unresolvedalias('NULLIF('EMPNAME,'CITY))][0m
[31m    'Filter (('EMPNAME = 'CITY) || isnull('EMPNAME))[0m
[31m     'UnresolvedRelation [CTS1,STAFFB], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == HIVE - 2 row(s) ==[0m
[31m  15000	P6	20000	NULL[0m
[31m  10005	P8	30000	NULL (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT SUM(NULLIF(NULLIF(SALARY,10000),20000)) FROM STAFFb
[31m- 0804 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: undefined function NULLIF;[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2$$anonfun$1.apply(hiveUDFs.scala:58)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2$$anonfun$1.apply(hiveUDFs.scala:58)[0m
[31m  	at scala.Option.getOrElse(Option.scala:120)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2.apply(hiveUDFs.scala:57)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2.apply(hiveUDFs.scala:53)[0m
[31m  	at scala.util.Try.getOrElse(Try.scala:77)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry.lookupFunction(hiveUDFs.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5$$anonfun$applyOrElse$23.apply(Analyzer.scala:490)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5$$anonfun$applyOrElse$23.apply(Analyzer.scala:490)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$.withPosition(package.scala:48)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5.applyOrElse(Analyzer.scala:489)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5.applyOrElse(Analyzer.scala:486)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:227)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:227)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:226)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4$$anonfun$apply$7.apply(TreeNode.scala:268)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:266)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4$$anonfun$apply$7.apply(TreeNode.scala:268)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:266)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionDown$1(QueryPlan.scala:76)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:86)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1$1.apply(QueryPlan.scala:90)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:90)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$1.apply(QueryPlan.scala:94)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDown(QueryPlan.scala:94)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressions(QueryPlan.scala:65)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10.applyOrElse(Analyzer.scala:486)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10.applyOrElse(Analyzer.scala:484)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$.apply(Analyzer.scala:484)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$.apply(Analyzer.scala:483)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:83)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:80)[0m
[31m  	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)[0m
[31m  	at scala.collection.immutable.List.foldLeft(List.scala:84)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:80)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:72)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:72)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed$lzycompute(TestHive.scala:195)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed(TestHive.scala:180)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('SUM('NULLIF('NULLIF('SALARY,10000),20000)))][0m
[31m   'UnresolvedRelation [STAFFB], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == HIVE - 1 row(s) ==[0m
[31m  195016 (HiveComparisonTest.scala:366)[0m
SELECT NUM6 FROM   T4 WHERE  NUM6 = 2 AND STR110 <= 'Second character '--Comments here 'literal.'failed.
[32m- 0805[0m
SELECT NUM6 FROM   T4 WHERE  STR110 = 'Third character literal.'--Comments here 'second fragment' 'third fragment.'failed.
SELECT NUM6 FROM   T4 WHERE  STR110 = 'Third character literal.'--Comments here 'second fragment' 'third fragment.'failed.
SELECT NUM6 FROM   T4 WHERE  STR110 = 'Third character literal.'--Comments here 'second fragment' 'third fragment.'failed.
[31m- 0806 match for 0806:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('NUM6)][0m
[31m   'Filter ('STR110 = Third character literal.)[0m
[31m    'UnresolvedRelation [T4], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  NUM6: double[0m
[31m  Project [NUM6#40269][0m
[31m   Filter (STR110#40268 = Third character literal.)[0m
[31m    MetastoreRelation CTS1, t4, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [NUM6#40269][0m
[31m   Filter (STR110#40268 = Third character literal.)[0m
[31m    MetastoreRelation CTS1, t4, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [NUM6#40269][0m
[31m   Filter (STR110#40268 = Third character literal.)[0m
[31m    HiveTableScan [NUM6#40269,STR110#40268], (MetastoreRelation CTS1, t4, None)[0m
  
[31m  Code Generation: true[0m
[31m  NUM6[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !3                       3.0 (HiveComparisonTest.scala:433)[0m
SELECT COUNT(*) FROM   T4 WHERE  STR110 < 'An indifferent'--Comments ' charac' 'ter literal.'failed.
[32m- 0807[0m
SELECT COUNT(*) FROM   T4 WHERE  STR110 >= 'An indifferent'--Comments ' charac' 'ter literal.'failed.
[32m- 0808[0m
Calcite parsing passed, start to transform. SELECT STR110, COL4 FROM T4 WHERE NUM6 = 11
[32m- 0809[0m
Calcite parsing passed, start to transform. SELECT STR110 FROM T4 WHERE  NUM6 = 12
[32m- 0810[0m
Calcite parsing passed, start to transform. SELECT STR110 FROM   T4 WHERE  NUM6 = 13
[32m- 0811[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM   STAFF WHERE  'Alice' LIKE 'Alice'
[32m- 0812[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM   STAFF WHERE  'Equal_literal' NOT LIKE 'Eq_alS_literal%' ESCAPE 'S'
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM   STAFF WHERE  'Equal_literal' NOT LIKE 'Eq_alS_literal%' ESCAPE 'S'
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM   STAFF WHERE  'Equal_literal' NOT LIKE 'Eq_alS_literal%' ESCAPE 'S'
[31m- 0813 match for 0813:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(count(1))][0m
[31m   'Filter NOT Equal_literal LIKE Eq_alS_literal%[0m
[31m    'UnresolvedRelation [STAFF], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: bigint[0m
[31m  Aggregate [count(1) AS _c0#41316L][0m
[31m   Filter NOT Equal_literal LIKE Eq_alS_literal%[0m
[31m    MetastoreRelation CTS1, staff, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [count(1) AS _c0#41316L][0m
[31m   Project[0m
[31m    MetastoreRelation CTS1, staff, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(count(1),mode=Final,isDistinct=false)], output=[_c0#41316L])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(count(1),mode=Partial,isDistinct=false)], output=[currentCount#41319L])[0m
[31m     HiveTableScan (MetastoreRelation CTS1, staff, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !0                       5 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM   STAFF WHERE  EMPNAME LIKE EMPNAME
[32m- 0815[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM   STAFF WHERE  EMPNAME LIKE CITY ESCAPE 'S'
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM   STAFF WHERE  EMPNAME LIKE CITY ESCAPE 'S'
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM   STAFF WHERE  EMPNAME LIKE CITY ESCAPE 'S'
[31m- 0816 match for 0816:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(count(1))][0m
[31m   'Filter 'EMPNAME LIKE 'CITY[0m
[31m    'UnresolvedRelation [STAFF], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: bigint[0m
[31m  Aggregate [count(1) AS _c0#42096L][0m
[31m   Filter EMPNAME#42093 LIKE CITY#42095[0m
[31m    MetastoreRelation CTS1, staff, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [count(1) AS _c0#42096L][0m
[31m   Project[0m
[31m    Filter EMPNAME#42093 LIKE CITY#42095[0m
[31m     MetastoreRelation CTS1, staff, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(count(1),mode=Final,isDistinct=false)], output=[_c0#42096L])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(count(1),mode=Partial,isDistinct=false)], output=[currentCount#42099L])[0m
[31m     Project[0m
[31m      Filter EMPNAME#42093 LIKE CITY#42095[0m
[31m       HiveTableScan [EMPNAME#42093,CITY#42095], (MetastoreRelation CTS1, staff, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !1                       0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CTS1.STAFF
[32m- 0817[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CTS1.STAFF
[32m- 0818[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CTS1.STAFF
[32m- 0819[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CTS1.STAFF
[32m- 0820[0m
Calcite parsing passed, start to transform. SELECT EMPNAME FROM CTS1.STAFF
[32m- 0821[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CTS1.STAFF
[32m- 0822[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM  CTS2.PROJ_MAN
[32m- 0823[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM  CTS1.STAFF
[32m- 0824[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CTS1.STAFF
[32m- 0825[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM TEST6840C
[32m- 0826[0m
Calcite parsing passed, start to transform. SELECT NUM_C1,CH_C1,NUM_C2,CH_C2 FROM TEST6840C WHERE NUM_C1 = 1000
[32m- 0827[0m
Calcite parsing passed, start to transform. SELECT NUM_C1,CH_C1,NUM_C2,CH_C2 FROM TEST6840C WHERE NUM_C1 = 1001
[32m- 0828[0m
Calcite parsing passed, start to transform. SELECT NUM_C1,CH_C1,NUM_C2,CH_C2 FROM TEST6840C WHERE NUM_C1 = 1002
[32m- 0829[0m
Calcite parsing passed, start to transform. SELECT NUM_C1,CH_C1,NUM_C2,CH_C2 FROM TEST6840C WHERE NUM_C1 = 1003
[32m- 0830[0m
Calcite parsing passed, start to transform. SELECT NUM_C1,CH_C1,NUM_C2,CH_C2 FROM TEST6840C WHERE NUM_C1 = 1004
[32m- 0831[0m
Calcite parsing passed, start to transform. SELECT COL_1,COL_2 FROM CTS1.TABLE728b WHERE COL_1 = 'NICKOS' AND COL_2 = 'GEORGE'
[32m- 0832[0m
Calcite parsing passed, start to transform. SELECT COL_1,COL_2 FROM CTS1.TABLE728b WHERE COL_1 = 'HARRY' AND COL_2 = 'TANIA'
[32m- 0833[0m
Calcite parsing passed, start to transform. SELECT COLUMNOFCHARACTERSA, columnofcharactersb, cOlUmNoFNUMERICss_0, cOlUmNoFNUMERICss_1 FROM CTS1.TESTA6439
Calcite parsing passed, start to transform. SELECT COLUMNOFCHARACTERSA, columnofcharactersb, cOlUmNoFNUMERICss_0, cOlUmNoFNUMERICss_1 FROM CTS1.TESTA6439
Calcite parsing passed, start to transform. SELECT COLUMNOFCHARACTERSA, columnofcharactersb, cOlUmNoFNUMERICss_0, cOlUmNoFNUMERICss_1 FROM CTS1.TESTA6439
[31m- 0834 match for 0834:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('COLUMNOFCHARACTERSA),unresolvedalias('COLUMNOFCHARACTERSB),unresolvedalias('COLUMNOFNUMERICSS_0),unresolvedalias('COLUMNOFNUMERICSS_1)][0m
[31m   'UnresolvedRelation [CTS1,TESTA6439], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  COLUMNOFCHARACTERSA: string, COLUMNOFCHARACTERSB: string, COLUMNOFNUMERICSS_0: double, COLUMNOFNUMERICSS_1: double[0m
[31m  Project [COLUMNOFCHARACTERSA#45277,COLUMNOFCHARACTERSB#45278,COLUMNOFNUMERICSS_0#45279,COLUMNOFNUMERICSS_1#45280][0m
[31m   MetastoreRelation cts1, testa6439, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [COLUMNOFCHARACTERSA#45277,COLUMNOFCHARACTERSB#45278,COLUMNOFNUMERICSS_0#45279,COLUMNOFNUMERICSS_1#45280][0m
[31m   MetastoreRelation cts1, testa6439, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [COLUMNOFCHARACTERSA#45277,COLUMNOFCHARACTERSB#45278,COLUMNOFNUMERICSS_0#45279,COLUMNOFNUMERICSS_1#45280], (MetastoreRelation cts1, testa6439, None)[0m
  
[31m  Code Generation: true[0m
[31m  COLUMNOFCHARACTERSA	COLUMNOFCHARACTERSB	COLUMNOFNUMERICSS_0	COLUMNOFNUMERICSS_1[0m
[31m  !== HIVE - 14 row(s) ==   == CATALYST - 14 row(s) ==[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0[0m
[31m  !ABCD	DCBA	1	9999         ABCD	DCBA	1.0	9999.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT  COUNT(*) FROM TEST6740A NATURAL FULL OUTER JOIN TEST6740B
[32m- 0835[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM TEST6740A NATURAL FULL JOIN TEST6740B
[32m- 0836[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM TEST6740A NATURAL FULL OUTER JOIN TEST6740B
[32m- 0837[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM TEST6740B NATURAL FULL JOIN TEST6740A
[32m- 0838[0m
Calcite parsing passed, start to transform. SELECT * FROM TEST6840A FULL OUTER JOIN TEST6840B ON NUM_A = NUM_B ORDER BY NUM_A
Calcite parsing passed, start to transform. SELECT * FROM TEST6840A FULL OUTER JOIN TEST6840B ON NUM_A = NUM_B ORDER BY NUM_A
Calcite parsing passed, start to transform. SELECT * FROM TEST6840A FULL OUTER JOIN TEST6840B ON NUM_A = NUM_B ORDER BY NUM_A
[31m- 0839 match for 0839:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['NUM_A ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'Join FullOuter, Some(('NUM_A = 'NUM_B))[0m
[31m     'UnresolvedRelation [TEST6840A], None[0m
[31m     'UnresolvedRelation [TEST6840B], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  num_a: double, ch_a: string, num_b: double, ch_b: string[0m
[31m  Sort [NUM_A#45910 ASC], true[0m
[31m   Project [num_a#45910,ch_a#45911,num_b#45912,ch_b#45913][0m
[31m    Join FullOuter, Some((NUM_A#45910 = NUM_B#45912))[0m
[31m     MetastoreRelation CTS1, test6840a, None[0m
[31m     MetastoreRelation CTS1, test6840b, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [NUM_A#45910 ASC], true[0m
[31m   Project [num_a#45910,ch_a#45911,num_b#45912,ch_b#45913][0m
[31m    Join FullOuter, Some((NUM_A#45910 = NUM_B#45912))[0m
[31m     MetastoreRelation CTS1, test6840a, None[0m
[31m     MetastoreRelation CTS1, test6840b, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [NUM_A#45910 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(NUM_A#45910 ASC)[0m
[31m     ConvertToSafe[0m
[31m      TungstenProject [num_a#45910,ch_a#45911,num_b#45912,ch_b#45913][0m
[31m       ShuffledHashOuterJoin [NUM_A#45910], [NUM_B#45912], FullOuter, None[0m
[31m        ConvertToSafe[0m
[31m         TungstenExchange hashpartitioning(NUM_A#45910)[0m
[31m          ConvertToUnsafe[0m
[31m           HiveTableScan [num_a#45910,ch_a#45911], (MetastoreRelation CTS1, test6840a, None)[0m
[31m        ConvertToSafe[0m
[31m         TungstenExchange hashpartitioning(NUM_B#45912)[0m
[31m          ConvertToUnsafe[0m
[31m           HiveTableScan [num_b#45912,ch_b#45913], (MetastoreRelation CTS1, test6840b, None)[0m
  
[31m  Code Generation: true[0m
[31m  num_a	ch_a	num_b	ch_b[0m
[31m  !== HIVE - 3 row(s) ==   == CATALYST - 3 row(s) ==[0m
[31m  !NULL	NULL	3	A           NULL	NULL	3.0	A[0m
[31m  !1	A	NULL	NULL           1.0	A	NULL	NULL[0m
[31m  !2	B	2	C                 2.0	B	2.0	C (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT * FROM TEST6840A FULL JOIN TEST6840B ON CH_A = CH_B ORDER BY NUM_A
Calcite parsing passed, start to transform. SELECT * FROM TEST6840A FULL JOIN TEST6840B ON CH_A = CH_B ORDER BY NUM_A
Calcite parsing passed, start to transform. SELECT * FROM TEST6840A FULL JOIN TEST6840B ON CH_A = CH_B ORDER BY NUM_A
[31m- 0840 match for 0840:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['NUM_A ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'Join FullOuter, Some(('CH_A = 'CH_B))[0m
[31m     'UnresolvedRelation [TEST6840A], None[0m
[31m     'UnresolvedRelation [TEST6840B], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  num_a: double, ch_a: string, num_b: double, ch_b: string[0m
[31m  Sort [NUM_A#46127 ASC], true[0m
[31m   Project [num_a#46127,ch_a#46128,num_b#46129,ch_b#46130][0m
[31m    Join FullOuter, Some((CH_A#46128 = CH_B#46130))[0m
[31m     MetastoreRelation CTS1, test6840a, None[0m
[31m     MetastoreRelation CTS1, test6840b, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [NUM_A#46127 ASC], true[0m
[31m   Project [num_a#46127,ch_a#46128,num_b#46129,ch_b#46130][0m
[31m    Join FullOuter, Some((CH_A#46128 = CH_B#46130))[0m
[31m     MetastoreRelation CTS1, test6840a, None[0m
[31m     MetastoreRelation CTS1, test6840b, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [NUM_A#46127 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(NUM_A#46127 ASC)[0m
[31m     ConvertToSafe[0m
[31m      TungstenProject [num_a#46127,ch_a#46128,num_b#46129,ch_b#46130][0m
[31m       ShuffledHashOuterJoin [CH_A#46128], [CH_B#46130], FullOuter, None[0m
[31m        ConvertToSafe[0m
[31m         TungstenExchange hashpartitioning(CH_A#46128)[0m
[31m          ConvertToUnsafe[0m
[31m           HiveTableScan [num_a#46127,ch_a#46128], (MetastoreRelation CTS1, test6840a, None)[0m
[31m        ConvertToSafe[0m
[31m         TungstenExchange hashpartitioning(CH_B#46130)[0m
[31m          ConvertToUnsafe[0m
[31m           HiveTableScan [num_b#46129,ch_b#46130], (MetastoreRelation CTS1, test6840b, None)[0m
  
[31m  Code Generation: true[0m
[31m  num_a	ch_a	num_b	ch_b[0m
[31m  !== HIVE - 3 row(s) ==   == CATALYST - 3 row(s) ==[0m
[31m  !NULL	NULL	2	C           NULL	NULL	2.0	C[0m
[31m  !1	A	3	A                 1.0	A	3.0	A[0m
[31m  !2	B	NULL	NULL           2.0	B	NULL	NULL (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT  COUNT(*) FROM TEST6840C
[32m- 0841[0m
Calcite parsing passed, start to transform. SELECT  COUNT(*) FROM TEST6840C WHERE NUM_C1 = 1 AND CH_C1 = 'A' AND NUM_C2 IS NULL AND CH_C2 IS NULL
[32m- 0842[0m
Calcite parsing passed, start to transform. SELECT  COUNT(*) FROM TEST6840C WHERE NUM_C1 = 2 AND CH_C1 = 'B' AND NUM_C2 = 2 AND CH_C2 = 'C'
[32m- 0843[0m
Calcite parsing passed, start to transform. SELECT  COUNT(*) FROM TEST6840C WHERE NUM_C1 = 2 AND CH_C1 = 'B' AND NUM_C2 = 3  AND CH_C2 = 'A'
[32m- 0844[0m
NoViableAltException(26@[150:5: ( ( Identifier LPAREN )=> partitionedTableFunction | tableSource | subQuerySource | virtualTableSource )])
	at org.antlr.runtime.DFA.noViableAlt(DFA.java:158)
	at org.antlr.runtime.DFA.predict(DFA.java:144)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.fromSource(HiveParser_FromClauseParser.java:3711)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.joinSource(HiveParser_FromClauseParser.java:1873)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.fromClause(HiveParser_FromClauseParser.java:1518)
	at org.apache.hadoop.hive.ql.parse.HiveParser.fromClause(HiveParser.java:45861)
	at org.apache.hadoop.hive.ql.parse.HiveParser.selectStatement(HiveParser.java:41516)
	at org.apache.hadoop.hive.ql.parse.HiveParser.regularBody(HiveParser.java:41402)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpressionBody(HiveParser.java:40413)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpression(HiveParser.java:40283)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1590)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.spark.sql.hive.HiveQl$.getAst(HiveQl.scala:258)
	at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:283)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.hive.HiveQl$.parseSql(HiveQl.scala:276)
	at org.apache.spark.sql.hive.HiveQLDialect.parse(HiveContext.scala:62)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.getLogicalPlan(CalciteDialect.scala:54)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.execution.datasources.DDLParser.parse(DDLParser.scala:42)
	at org.apache.spark.sql.SQLContext.parseSql(SQLContext.scala:189)
	at org.apache.spark.sql.hive.HiveContext.parseSql(HiveContext.scala:280)
	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.<init>(TestHive.scala:179)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:34)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
	at scala.collection.AbstractTraversable.map(Traversable.scala:105)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 0845 *** FAILED ***[0m
[31m  org.apache.spark.sql.AnalysisException: cannot recognize input near '(' 'TEST6840B' 'FULL' in from source; line 1 pos 15[0m
[31m  at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:296)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM TAB734 WHERE CSTR1 = CSTR2
[32m- 0846[0m
Calcite parsing passed, start to transform. SELECT COUNT(CSTR1) FROM TAB734 WHERE CSTR1 <> N' * '
[32m- 0847[0m
Calcite parsing passed, start to transform. SELECT COUNT(CSTR2) FROM TAB734 WHERE N'++++' <> CSTR2
[32m- 0848[0m
Calcite parsing passed, start to transform. SELECT C1,C2 FROM CTS1.TAB735 ORDER BY C1
Calcite parsing passed, start to transform. SELECT C1,C2 FROM CTS1.TAB735 ORDER BY C1
Calcite parsing passed, start to transform. SELECT C1,C2 FROM CTS1.TAB735 ORDER BY C1
[31m- 0849 match for 0849:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['C1 ASC], true[0m
[31m   'Project [unresolvedalias('C1),unresolvedalias('C2)][0m
[31m    'UnresolvedRelation [CTS1,TAB735], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double, C2: string[0m
[31m  Sort [C1#47032 ASC], true[0m
[31m   Project [C1#47032,C2#47033][0m
[31m    MetastoreRelation cts1, tab735, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [C1#47032 ASC], true[0m
[31m   Project [C1#47032,C2#47033][0m
[31m    MetastoreRelation cts1, tab735, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [C1#47032 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(C1#47032 ASC)[0m
[31m     HiveTableScan [C1#47032,C2#47033], (MetastoreRelation cts1, tab735, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1	C2[0m
[31m  !== HIVE - 3 row(s) ==   == CATALYST - 3 row(s) ==[0m
[31m  !1	NULL                  1.0	NULL[0m
[31m  !2	!                     2.0	![0m
[31m  !3	!                     3.0	! (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(ALL 115.5), COUNT(ALL 'ATHINA'), COUNT(ALL 255), COUNT(*) FROM CL_DATA_TYPE
[32m- 0850[0m
Calcite parsing passed, start to transform. SELECT COUNT(*),COUNT(ALL 119), COUNT(ALL 'GIORGOS') , COUNT(CL_CHAR), COUNT(CL_REAL) FROM CL_DATA_TYPE
[32m- 0851[0m
Calcite parsing passed, start to transform. SELECT COUNT(*), COUNT(ALL 1000), COUNT(ALL 'STEFOS'), COUNT(CL_CHAR), COUNT(CL_REAL) FROM CL_DATA_TYPE
[32m- 0852[0m
Calcite parsing passed, start to transform. SELECT MAX(AVSAL) FROM V000V
Calcite parsing passed, start to transform. SELECT MAX(AVSAL) FROM V000V
Calcite parsing passed, start to transform. SELECT MAX(AVSAL) FROM V000V
[31m- 0853 match for 0853:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('MAX('AVSAL))][0m
[31m   'UnresolvedRelation [V000V], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double[0m
[31m  Aggregate [max(AVSAL#47544) AS _c0#47545][0m
[31m   MetastoreRelation CTS1, v000v, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [max(AVSAL#47544) AS _c0#47545][0m
[31m   Project [AVSAL#47544][0m
[31m    MetastoreRelation CTS1, v000v, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(max(AVSAL#47544),mode=Final,isDistinct=false)], output=[_c0#47545])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(max(AVSAL#47544),mode=Partial,isDistinct=false)], output=[max#47548])[0m
[31m     HiveTableScan [AVSAL#47544], (MetastoreRelation CTS1, v000v, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !78000                   78000.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT EMPNAME, NULLIF (SALARY,HOURS) FROM CTS1.STAFFb WHERE SEX = 'M' AND PNUM NOT IN ('P1','P2','P3','P6','P8') AND (SALARY <> HOURS OR SALARY IS NULL OR HOURS IS NULL) ORDER BY PNUM
[31m- 0854 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: undefined function NULLIF;[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2$$anonfun$1.apply(hiveUDFs.scala:58)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2$$anonfun$1.apply(hiveUDFs.scala:58)[0m
[31m  	at scala.Option.getOrElse(Option.scala:120)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2.apply(hiveUDFs.scala:57)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2.apply(hiveUDFs.scala:53)[0m
[31m  	at scala.util.Try.getOrElse(Try.scala:77)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry.lookupFunction(hiveUDFs.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5$$anonfun$applyOrElse$23.apply(Analyzer.scala:490)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5$$anonfun$applyOrElse$23.apply(Analyzer.scala:490)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$.withPosition(package.scala:48)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5.applyOrElse(Analyzer.scala:489)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5.applyOrElse(Analyzer.scala:486)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:227)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:227)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:226)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionDown$1(QueryPlan.scala:76)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:86)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1$1.apply(QueryPlan.scala:90)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:90)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$1.apply(QueryPlan.scala:94)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDown(QueryPlan.scala:94)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressions(QueryPlan.scala:65)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10.applyOrElse(Analyzer.scala:486)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10.applyOrElse(Analyzer.scala:484)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$.apply(Analyzer.scala:484)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$.apply(Analyzer.scala:483)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:83)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:80)[0m
[31m  	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)[0m
[31m  	at scala.collection.immutable.List.foldLeft(List.scala:84)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:80)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:72)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:72)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed$lzycompute(TestHive.scala:195)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed(TestHive.scala:180)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['PNUM ASC], true[0m
[31m   'Project [unresolvedalias('EMPNAME),unresolvedalias('NULLIF('SALARY,'HOURS))][0m
[31m    'Filter ((('SEX = M) && NOT 'PNUM IN (P1,P2,P3,P6,P8)) && ((NOT ('SALARY = 'HOURS) || isnull('SALARY)) || isnull('HOURS)))[0m
[31m     'UnresolvedRelation [CTS1,STAFFB], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == HIVE - 6 row(s) ==[0m
[31m  Nickos	NULL[0m
[31m  Nickos	NULL[0m
[31m  George	10010[0m
[31m  George	10010[0m
[31m  Gregory	10001[0m
[31m  Gregory	10001 (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT NULLIF (EMPNAME,CITY), SALARY FROM CTS1.STAFFb WHERE SEX = 'M' AND PNUM NOT IN ('P1','P2','P3','P5','P7') AND (EMPNAME <> CITY OR EMPNAME IS NULL OR CITY IS NULL) ORDER BY PNUM
[31m- 0855 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: undefined function NULLIF;[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2$$anonfun$1.apply(hiveUDFs.scala:58)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2$$anonfun$1.apply(hiveUDFs.scala:58)[0m
[31m  	at scala.Option.getOrElse(Option.scala:120)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2.apply(hiveUDFs.scala:57)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry$$anonfun$lookupFunction$2.apply(hiveUDFs.scala:53)[0m
[31m  	at scala.util.Try.getOrElse(Try.scala:77)[0m
[31m  	at org.apache.spark.sql.hive.HiveFunctionRegistry.lookupFunction(hiveUDFs.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5$$anonfun$applyOrElse$23.apply(Analyzer.scala:490)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5$$anonfun$applyOrElse$23.apply(Analyzer.scala:490)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$.withPosition(package.scala:48)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5.applyOrElse(Analyzer.scala:489)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10$$anonfun$applyOrElse$5.applyOrElse(Analyzer.scala:486)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:227)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:227)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:226)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformDown$1.apply(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:232)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionDown$1(QueryPlan.scala:76)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:86)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1$1.apply(QueryPlan.scala:90)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:90)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$1.apply(QueryPlan.scala:94)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDown(QueryPlan.scala:94)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressions(QueryPlan.scala:65)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10.applyOrElse(Analyzer.scala:486)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$$anonfun$apply$10.applyOrElse(Analyzer.scala:484)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:54)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$.apply(Analyzer.scala:484)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveFunctions$.apply(Analyzer.scala:483)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:83)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:80)[0m
[31m  	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)[0m
[31m  	at scala.collection.immutable.List.foldLeft(List.scala:84)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:80)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:72)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:72)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed$lzycompute(TestHive.scala:195)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed(TestHive.scala:180)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['PNUM ASC], true[0m
[31m   'Project [unresolvedalias('NULLIF('EMPNAME,'CITY)),unresolvedalias('SALARY)][0m
[31m    'Filter ((('SEX = M) && NOT 'PNUM IN (P1,P2,P3,P5,P7)) && ((NOT ('EMPNAME = 'CITY) || isnull('EMPNAME)) || isnull('CITY)))[0m
[31m     'UnresolvedRelation [CTS1,STAFFB], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: undefined function NULLIF;[0m
[31m  == HIVE - 6 row(s) ==[0m
[31m  Kilroy	10000[0m
[31m  Kilroy	10000[0m
[31m  NULL	10005[0m
[31m  NULL	10005[0m
[31m  Gregory	10001[0m
[31m  Gregory	10001 (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT * FROM CTS1.TEMP1426 ORDER BY EMPNAME
Calcite parsing passed, start to transform. SELECT * FROM CTS1.TEMP1426 ORDER BY EMPNAME
Calcite parsing passed, start to transform. SELECT * FROM CTS1.TEMP1426 ORDER BY EMPNAME
[31m- 0856 match for 0856:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNAME ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'UnresolvedRelation [CTS1,TEMP1426], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  salary: double, empname: string[0m
[31m  Sort [EMPNAME#47982 ASC], true[0m
[31m   Project [salary#47981,empname#47982][0m
[31m    MetastoreRelation cts1, temp1426, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [EMPNAME#47982 ASC], true[0m
[31m   MetastoreRelation cts1, temp1426, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [EMPNAME#47982 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(EMPNAME#47982 ASC)[0m
[31m     HiveTableScan [salary#47981,empname#47982], (MetastoreRelation cts1, temp1426, None)[0m
  
[31m  Code Generation: true[0m
[31m  salary	empname[0m
[31m  !== HIVE - 126 row(s) ==   == CATALYST - 126 row(s) ==[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m  !10000	George              10000.0	George[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m   NULL	Kilroy               NULL	Kilroy[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos[0m
[31m  !10000	Nickos              10000.0	Nickos (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, COALESCE(SALARY,GRADE,HOURS), COALESCE(EMPNAME,LOC,DEPTNO) FROM CTS1.CL_EMPLOYEE ORDER BY EMPNUM
Calcite parsing passed, start to transform. SELECT EMPNUM, COALESCE(SALARY,GRADE,HOURS), COALESCE(EMPNAME,LOC,DEPTNO) FROM CTS1.CL_EMPLOYEE ORDER BY EMPNUM
Calcite parsing passed, start to transform. SELECT EMPNUM, COALESCE(SALARY,GRADE,HOURS), COALESCE(EMPNAME,LOC,DEPTNO) FROM CTS1.CL_EMPLOYEE ORDER BY EMPNUM
[31m- 0857 match for 0857:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNUM ASC], true[0m
[31m   'Project [unresolvedalias('EMPNUM),unresolvedalias('COALESCE('SALARY,'GRADE,'HOURS)),unresolvedalias('COALESCE('EMPNAME,'LOC,'DEPTNO))][0m
[31m    'UnresolvedRelation [CTS1,CL_EMPLOYEE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  EMPNUM: double, _c1: double, _c2: string[0m
[31m  Sort [EMPNUM#48162 ASC], true[0m
[31m   Project [EMPNUM#48162,coalesce(SALARY#48166,GRADE#48167,HOURS#48168) AS _c1#48169,coalesce(EMPNAME#48165,LOC#48164,DEPTNO#48163) AS _c2#48170][0m
[31m    MetastoreRelation cts1, cl_employee, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [EMPNUM#48162 ASC], true[0m
[31m   Project [EMPNUM#48162,coalesce(SALARY#48166,GRADE#48167,HOURS#48168) AS _c1#48169,coalesce(EMPNAME#48165,LOC#48164,DEPTNO#48163) AS _c2#48170][0m
[31m    MetastoreRelation cts1, cl_employee, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [EMPNUM#48162 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(EMPNUM#48162 ASC)[0m
[31m     Project [EMPNUM#48162,coalesce(SALARY#48166,GRADE#48167,HOURS#48168) AS _c1#48169,coalesce(EMPNAME#48165,LOC#48164,DEPTNO#48163) AS _c2#48170][0m
[31m      HiveTableScan [EMPNAME#48165,LOC#48164,DEPTNO#48163,HOURS#48168,SALARY#48166,GRADE#48167,EMPNUM#48162], (MetastoreRelation cts1, cl_employee, None)[0m
  
[31m  Code Generation: true[0m
[31m  EMPNUM	_c1	_c2[0m
[31m  !== HIVE - 5 row(s) ==   == CATALYST - 5 row(s) ==[0m
[31m  !5000	NULL	NULL          5000.0	NULL	NULL[0m
[31m  !6000	4	JIM              6000.0	4.0	JIM[0m
[31m  !7000	150	P2             7000.0	150.0	P2[0m
[31m  !8000	30000	HALKIDA      8000.0	30000.0	HALKIDA[0m
[31m  !9000	15000	ANDREWS      9000.0	15000.0	ANDREWS (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, COALESCE('NICKOS',DEPTNO,LOC), COALESCE(SALARY,GRADE,47000) FROM CL_EMPLOYEE WHERE EMPNUM = 7000
Calcite parsing passed, start to transform. SELECT EMPNUM, COALESCE('NICKOS',DEPTNO,LOC), COALESCE(SALARY,GRADE,47000) FROM CL_EMPLOYEE WHERE EMPNUM = 7000
Calcite parsing passed, start to transform. SELECT EMPNUM, COALESCE('NICKOS',DEPTNO,LOC), COALESCE(SALARY,GRADE,47000) FROM CL_EMPLOYEE WHERE EMPNUM = 7000
[31m- 0858 match for 0858:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('EMPNUM),unresolvedalias('COALESCE(NICKOS,'DEPTNO,'LOC)),unresolvedalias('COALESCE('SALARY,'GRADE,47000))][0m
[31m   'Filter ('EMPNUM = 7000)[0m
[31m    'UnresolvedRelation [CL_EMPLOYEE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  EMPNUM: double, _c1: string, _c2: double[0m
[31m  Project [EMPNUM#48364,coalesce(NICKOS,DEPTNO#48365,LOC#48366) AS _c1#48371,coalesce(cast(SALARY#48368 as double),cast(GRADE#48369 as double),cast(47000 as double)) AS _c2#48372][0m
[31m   Filter (EMPNUM#48364 = cast(7000 as double))[0m
[31m    MetastoreRelation CTS1, cl_employee, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [EMPNUM#48364,coalesce(NICKOS,DEPTNO#48365,LOC#48366) AS _c1#48371,coalesce(SALARY#48368,GRADE#48369,47000.0) AS _c2#48372][0m
[31m   Filter (EMPNUM#48364 = 7000.0)[0m
[31m    MetastoreRelation CTS1, cl_employee, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [EMPNUM#48364,coalesce(NICKOS,DEPTNO#48365,LOC#48366) AS _c1#48371,coalesce(SALARY#48368,GRADE#48369,47000.0) AS _c2#48372][0m
[31m   Filter (EMPNUM#48364 = 7000.0)[0m
[31m    HiveTableScan [LOC#48366,DEPTNO#48365,SALARY#48368,GRADE#48369,EMPNUM#48364], (MetastoreRelation CTS1, cl_employee, None)[0m
  
[31m  Code Generation: true[0m
[31m  EMPNUM	_c1	_c2[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !7000	NICKOS	47000       7000.0	NICKOS	47000.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM CTS1.STAFFc WHERE GRADE IS NULL
[32m- 0859[0m
Calcite parsing passed, start to transform. SELECT GRADE FROM CTS1.STAFFc WHERE EMPNUM = 'E3'
Calcite parsing passed, start to transform. SELECT GRADE FROM CTS1.STAFFc WHERE EMPNUM = 'E3'
Calcite parsing passed, start to transform. SELECT GRADE FROM CTS1.STAFFc WHERE EMPNUM = 'E3'
[31m- 0860 match for 0860:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('GRADE)][0m
[31m   'Filter ('EMPNUM = E3)[0m
[31m    'UnresolvedRelation [CTS1,STAFFC], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  GRADE: double[0m
[31m  Project [GRADE#48663][0m
[31m   Filter (EMPNUM#48661 = E3)[0m
[31m    MetastoreRelation cts1, staffc, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [GRADE#48663][0m
[31m   Filter (EMPNUM#48661 = E3)[0m
[31m    MetastoreRelation cts1, staffc, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [GRADE#48663][0m
[31m   Filter (EMPNUM#48661 = E3)[0m
[31m    HiveTableScan [GRADE#48663,EMPNUM#48661], (MetastoreRelation cts1, staffc, None)[0m
  
[31m  Code Generation: true[0m
[31m  GRADE[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !23                      23.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM CTS1.STAFFc WHERE MGR = 'E8'
[32m- 0861[0m
Calcite parsing passed, start to transform. SELECT MGR FROM CTS1.STAFFc WHERE EMPNUM = 'E6'
[32m- 0862[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFFd WHERE GRADE = 22
[32m- 0863[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFFd WHERE GRADE = 23
[32m- 0864[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFFd WHERE GRADE = 24
[32m- 0865[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFFd WHERE GRADE IS NULL
[32m- 0866[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFFd WHERE MGR = 'E7'
[32m- 0867[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFFd WHERE MGR = 'E6'
[32m- 0868[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFFd WHERE MGR = 'E4'
[32m- 0869[0m
Calcite parsing passed, start to transform. SELECT COUNT (DISTINCT COL1) FROM CTS1.ET
[32m- 0871[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM CTS1.ET
[32m- 0872[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM CTS1.ET
[32m- 0873[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM CTS1.ET
[32m- 0874[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFF_CTS2
[32m- 0875[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM STAFF_CTS
[32m- 0876[0m
Calcite parsing passed, start to transform. SELECT col2, col3, col4 FROM CTS1.ET ORDER BY col3, col4
[32m- 0877[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM CTS1.STAFFb
[32m- 0878[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM CTS1.STAFFa
[32m- 0879[0m
Calcite parsing passed, start to transform. SELECT COUNT (*), col5, col6 FROM CTS1.ET GROUP BY col6, col5 ORDER BY 2,3
[32m- 0880[0m
Calcite parsing passed, start to transform. SELECT EMPNAME FROM STAFF WHERE (SELECT EMPNUM FROM WORKS WHERE PNUM = 'P3') = EMPNUM
zcerror[31m- 0881 *** ; SELECT EMPNAME FROM STAFF WHERE (SELECT EMPNUM FROM WORKS WHERE PNUM = 'P3') = EMPNUM ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT B FROM CTS1.TV WHERE A = 1
[32m- 0882[0m
Calcite parsing passed, start to transform. SELECT B FROM CTS1.TV WHERE A = 2
[32m- 0883[0m
Calcite parsing passed, start to transform. SELECT B FROM CTS1.TV WHERE A = 3
[32m- 0884[0m
Calcite parsing passed, start to transform. SELECT B FROM CTS1.TV WHERE A = 4
[32m- 0885[0m
Calcite parsing passed, start to transform. SELECT B FROM CTS1.TV WHERE A = 5
[32m- 0886[0m
Calcite parsing passed, start to transform. SELECT DISTINCT A, (SELECT D FROM TW WHERE E = X.A) FROM TV X, TW Y WHERE A = 1
zcerror[31m- 0887 *** ; SELECT DISTINCT A, (SELECT D FROM TW WHERE E = X.A) FROM TV X, TW Y WHERE A = 1 ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT DISTINCT A, (SELECT D FROM TW WHERE E = X.A) FROM TV X, TW Y WHERE A = 3
zcerror[31m- 0888 *** ; SELECT DISTINCT A, (SELECT D FROM TW WHERE E = X.A) FROM TV X, TW Y WHERE A = 3 ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT TTA, TTB, TTC FROM CTS1.TT WHERE (SELECT TUD FROM TU WHERE TU.TUE = TT.TTA) IS NULL ORDER BY TTA DESC
zcerror[31m- 0889 *** ; SELECT TTA, TTB, TTC FROM CTS1.TT WHERE (SELECT TUD FROM TU WHERE TU.TUE = TT.TTA) IS NULL ORDER BY TTA DESC ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT TTA, TTB, TTC FROM CTS1.TT WHERE (SELECT TUD FROM TU WHERE TU.TUE = TT.TTA) IS NOT NULL ORDER BY TTA
zcerror[31m- 0890 *** ; SELECT TTA, TTB, TTC FROM CTS1.TT WHERE (SELECT TUD FROM TU WHERE TU.TUE = TT.TTA) IS NOT NULL ORDER BY TTA ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM CTS1.TT WHERE TTB IS NULL OR TTC IS NULL
[32m- 0891[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM CTS1.TT WHERE TTB IS NOT NULL AND TTC IS NOT NULL
[32m- 0892[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM CTS1.TT WHERE NOT (TTB IS NULL AND TTC IS NULL)
[32m- 0893[0m
Calcite parsing passed, start to transform. SELECT * FROM STAFF1 NATURAL FULL OUTER JOIN STAFFA ORDER BY EMPNUM, EMPNAME, GRADE, PNUM
[31m- 0894 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#51820, EMPNUM#51826.;[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#51820, EMPNUM#51826.;[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve(LogicalPlan.scala:278)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve(LogicalPlan.scala:172)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$$anonfun$org$apache$spark$sql$catalyst$analysis$Analyzer$$resolveSortOrders$1$$anonfun$4.applyOrElse(Analyzer.scala:422)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$$anonfun$org$apache$spark$sql$catalyst$analysis$Analyzer$$resolveSortOrders$1$$anonfun$4.applyOrElse(Analyzer.scala:420)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$$anonfun$org$apache$spark$sql$catalyst$analysis$Analyzer$$resolveSortOrders$1.apply(Analyzer.scala:420)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$$anonfun$org$apache$spark$sql$catalyst$analysis$Analyzer$$resolveSortOrders$1.apply(Analyzer.scala:414)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32)[0m
[31m  	at scala.collection.mutable.ListBuffer.foreach(ListBuffer.scala:45)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$resolveSortOrders(Analyzer.scala:414)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveSortReferences$.resolveAndFindMissing(Analyzer.scala:466)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveSortReferences$$anonfun$apply$9.applyOrElse(Analyzer.scala:443)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveSortReferences$$anonfun$apply$9.applyOrElse(Analyzer.scala:440)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveSortReferences$.apply(Analyzer.scala:440)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveSortReferences$.apply(Analyzer.scala:439)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:83)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:80)[0m
[31m  	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)[0m
[31m  	at scala.collection.immutable.List.foldLeft(List.scala:84)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:80)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:72)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:72)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed$lzycompute(TestHive.scala:195)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.analyzed(TestHive.scala:180)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNUM ASC,'EMPNAME ASC,'GRADE ASC,'PNUM ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'Join FullOuter, None[0m
[31m     'UnresolvedRelation [STAFF1], None[0m
[31m     'UnresolvedRelation [STAFFA], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#51829, EMPNUM#51835.;[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#51838, EMPNUM#51844.;[0m
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#51847, EMPNUM#51853.;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#51856, EMPNUM#51862.;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: Reference 'EMPNUM' is ambiguous, could be: EMPNUM#51865, EMPNUM#51871.;[0m
[31m  == HIVE - 12 row(s) ==[0m
[31m  E1	Alice	4	Lyon	20	40000	11[0m
[31m  E1	Alice	8	Lyon	20	40000	11[0m
[31m  E1	Alice	12	Geneva	20	40000	11[0m
[31m  E2	Betty	16	Strasbourg	15	20000	12[0m
[31m  E2	Betty	16	Strasbourg	15	20000	13[0m
[31m  E2	Betty	20	Munich	15	20000	12[0m
[31m  E2	Betty	20	Munich	15	20000	13[0m
[31m  E3	Colin	24	Leuven	10	15000	14[0m
[31m  E3	Colin	24	Leuven	10	8000	15[0m
[31m  E3	Colin	24	Leuven	10	8000	16[0m
[31m  E4	Daniel	28	Cologne	NULL	NULL	NULL[0m
[31m  E5	Edward	NULL	NULL	30	50000	17 (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT COUNT (DISTINCT COL5) FROM CTS1.ET
[32m- 0895[0m
NoViableAltException(26@[])
	at org.apache.hadoop.hive.ql.parse.HiveParser.type(HiveParser.java:38610)
	at org.apache.hadoop.hive.ql.parse.HiveParser.colType(HiveParser.java:38367)
	at org.apache.hadoop.hive.ql.parse.HiveParser.columnNameType(HiveParser.java:38051)
	at org.apache.hadoop.hive.ql.parse.HiveParser.columnNameTypeList(HiveParser.java:36203)
	at org.apache.hadoop.hive.ql.parse.HiveParser.createTableStatement(HiveParser.java:5214)
	at org.apache.hadoop.hive.ql.parse.HiveParser.ddlStatement(HiveParser.java:2640)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1650)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.spark.sql.hive.HiveQl$.getAst(HiveQl.scala:258)
	at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:283)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)
	at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.hive.HiveQl$.parseSql(HiveQl.scala:276)
	at org.apache.spark.sql.hive.HiveQLDialect.parse(HiveContext.scala:62)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.getLogicalPlan(CalciteDialect.scala:54)
	at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)
	at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)
	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Failure.append(Parsers.scala:202)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1.apply(Parsers.scala:254)
	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$apply$14.apply(Parsers.scala:891)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.util.parsing.combinator.Parsers$$anon$2.apply(Parsers.scala:890)
	at scala.util.parsing.combinator.PackratParsers$$anon$1.apply(PackratParsers.scala:110)
	at org.apache.spark.sql.catalyst.AbstractSparkSQLParser.parse(AbstractSparkSQLParser.scala:34)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.SQLContext$$anonfun$2.apply(SQLContext.scala:166)
	at org.apache.spark.sql.execution.datasources.DDLParser.parse(DDLParser.scala:42)
	at org.apache.spark.sql.SQLContext.parseSql(SQLContext.scala:189)
	at org.apache.spark.sql.hive.HiveContext.parseSql(HiveContext.scala:280)
	at org.apache.spark.sql.hive.test.TestHiveContext$QueryExecution.<init>(TestHive.scala:179)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$30.apply(HiveComparisonTest.scala:303)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:34)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
	at scala.collection.AbstractTraversable.map(Traversable.scala:105)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:303)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 0896 *** FAILED ***[0m
[31m  org.apache.spark.sql.AnalysisException: cannot recognize input near 'NCHAR' ')' 'ROW' in column type; line 1 pos 33[0m
[31m  at org.apache.spark.sql.hive.HiveQl$.createPlan(HiveQl.scala:296)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:41)[0m
[31m  at org.apache.spark.sql.hive.ExtendedHiveQlParser$$anonfun$hiveQl$1.apply(ExtendedHiveQlParser.scala:40)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:135)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:242)[0m
[31m  at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:222)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  at scala.util.parsing.combinator.Parsers$Parser$$anonfun$append$1$$anonfun$apply$2.apply(Parsers.scala:254)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT VT1, VT2, VT3 FROM V_DATA_TYPE WHERE NOT VT1 = 0 ORDER BY VT2, VT3
[31m- 0897 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: cannot resolve 'NOT VT1' due to data type mismatch: argument 1 requires boolean type, however, 'VT1' is of double type.;[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'NOT VT1' due to data type mismatch: argument 1 requires boolean type, however, 'VT1' is of double type.;[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:61)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:108)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:118)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:126)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:126)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:103)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:44)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['VT2 ASC,'VT3 ASC], true[0m
[31m   'Project [unresolvedalias('VT1),unresolvedalias('VT2),unresolvedalias('VT3)][0m
[31m    'Filter (NOT 'VT1 = 0)[0m
[31m     'UnresolvedRelation [V_DATA_TYPE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.catalyst.analysis.UnresolvedException: Invalid call to toAttribute on unresolved object, tree: unresolvedalias('VT1)[0m
[31m  'Sort ['VT2 ASC,'VT3 ASC], true[0m
[31m   'Project [unresolvedalias('VT1),unresolvedalias('VT2),unresolvedalias('VT3)][0m
[31m    'Filter (NOT VT1#52126 = 0)[0m
[31m     MetastoreRelation CTS1, v_data_type, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'NOT VT1' due to data type mismatch: argument 1 requires boolean type, however, 'VT1' is of double type.;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'NOT VT1' due to data type mismatch: argument 1 requires boolean type, however, 'VT1' is of double type.;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: cannot resolve 'NOT VT1' due to data type mismatch: argument 1 requires boolean type, however, 'VT1' is of double type.;[0m
[31m  == HIVE - 3 row(s) ==[0m
[31m  56	2	3[0m
[31m  70	4	3[0m
[31m  42	4	5 (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT VT1, VT2, VT3 FROM V_DATA_TYPE WHERE VT2 = 1
Calcite parsing passed, start to transform. SELECT VT1, VT2, VT3 FROM V_DATA_TYPE WHERE VT2 = 1
Calcite parsing passed, start to transform. SELECT VT1, VT2, VT3 FROM V_DATA_TYPE WHERE VT2 = 1
[31m- 0898 match for 0898:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('VT1),unresolvedalias('VT2),unresolvedalias('VT3)][0m
[31m   'Filter ('VT2 = 1)[0m
[31m    'UnresolvedRelation [V_DATA_TYPE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  VT1: double, VT2: double, VT3: double[0m
[31m  Project [VT1#52214,VT2#52215,VT3#52216][0m
[31m   Filter (VT2#52215 = cast(1 as double))[0m
[31m    MetastoreRelation CTS1, v_data_type, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [VT1#52214,VT2#52215,VT3#52216][0m
[31m   Filter (VT2#52215 = 1.0)[0m
[31m    MetastoreRelation CTS1, v_data_type, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (VT2#52215 = 1.0)[0m
[31m   HiveTableScan [VT1#52214,VT2#52215,VT3#52216], (MetastoreRelation CTS1, v_data_type, None)[0m
  
[31m  Code Generation: true[0m
[31m  VT1	VT2	VT3[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !NULL	1	1                NULL	1.0	1.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT SUM(NUM) FROM DATA_TYPE WHERE NUM IS NOT NULL
Calcite parsing passed, start to transform. SELECT SUM(NUM) FROM DATA_TYPE WHERE NUM IS NOT NULL
Calcite parsing passed, start to transform. SELECT SUM(NUM) FROM DATA_TYPE WHERE NUM IS NOT NULL
[31m- 0899 match for 0899:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('SUM('NUM))][0m
[31m   'Filter isnotnull('NUM)[0m
[31m    'UnresolvedRelation [DATA_TYPE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double[0m
[31m  Aggregate [sum(NUM#52426) AS _c0#52433][0m
[31m   Filter isnotnull(NUM#52426)[0m
[31m    MetastoreRelation CTS1, data_type, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [sum(NUM#52426) AS _c0#52433][0m
[31m   Project [NUM#52426][0m
[31m    Filter isnotnull(NUM#52426)[0m
[31m     MetastoreRelation CTS1, data_type, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(sum(NUM#52426),mode=Final,isDistinct=false)], output=[_c0#52433])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(sum(NUM#52426),mode=Partial,isDistinct=false)], output=[currentSum#52436])[0m
[31m     Filter isnotnull(NUM#52426)[0m
[31m      HiveTableScan [NUM#52426], (MetastoreRelation CTS1, data_type, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !168                     168.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM TX WHERE TX2 || TX3 IS NOT NULL
[32m- 0900[0m
Calcite parsing passed, start to transform. SELECT TX1 FROM TX WHERE TX3 || TX2 IS NULL
[32m- 0901[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.STAFF WHERE CITY IS NULL
[32m- 0902[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.STAFF WHERE GRADE = 15
[32m- 0903[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.STAFF WHERE CASE GRADE WHEN 10 THEN 12 WHEN 13 THEN 12 END = 12
[32m- 0904[0m
Calcite parsing passed, start to transform. SELECT SUM(HOURS) FROM V0866
Calcite parsing passed, start to transform. SELECT SUM(HOURS) FROM V0866
Calcite parsing passed, start to transform. SELECT SUM(HOURS) FROM V0866
[31m- 0905 match for 0905:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('SUM('HOURS))][0m
[31m   'UnresolvedRelation [V0866], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double[0m
[31m  Aggregate [sum(HOURS#53700) AS _c0#53701][0m
[31m   MetastoreRelation FLATER, v0866, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [sum(HOURS#53700) AS _c0#53701][0m
[31m   Project [HOURS#53700][0m
[31m    MetastoreRelation FLATER, v0866, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[], functions=[(sum(HOURS#53700),mode=Final,isDistinct=false)], output=[_c0#53701])[0m
[31m   TungstenExchange SinglePartition[0m
[31m    TungstenAggregate(key=[], functions=[(sum(HOURS#53700),mode=Partial,isDistinct=false)], output=[currentSum#53704])[0m
[31m     HiveTableScan [HOURS#53700], (MetastoreRelation FLATER, v0866, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !325                     325.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COALESCE (CITY, EMPNUM) FROM HU.STAFF ORDER BY 1
[31m- 0906 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: cannot resolve 'c0' given input columns _c0;[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'c0' given input columns _c0;[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:108)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:118)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2$1.apply(QueryPlan.scala:122)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32)[0m
[31m  	at scala.collection.mutable.ListBuffer.foreach(ListBuffer.scala:45)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:122)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:126)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:126)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:103)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:44)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['c0 ASC], true[0m
[31m   'Project [unresolvedalias('COALESCE('CITY,'EMPNUM))][0m
[31m    'UnresolvedRelation [HU,STAFF], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: string[0m
[31m  'Sort ['c0 ASC], true[0m
[31m   Project [coalesce(CITY#54087,EMPNUM#54084) AS _c0#54088][0m
[31m    MetastoreRelation hu, staff, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'c0' given input columns _c0;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'c0' given input columns _c0;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: cannot resolve 'c0' given input columns _c0;[0m
[31m  == HIVE - 4 row(s) ==[0m
[31m  Havana[0m
[31m  gg[0m
[31m  Gaithersburg[0m
[31m  Monash (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT * FROM APPLES UNION ALL SELECT * FROM ORANGES ORDER BY 1
zcerror[31m- 0912 *** ; SELECT * FROM APPLES UNION ALL SELECT * FROM ORANGES ORDER BY 1 ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT * FROM T0878
[32m- 0913[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM T0879
[32m- 0914[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.STAFF WHERE 1 IS NOT NULL
[32m- 0915[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, CITY, SALARY FROM HU.STAFF3 FULL OUTER JOIN STAFF66 USING (EMPNUM) ORDER BY EMPNUM
(List(HU, STAFF3, EMPNUM),List(STAFF66, EMPNUM))
[31m- 0916 *** FAILED ***[0m
[31m  Failed to execute query using catalyst:[0m
[31m  Error: cannot resolve 'HU.STAFF3.EMPNUM' given input columns grade, city, empname, empnum, salary, empnum, grade, empname;[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.EMPNUM' given input columns grade, city, empname, empnum, salary, empnum, grade, empname;[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:56)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:108)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:119)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:126)[0m
[31m  	at scala.collection.Iterator$$anon$11.next(Iterator.scala:328)[0m
[31m  	at scala.collection.Iterator$class.foreach(Iterator.scala:727)[0m
[31m  	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)[0m
[31m  	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)[0m
[31m  	at scala.collection.AbstractIterator.to(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)[0m
[31m  	at scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)[0m
[31m  	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)[0m
[31m  	at scala.collection.AbstractIterator.toArray(Iterator.scala:1157)[0m
[31m  	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:126)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:53)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:103)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:102)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:102)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:49)[0m
[31m  	at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:44)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:908)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData$lzycompute(SQLContext.scala:912)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.withCachedData(SQLContext.scala:911)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan$lzycompute(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.optimizedPlan(SQLContext.scala:915)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan$lzycompute(SQLContext.scala:920)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.sparkPlan(SQLContext.scala:918)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan$lzycompute(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.SQLContext$QueryExecution.executedPlan(SQLContext.scala:924)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext$QueryExecution.stringResult(HiveContext.scala:573)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:354)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$33.apply(HiveComparisonTest.scala:352)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)[0m
[31m  	at scala.collection.AbstractTraversable.map(Traversable.scala:105)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:352)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['EMPNUM ASC], true[0m
[31m   'Project [unresolvedalias('EMPNUM),unresolvedalias('CITY),unresolvedalias('SALARY)][0m
[31m    'Join FullOuter, Some(('HU.STAFF3.EMPNUM = 'STAFF66.EMPNUM))[0m
[31m     'UnresolvedRelation [HU,STAFF3], None[0m
[31m     'UnresolvedRelation [STAFF66], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  org.apache.spark.sql.catalyst.analysis.UnresolvedException: Invalid call to toAttribute on unresolved object, tree: unresolvedalias('EMPNUM)[0m
[31m  'Sort ['EMPNUM ASC], true[0m
[31m   'Project [unresolvedalias('EMPNUM),unresolvedalias('CITY),unresolvedalias('SALARY)][0m
[31m    'Join FullOuter, Some(('HU.STAFF3.EMPNUM = EMPNUM#54742))[0m
[31m     MetastoreRelation hu, staff3, None[0m
[31m     MetastoreRelation FLATER, staff66, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.EMPNUM' given input columns grade, city, empname, empnum, salary, empnum, grade, empname;[0m
[31m  == Physical Plan ==[0m
[31m  org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.EMPNUM' given input columns grade, city, empname, empnum, salary, empnum, grade, empname;[0m
[31m  Code Generation: org.apache.spark.sql.AnalysisException: cannot resolve 'HU.STAFF3.EMPNUM' given input columns grade, city, empname, empnum, salary, empnum, grade, empname;[0m
[31m  == HIVE - 0 row(s) == (HiveComparisonTest.scala:366)[0m
Calcite parsing passed, start to transform. SELECT NUMTEST - 999999999999990, NUMTEST / 9999999 FROM HU.P15 WHERE NUMTEST > 0
Calcite parsing passed, start to transform. SELECT NUMTEST - 999999999999990, NUMTEST / 9999999 FROM HU.P15 WHERE NUMTEST > 0
Calcite parsing passed, start to transform. SELECT NUMTEST - 999999999999990, NUMTEST / 9999999 FROM HU.P15 WHERE NUMTEST > 0
[31m- 0917 match for 0917:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(('NUMTEST - 999999999999990)),unresolvedalias(('NUMTEST / 9999999))][0m
[31m   'Filter ('NUMTEST > 0)[0m
[31m    'UnresolvedRelation [HU,P15], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double, _c1: double[0m
[31m  Project [(NUMTEST#54877 - cast(999999999999990 as double)) AS _c0#54878,(NUMTEST#54877 / cast(9999999 as double)) AS _c1#54879][0m
[31m   Filter (NUMTEST#54877 > cast(0 as double))[0m
[31m    MetastoreRelation hu, p15, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [(NUMTEST#54877 - 9.9999999999999E14) AS _c0#54878,(NUMTEST#54877 / 9999999.0) AS _c1#54879][0m
[31m   Filter (NUMTEST#54877 > 0.0)[0m
[31m    MetastoreRelation hu, p15, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [(NUMTEST#54877 - 9.9999999999999E14) AS _c0#54878,(NUMTEST#54877 / 9999999.0) AS _c1#54879][0m
[31m   Filter (NUMTEST#54877 > 0.0)[0m
[31m    HiveTableScan [NUMTEST#54877], (MetastoreRelation hu, p15, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	_c1[0m
[31m  !== HIVE - 2 row(s) ==                                        == CATALYST - 2 row(s) ==[0m
[31m  !-437050046578677	56295000.97163139716313971631397163139716   -4.37050046578677E14	5.62950009716314E7[0m
[31m  !9	100000010.0000009000000900000090000009                     9.0	1.000000100000009E8 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT NUMTEST + 999999999999990, NUMTEST / 9999999 FROM HU.P15 WHERE NUMTEST < 0
Calcite parsing passed, start to transform. SELECT NUMTEST + 999999999999990, NUMTEST / 9999999 FROM HU.P15 WHERE NUMTEST < 0
Calcite parsing passed, start to transform. SELECT NUMTEST + 999999999999990, NUMTEST / 9999999 FROM HU.P15 WHERE NUMTEST < 0
[31m- 0918 match for 0918:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(('NUMTEST + 999999999999990)),unresolvedalias(('NUMTEST / 9999999))][0m
[31m   'Filter ('NUMTEST < 0)[0m
[31m    'UnresolvedRelation [HU,P15], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double, _c1: double[0m
[31m  Project [(NUMTEST#55166 + cast(999999999999990 as double)) AS _c0#55167,(NUMTEST#55166 / cast(9999999 as double)) AS _c1#55168][0m
[31m   Filter (NUMTEST#55166 < cast(0 as double))[0m
[31m    MetastoreRelation hu, p15, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [(NUMTEST#55166 + 9.9999999999999E14) AS _c0#55167,(NUMTEST#55166 / 9999999.0) AS _c1#55168][0m
[31m   Filter (NUMTEST#55166 < 0.0)[0m
[31m    MetastoreRelation hu, p15, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [(NUMTEST#55166 + 9.9999999999999E14) AS _c0#55167,(NUMTEST#55166 / 9999999.0) AS _c1#55168][0m
[31m   Filter (NUMTEST#55166 < 0.0)[0m
[31m    HiveTableScan [NUMTEST#55166], (MetastoreRelation hu, p15, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	_c1[0m
[31m  !== HIVE - 1 row(s) ==                        == CATALYST - 1 row(s) ==[0m
[31m  !-9	-100000010.0000009000000900000090000009   -9.0	-1.000000100000009E8 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.P15 WHERE NUMTEST = 562949953421312
[32m- 0919[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.P15 WHERE NUMTEST = 562949953421313
[32m- 0920[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.P15 WHERE NUMTEST = 562949953421314
[32m- 0921[0m
Calcite parsing passed, start to transform. SELECT C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31, C32, C33, C34, C35, C36, C37, C38, C39, C40, C41, C42, C43, C44, C45, C46, C47, C48, C49, C50, C51, C52, C53, C54, C55, C56, C57, C58, C59, C60, C61, C62, C63, C64, C65, C66, C67, C68, C69, C70, C71, C72, C73, C74, C75, C76, C77, C78, C79, C80, C81, C82, C83, C84, C85, C86, C87, C88, C89, C90, C91, C92, C93, C94, C95, C96, C97, C98, C99, C100 FROM HU.T100
[32m- 0922[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.WORKS T01, HU.PROJ T02, HU.STAFF T03, USIG T04, U_SIG T05, BASE_VS1 T06, VS1 T07, VS2 T08, HU.VSTAFF3 T09, BASE_WCOV T10 WHERE T03.EMPNUM > 'E1'
[32m- 0923[0m
Calcite parsing passed, start to transform. SELECT LONG_INT, LONG_INT /1000000, LONG_INT - 123456789000000. FROM LONGINT
Calcite parsing passed, start to transform. SELECT LONG_INT, LONG_INT /1000000, LONG_INT - 123456789000000. FROM LONGINT
Calcite parsing passed, start to transform. SELECT LONG_INT, LONG_INT /1000000, LONG_INT - 123456789000000. FROM LONGINT
[31m- 0924 match for 0924:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('LONG_INT),unresolvedalias(('LONG_INT / 1000000)),unresolvedalias(('LONG_INT - 123456789000000))][0m
[31m   'UnresolvedRelation [LONGINT], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  LONG_INT: double, _c1: double, _c2: double[0m
[31m  Project [LONG_INT#56577,(LONG_INT#56577 / cast(1000000 as double)) AS _c1#56578,(LONG_INT#56577 - cast(123456789000000 as double)) AS _c2#56579][0m
[31m   MetastoreRelation HU, longint, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [LONG_INT#56577,(LONG_INT#56577 / 1000000.0) AS _c1#56578,(LONG_INT#56577 - 1.23456789E14) AS _c2#56579][0m
[31m   MetastoreRelation HU, longint, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [LONG_INT#56577,(LONG_INT#56577 / 1000000.0) AS _c1#56578,(LONG_INT#56577 - 1.23456789E14) AS _c2#56579][0m
[31m   HiveTableScan [LONG_INT#56577], (MetastoreRelation HU, longint, None)[0m
  
[31m  Code Generation: true[0m
[31m  LONG_INT	_c1	_c2[0m
[31m  !== HIVE - 1 row(s) ==                    == CATALYST - 1 row(s) ==[0m
[31m  !123456789012345	123456789.012345	12345   1.23456789012345E14	1.23456789012345E8	12345.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1,C21,C41,C61,C81,C100 FROM T100
[32m- 0925[0m
Calcite parsing passed, start to transform. SELECT STR110,STR180,STR216 FROM T2000
[32m- 0926[0m
Calcite parsing passed, start to transform. SELECT COL1,COL2,COL3,COL4,COL5,COL6,COL7,COL8 FROM T8
[32m- 0927[0m
Calcite parsing passed, start to transform. SELECT STR110 FROM T4
[32m- 0928[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM  T12
[32m- 0929[0m
Calcite parsing passed, start to transform. SELECT COL6,SUM(COL11),MAX(COL12) FROM T12 GROUP BY COL1,COL5,COL3,COL6,COL2,COL4 ORDER BY COL6 DESC
Calcite parsing passed, start to transform. SELECT COL6,SUM(COL11),MAX(COL12) FROM T12 GROUP BY COL1,COL5,COL3,COL6,COL2,COL4 ORDER BY COL6 DESC
Calcite parsing passed, start to transform. SELECT COL6,SUM(COL11),MAX(COL12) FROM T12 GROUP BY COL1,COL5,COL3,COL6,COL2,COL4 ORDER BY COL6 DESC
[31m- 0930 match for 0930:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['COL6 DESC], true[0m
[31m   'Aggregate ['COL1,'COL5,'COL3,'COL6,'COL2,'COL4], [unresolvedalias('COL6),unresolvedalias('SUM('COL11)),unresolvedalias('MAX('COL12))][0m
[31m    'UnresolvedRelation [T12], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  COL6: string, _c1: double, _c2: double[0m
[31m  Sort [COL6#57346 DESC], true[0m
[31m   Aggregate [COL1#57341,COL5#57345,COL3#57343,COL6#57346,COL2#57342,COL4#57344], [COL6#57346,sum(COL11#57351) AS _c1#57353,max(COL12#57352) AS _c2#57354][0m
[31m    MetastoreRelation HU, t12, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [COL6#57346 DESC], true[0m
[31m   Aggregate [COL1#57341,COL5#57345,COL3#57343,COL6#57346,COL2#57342,COL4#57344], [COL6#57346,sum(COL11#57351) AS _c1#57353,max(COL12#57352) AS _c2#57354][0m
[31m    Project [COL5#57345,COL3#57343,COL12#57352,COL6#57346,COL1#57341,COL2#57342,COL4#57344,COL11#57351][0m
[31m     MetastoreRelation HU, t12, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [COL6#57346 DESC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(COL6#57346 DESC)[0m
[31m     ConvertToSafe[0m
[31m      TungstenAggregate(key=[COL1#57341,COL5#57345,COL3#57343,COL6#57346,COL2#57342,COL4#57344], functions=[(sum(COL11#57351),mode=Final,isDistinct=false),(max(COL12#57352),mode=Final,isDistinct=false)], output=[COL6#57346,_c1#57353,_c2#57354])[0m
[31m       TungstenExchange hashpartitioning(COL1#57341,COL5#57345,COL3#57343,COL6#57346,COL2#57342,COL4#57344)[0m
[31m        TungstenAggregate(key=[COL1#57341,COL5#57345,COL3#57343,COL6#57346,COL2#57342,COL4#57344], functions=[(sum(COL11#57351),mode=Partial,isDistinct=false),(max(COL12#57352),mode=Partial,isDistinct=false)], output=[COL1#57341,COL5#57345,COL3#57343,COL6#57346,COL2#57342,COL4#57344,currentSum#57359,max#57361])[0m
[31m         HiveTableScan [COL5#57345,COL3#57343,COL12#57352,COL6#57346,COL1#57341,COL2#57342,COL4#57344,COL11#57351], (MetastoreRelation HU, t12, None)[0m
  
[31m  Code Generation: true[0m
[31m  COL6	_c1	_c2[0m
[31m  !== HIVE - 10 row(s) ==   == CATALYST - 10 row(s) ==[0m
[31m  !1010101010	286	24        1010101010	1443.0	112.0[0m
[31m  !1010101010	143	12        1010101010	10563.0	448.0[0m
[31m  !1010101010	4329	336      1010101010	286.0	24.0[0m
[31m  !1010101010	1443	112      1010101010	10101.0	448.0[0m
[31m  !1010101010	2886	224      1010101010	143.0	12.0[0m
[31m  !1010101010	10563	448     1010101010	4329.0	336.0[0m
[31m  !1010101010	10101	448     1010101010	2886.0	224.0[0m
[31m  !0101010101	572	48        0101010101	572.0	48.0[0m
[31m  !0101010101	429	36        0101010101	429.0	36.0[0m
[31m  !0101010101	1078	48       0101010101	1078.0	48.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM  T12
[32m- 0931[0m
Calcite parsing passed, start to transform. SELECT COL5,SUM(COL11),MAX(COL12) FROM T12 GROUP BY COL9,COL5,COL7,COL4,COL3,COL8 ORDER BY COL5 DESC
Calcite parsing passed, start to transform. SELECT COL5,SUM(COL11),MAX(COL12) FROM T12 GROUP BY COL9,COL5,COL7,COL4,COL3,COL8 ORDER BY COL5 DESC
Calcite parsing passed, start to transform. SELECT COL5,SUM(COL11),MAX(COL12) FROM T12 GROUP BY COL9,COL5,COL7,COL4,COL3,COL8 ORDER BY COL5 DESC
[31m- 0932 match for 0932:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['COL5 DESC], true[0m
[31m   'Aggregate ['COL9,'COL5,'COL7,'COL4,'COL3,'COL8], [unresolvedalias('COL5),unresolvedalias('SUM('COL11)),unresolvedalias('MAX('COL12))][0m
[31m    'UnresolvedRelation [T12], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  COL5: string, _c1: double, _c2: double[0m
[31m  Sort [COL5#57691 DESC], true[0m
[31m   Aggregate [COL9#57695,COL5#57691,COL7#57693,COL4#57690,COL3#57689,COL8#57694], [COL5#57691,sum(COL11#57697) AS _c1#57699,max(COL12#57698) AS _c2#57700][0m
[31m    MetastoreRelation HU, t12, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [COL5#57691 DESC], true[0m
[31m   Aggregate [COL9#57695,COL5#57691,COL7#57693,COL4#57690,COL3#57689,COL8#57694], [COL5#57691,sum(COL11#57697) AS _c1#57699,max(COL12#57698) AS _c2#57700][0m
[31m    Project [COL5#57691,COL12#57698,COL3#57689,COL11#57697,COL4#57690,COL9#57695,COL8#57694,COL7#57693][0m
[31m     MetastoreRelation HU, t12, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [COL5#57691 DESC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(COL5#57691 DESC)[0m
[31m     ConvertToSafe[0m
[31m      TungstenAggregate(key=[COL9#57695,COL5#57691,COL7#57693,COL4#57690,COL3#57689,COL8#57694], functions=[(sum(COL11#57697),mode=Final,isDistinct=false),(max(COL12#57698),mode=Final,isDistinct=false)], output=[COL5#57691,_c1#57699,_c2#57700])[0m
[31m       TungstenExchange hashpartitioning(COL9#57695,COL5#57691,COL7#57693,COL4#57690,COL3#57689,COL8#57694)[0m
[31m        TungstenAggregate(key=[COL9#57695,COL5#57691,COL7#57693,COL4#57690,COL3#57689,COL8#57694], functions=[(sum(COL11#57697),mode=Partial,isDistinct=false),(max(COL12#57698),mode=Partial,isDistinct=false)], output=[COL9#57695,COL5#57691,COL7#57693,COL4#57690,COL3#57689,COL8#57694,currentSum#57705,max#57707])[0m
[31m         HiveTableScan [COL5#57691,COL12#57698,COL3#57689,COL11#57697,COL4#57690,COL9#57695,COL8#57694,COL7#57693], (MetastoreRelation HU, t12, None)[0m
  
[31m  Code Generation: true[0m
[31m  COL5	_c1	_c2[0m
[31m  !== HIVE - 10 row(s) ==   == CATALYST - 10 row(s) ==[0m
[31m  !88888889	10878	448       88888889	10878.0	448.0[0m
[31m  !88888888	1540	48         88888888	4329.0	336.0[0m
[31m  !88888888	4329	336        88888888	10434.0	448.0[0m
[31m  !88888888	1443	112        88888888	1540.0	48.0[0m
[31m  !88888888	2886	224        88888888	1443.0	112.0[0m
[31m  !88888888	10434	448       88888888	2886.0	224.0[0m
[31m  !88888884	143	12          88888884	143.0	12.0[0m
[31m  !88888883	286	24          88888883	286.0	24.0[0m
[31m  !88888882	429	36          88888882	429.0	36.0[0m
[31m  !88888881	572	48          88888881	572.0	48.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM  T12
[32m- 0933[0m
Calcite parsing passed, start to transform. SELECT COL5,COL6,COL11,COL3,COL4,COL7,COL8 FROM T12 ORDER BY COL7,COL8,COL3,COL4,COL6,COL5 DESC
Calcite parsing passed, start to transform. SELECT COL5,COL6,COL11,COL3,COL4,COL7,COL8 FROM T12 ORDER BY COL7,COL8,COL3,COL4,COL6,COL5 DESC
Calcite parsing passed, start to transform. SELECT COL5,COL6,COL11,COL3,COL4,COL7,COL8 FROM T12 ORDER BY COL7,COL8,COL3,COL4,COL6,COL5 DESC
[31m- 0934 match for 0934:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['COL7 ASC,'COL8 ASC,'COL3 ASC,'COL4 ASC,'COL6 ASC,'COL5 DESC], true[0m
[31m   'Project [unresolvedalias('COL5),unresolvedalias('COL6),unresolvedalias('COL11),unresolvedalias('COL3),unresolvedalias('COL4),unresolvedalias('COL7),unresolvedalias('COL8)][0m
[31m    'UnresolvedRelation [T12], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  COL5: string, COL6: string, COL11: double, COL3: string, COL4: string, COL7: string, COL8: string[0m
[31m  Sort [COL7#58039 ASC,COL8#58040 ASC,COL3#58035 ASC,COL4#58036 ASC,COL6#58038 ASC,COL5#58037 DESC], true[0m
[31m   Project [COL5#58037,COL6#58038,COL11#58043,COL3#58035,COL4#58036,COL7#58039,COL8#58040][0m
[31m    MetastoreRelation HU, t12, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [COL7#58039 ASC,COL8#58040 ASC,COL3#58035 ASC,COL4#58036 ASC,COL6#58038 ASC,COL5#58037 DESC], true[0m
[31m   Project [COL5#58037,COL6#58038,COL11#58043,COL3#58035,COL4#58036,COL7#58039,COL8#58040][0m
[31m    MetastoreRelation HU, t12, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [COL7#58039 ASC,COL8#58040 ASC,COL3#58035 ASC,COL4#58036 ASC,COL6#58038 ASC,COL5#58037 DESC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(COL7#58039 ASC,COL8#58040 ASC,COL3#58035 ASC,COL4#58036 ASC,COL6#58038 ASC,COL5#58037 DESC)[0m
[31m     HiveTableScan [COL5#58037,COL6#58038,COL11#58043,COL3#58035,COL4#58036,COL7#58039,COL8#58040], (MetastoreRelation HU, t12, None)[0m
  
[31m  Code Generation: true[0m
[31m  COL5	COL6	COL11	COL3	COL4	COL7	COL8[0m
[31m  !== HIVE - 220 row(s) ==                                                                   == CATALYST - 220 row(s) ==[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	44	4444	666666	2020...20	3030...30                                    88888888	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	0101010101	33	4444	666666	2020...20	3030...30                                    88888888	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888882	0101010101	33	4444	666666	2020...20	3030...30                                    88888882	0101010101	33.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888881	0101010101	44	4444	666666	2020...20	3030...30                                    88888881	0101010101	44.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	22	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	11	4444	666666	2020...20	3030...30                                    88888888	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888884	1010101010	11	4444	666666	2020...20	3030...30                                    88888884	1010101010	11.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888883	1010101010	22	4444	666666	2020...20	3030...30                                    88888883	1010101010	22.0	4444	666666	2020...20	3030...30[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	333	4441	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	333.0	4441	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4442	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4442	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4443	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4443	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	333	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	333.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888889	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888889	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	111	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	444.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	444	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	111.0	4444	666666	20202020202020202020	303030303030303030303030303030[0m
[31m  !88888888	1010101010	222	4444	666666	20202020202020202020	303030303030303030303030303030   88888888	1010101010	222.0	4444	666666	20202020202020202020	303030303030303030303030303030 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM  T12
[32m- 0935[0m
Calcite parsing passed, start to transform. SELECT COL3,COL11,COL9,COL8,COL7,COL5,COL4 FROM T12 ORDER BY COL9,COL8,COL7,COL5,COL4,COL3
Calcite parsing passed, start to transform. SELECT COL3,COL11,COL9,COL8,COL7,COL5,COL4 FROM T12 ORDER BY COL9,COL8,COL7,COL5,COL4,COL3
Calcite parsing passed, start to transform. SELECT COL3,COL11,COL9,COL8,COL7,COL5,COL4 FROM T12 ORDER BY COL9,COL8,COL7,COL5,COL4,COL3
[31m- 0936 match for 0936:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['COL9 ASC,'COL8 ASC,'COL7 ASC,'COL5 ASC,'COL4 ASC,'COL3 ASC], true[0m
[31m   'Project [unresolvedalias('COL3),unresolvedalias('COL11),unresolvedalias('COL9),unresolvedalias('COL8),unresolvedalias('COL7),unresolvedalias('COL5),unresolvedalias('COL4)][0m
[31m    'UnresolvedRelation [T12], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  COL3: string, COL11: double, COL9: string, COL8: string, COL7: string, COL5: string, COL4: string[0m
[31m  Sort [COL9#58354 ASC,COL8#58353 ASC,COL7#58352 ASC,COL5#58350 ASC,COL4#58349 ASC,COL3#58348 ASC], true[0m
[31m   Project [COL3#58348,COL11#58356,COL9#58354,COL8#58353,COL7#58352,COL5#58350,COL4#58349][0m
[31m    MetastoreRelation HU, t12, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [COL9#58354 ASC,COL8#58353 ASC,COL7#58352 ASC,COL5#58350 ASC,COL4#58349 ASC,COL3#58348 ASC], true[0m
[31m   Project [COL3#58348,COL11#58356,COL9#58354,COL8#58353,COL7#58352,COL5#58350,COL4#58349][0m
[31m    MetastoreRelation HU, t12, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [COL9#58354 ASC,COL8#58353 ASC,COL7#58352 ASC,COL5#58350 ASC,COL4#58349 ASC,COL3#58348 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(COL9#58354 ASC,COL8#58353 ASC,COL7#58352 ASC,COL5#58350 ASC,COL4#58349 ASC,COL3#58348 ASC)[0m
[31m     HiveTableScan [COL3#58348,COL11#58356,COL9#58354,COL8#58353,COL7#58352,COL5#58350,COL4#58349], (MetastoreRelation HU, t12, None)[0m
  
[31m  Code Generation: true[0m
[31m  COL3	COL11	COL9	COL8	COL7	COL5	COL4[0m
[31m  !== HIVE - 224 row(s) ==                                                                                                 == CATALYST - 224 row(s) ==[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888881	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888881	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888882	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888882	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888883	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888883	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888884	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888884	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	44	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	44.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	11	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	11.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	22	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	22.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4444	33	4040...40	3030...30	2020...20	88888888	666666                                                                   4444	33.0	4040...40	3030...30	2020...20	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4441	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4441	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4442	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4442	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4443	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4443	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	111.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	222	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	222.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	111	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888888	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	444	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	333.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666[0m
[31m  !4444	333	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666   4444	444.0	4040404040404040404040404040404040404040	303030303030303030303030303030	20202020202020202020	88888889	666666 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT * FROM T240
[32m- 0937[0m
Calcite parsing passed, start to transform. SELECT STAFF.EMPNUM,PROJ.PNUM,WORKS.HOURS, STAFF3.GRADE,STAFF4.CITY,WORKS1.HOURS, TEMP_S.GRADE,PROJ1.PNUM,STAFF1.GRADE, UPUNIQ.COL2 FROM   STAFF,PROJ,WORKS,STAFF3,STAFF4,WORKS1, TEMP_S,PROJ1,STAFF1,UPUNIQ WHERE  STAFF.EMPNUM = WORKS.EMPNUM    AND PROJ.PNUM = WORKS.PNUM         AND STAFF3.EMPNUM = WORKS.EMPNUM   AND STAFF4.EMPNUM = WORKS.EMPNUM   AND WORKS1.EMPNUM = WORKS.EMPNUM   AND WORKS1.PNUM = WORKS.PNUM       AND TEMP_S.EMPNUM = WORKS.EMPNUM   AND PROJ1.PNUM = WORKS.PNUM        AND STAFF1.EMPNUM = WORKS.EMPNUM   AND UPUNIQ.COL2 = 'A' ORDER BY 1, 2
[31m- 0938 golden answer for query:[0m
[31m  Error: FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.mr.MapredLocalTask[0m
[31m  org.apache.spark.sql.execution.QueryExecutionException: FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.mr.MapredLocalTask[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:433)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  SELECT STAFF.EMPNUM,PROJ.PNUM,WORKS.HOURS, STAFF3.GRADE,STAFF4.CITY,WORKS1.HOURS, TEMP_S.GRADE,PROJ1.PNUM,STAFF1.GRADE, UPUNIQ.COL2 FROM   STAFF,PROJ,WORKS,STAFF3,STAFF4,WORKS1, TEMP_S,PROJ1,STAFF1,UPUNIQ WHERE  STAFF.EMPNUM = WORKS.EMPNUM    AND PROJ.PNUM = WORKS.PNUM         AND STAFF3.EMPNUM = WORKS.EMPNUM   AND STAFF4.EMPNUM = WORKS.EMPNUM   AND WORKS1.EMPNUM = WORKS.EMPNUM   AND WORKS1.PNUM = WORKS.PNUM       AND TEMP_S.EMPNUM = WORKS.EMPNUM   AND PROJ1.PNUM = WORKS.PNUM        AND STAFF1.EMPNUM = WORKS.EMPNUM   AND UPUNIQ.COL2 = 'A' ORDER BY 1, 2 (HiveComparisonTest.scala:343)[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, EMPNAME FROM STAFF WHERE EMPNUM IN (SELECT EMPNUM  FROM WORKS WHERE PNUM IN (SELECT PNUM  FROM PROJ WHERE PTYPE IN (SELECT PTYPE  FROM PROJ WHERE PNUM IN (SELECT PNUM  FROM WORKS WHERE EMPNUM IN (SELECT EMPNUM  FROM WORKS WHERE PNUM IN (SELECT PNUM   FROM PROJ WHERE PTYPE IN (SELECT PTYPE  FROM PROJ WHERE CITY IN (SELECT CITY  FROM STAFF WHERE EMPNUM IN (SELECT EMPNUM  FROM WORKS WHERE HOURS = 20 AND PNUM = 'P2' )))))))))
zcerror[31m- 0939 *** ; SELECT EMPNUM, EMPNAME FROM STAFF WHERE EMPNUM IN (SELECT EMPNUM  FROM WORKS WHERE PNUM IN (SELECT PNUM  FROM PROJ WHERE PTYPE IN (SELECT PTYPE  FROM PROJ WHERE PNUM IN (SELECT PNUM  FROM WORKS WHERE EMPNUM IN (SELECT EMPNUM  FROM WORKS WHERE PNUM IN (SELECT PNUM   FROM PROJ WHERE PTYPE IN (SELECT PTYPE  FROM PROJ WHERE CITY IN (SELECT CITY  FROM STAFF WHERE EMPNUM IN (SELECT EMPNUM  FROM WORKS WHERE HOURS = 20 AND PNUM = 'P2' ))))))))) ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HH WHERE SMALLTEST = 9999
[32m- 0940[0m
Calcite parsing passed, start to transform. SELECT SMALLTEST FROM HH WHERE SMALLTEST = -9999
Calcite parsing passed, start to transform. SELECT SMALLTEST FROM HH WHERE SMALLTEST = -9999
Calcite parsing passed, start to transform. SELECT SMALLTEST FROM HH WHERE SMALLTEST = -9999
[31m- 0941 match for 0941:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('SMALLTEST)][0m
[31m   'Filter ('SMALLTEST = -9999)[0m
[31m    'UnresolvedRelation [HH], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  SMALLTEST: double[0m
[31m  Project [SMALLTEST#58885][0m
[31m   Filter (SMALLTEST#58885 = cast(-9999 as double))[0m
[31m    MetastoreRelation HU, hh, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [SMALLTEST#58885][0m
[31m   Filter (SMALLTEST#58885 = -9999.0)[0m
[31m    MetastoreRelation HU, hh, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (SMALLTEST#58885 = -9999.0)[0m
[31m   HiveTableScan [SMALLTEST#58885], (MetastoreRelation HU, hh, None)[0m
  
[31m  Code Generation: true[0m
[31m  SMALLTEST[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !-9999                   -9999.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT INTTEST FROM EE WHERE INTTEST = 999999999
Calcite parsing passed, start to transform. SELECT INTTEST FROM EE WHERE INTTEST = 999999999
Calcite parsing passed, start to transform. SELECT INTTEST FROM EE WHERE INTTEST = 999999999
[31m- 0942 match for 0942:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('INTTEST)][0m
[31m   'Filter ('INTTEST = 999999999)[0m
[31m    'UnresolvedRelation [EE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  INTTEST: double[0m
[31m  Project [INTTEST#59063][0m
[31m   Filter (INTTEST#59063 = cast(999999999 as double))[0m
[31m    MetastoreRelation HU, ee, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [INTTEST#59063][0m
[31m   Filter (INTTEST#59063 = 9.99999999E8)[0m
[31m    MetastoreRelation HU, ee, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (INTTEST#59063 = 9.99999999E8)[0m
[31m   HiveTableScan [INTTEST#59063], (MetastoreRelation HU, ee, None)[0m
  
[31m  Code Generation: true[0m
[31m  INTTEST[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !999999999               9.99999999E8 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM EE WHERE INTTEST = -999999999
[32m- 0943[0m
Calcite parsing passed, start to transform. SELECT NUMTEST FROM PP_15
[32m- 0944[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM PP_15 WHERE NUMTEST = 0.123456789012345
[32m- 0945[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM PP_15 WHERE NUMTEST = -0.912345678901234
[32m- 0946[0m
Calcite parsing passed, start to transform. SELECT C6, C16, C26, C36, C46, C56, C66, C76, C86, C96, C100 FROM T100 WHERE C1 = 'ZA' AND C2 = 'ZB'
[32m- 0947[0m
Calcite parsing passed, start to transform. SELECT C5, C20, C35, C40, C55, C60, C75, C80, C90, C95, C100 FROM T100 WHERE C1 = 'ZA' AND C2 = 'ZB'
[32m- 0948[0m
Calcite parsing passed, start to transform. SELECT FLOATTEST FROM JJ
[32m- 0949[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JJ WHERE FLOATTEST > 0.1048574 AND FLOATTEST < 0.1048576
[32m- 0950[0m
Calcite parsing passed, start to transform. SELECT FLOATTEST FROM JJ
[32m- 0951[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM JJ WHERE FLOATTEST > -0.1048576 AND FLOATTEST < -0.1048574
[32m- 0952[0m
Calcite parsing passed, start to transform. SELECT REALTEST FROM GG
[32m- 0953[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM GG WHERE REALTEST > 0.1048574 AND REALTEST < 0.1048576
[32m- 0954[0m
Calcite parsing passed, start to transform. SELECT REALTEST FROM GG
[32m- 0955[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM GG WHERE REALTEST > -0.1048576 AND REALTEST < -0.1048574
[32m- 0956[0m
Calcite parsing passed, start to transform. SELECT DOUBLETEST FROM II
Calcite parsing passed, start to transform. SELECT DOUBLETEST FROM II
Calcite parsing passed, start to transform. SELECT DOUBLETEST FROM II
[31m- 0957 match for 0957:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('DOUBLETEST)][0m
[31m   'UnresolvedRelation [II], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  DOUBLETEST: float[0m
[31m  Project [DOUBLETEST#60734][0m
[31m   MetastoreRelation HU, ii, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [DOUBLETEST#60734][0m
[31m   MetastoreRelation HU, ii, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [DOUBLETEST#60734], (MetastoreRelation HU, ii, None)[0m
  
[31m  Code Generation: true[0m
[31m  DOUBLETEST[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !0.1073741823            0.107374184 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM II WHERE DOUBLETEST > 0.1073741822 AND DOUBLETEST < 0.1073741824
[32m- 0958[0m
Calcite parsing passed, start to transform. SELECT DOUBLETEST FROM II
Calcite parsing passed, start to transform. SELECT DOUBLETEST FROM II
Calcite parsing passed, start to transform. SELECT DOUBLETEST FROM II
[31m- 0959 match for 0959:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('DOUBLETEST)][0m
[31m   'UnresolvedRelation [II], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  DOUBLETEST: float[0m
[31m  Project [DOUBLETEST#61003][0m
[31m   MetastoreRelation HU, ii, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [DOUBLETEST#61003][0m
[31m   MetastoreRelation HU, ii, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [DOUBLETEST#61003], (MetastoreRelation HU, ii, None)[0m
  
[31m  Code Generation: true[0m
[31m  DOUBLETEST[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !-0.1073741823           -0.107374184 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM II WHERE DOUBLETEST > -0.1073741824 AND DOUBLETEST < -0.1073741822
[32m- 0960[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ1_P WHERE S1 = 'E1'
[32m- 0961[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ1_F WHERE F6 = 'RRS'
[32m- 0962[0m
Calcite parsing passed, start to transform. SELECT S1 FROM SIZ1_P WHERE S1 = 'E1' AND S2 = 'TTT'
[32m- 0963[0m
Calcite parsing passed, start to transform. SELECT S1 FROM SIZ1_P WHERE S1 = 'E9'
[32m- 0964[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ1_P WHERE S1 = 'E1' AND S2 = 'TTS' AND S3 =1
[32m- 0965[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ1_P WHERE S1 = 'E1' AND S2 = 'TTS' AND S3 = 1
[32m- 0966[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ1_P WHERE S1 = 'E1' AND S2 = 'TTT' AND S3 = 1
[32m- 0967[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ1_F WHERE F1 = 'E2'
[32m- 0968[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ1_F WHERE F1 = 'E1'
[32m- 0969[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ2_F10
[32m- 0970[0m
Calcite parsing passed, start to transform. SELECT P1 FROM SIZ2_P WHERE P1 = '  A'
Calcite parsing passed, start to transform. SELECT P1 FROM SIZ2_P WHERE P1 = '  A'
Calcite parsing passed, start to transform. SELECT P1 FROM SIZ2_P WHERE P1 = '  A'
[31m- 0971 match for 0971:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('P1)][0m
[31m   'Filter ('P1 =   A)[0m
[31m    'UnresolvedRelation [SIZ2_P], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  P1: string[0m
[31m  Project [P1#62245][0m
[31m   Filter (P1#62245 =   A)[0m
[31m    MetastoreRelation SUN, siz2_p, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [P1#62245][0m
[31m   Filter (P1#62245 =   A)[0m
[31m    MetastoreRelation SUN, siz2_p, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (P1#62245 =   A)[0m
[31m   HiveTableScan [P1#62245], (MetastoreRelation SUN, siz2_p, None)[0m
  
[31m  Code Generation: true[0m
[31m  P1[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !A                         A (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ2_P WHERE P1 = '  A'
[32m- 0972[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ2_P WHERE P1 = '  A'
[32m- 0973[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ2_P WHERE P1 = '  A'
[32m- 0974[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ2_F1 WHERE F1 = '  A'
[32m- 0975[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ3_P5 WHERE F1 = 11
[32m- 0976[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ3_P5 WHERE F1 = 11
[32m- 0977[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ3_F,SIZ3_P1,SIZ3_P2,SIZ3_P3,SIZ3_P4, SIZ3_P5,SIZ3_P6 WHERE P1 = SIZ3_P1.F1 AND P2 = SIZ3_P2.F1 AND P3 = SIZ3_P3.F1 AND P4 = SIZ3_P4.F1 AND P5 = SIZ3_P5.F1 AND P6 = SIZ3_P6.F1 AND SIZ3_P3.F1 BETWEEN 1 AND 2
[32m- 0978[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ3_F
[32m- 0979[0m
Calcite parsing passed, start to transform. SELECT F1 FROM SIZ3_P1 WHERE F1 = '  A'
Calcite parsing passed, start to transform. SELECT F1 FROM SIZ3_P1 WHERE F1 = '  A'
Calcite parsing passed, start to transform. SELECT F1 FROM SIZ3_P1 WHERE F1 = '  A'
[31m- 0980 match for 0980:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('F1)][0m
[31m   'Filter ('F1 =   A)[0m
[31m    'UnresolvedRelation [SIZ3_P1], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  F1: string[0m
[31m  Project [F1#63372][0m
[31m   Filter (F1#63372 =   A)[0m
[31m    MetastoreRelation SUN, siz3_p1, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [F1#63372][0m
[31m   Filter (F1#63372 =   A)[0m
[31m    MetastoreRelation SUN, siz3_p1, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (F1#63372 =   A)[0m
[31m   HiveTableScan [F1#63372], (MetastoreRelation SUN, siz3_p1, None)[0m
  
[31m  Code Generation: true[0m
[31m  F1[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !A                         A (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ3_P1 WHERE F1 = '  A'
[32m- 0981[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ3_P1 WHERE F1 = '  A'
[32m- 0982[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ3_P1 WHERE F1 = '  A'
[32m- 0983[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM SIZ3_F WHERE P1 = '  A'
[32m- 0984[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM UUSIG
[32m- 0985[0m
Calcite parsing passed, start to transform. SELECT COUNT(DISTINCT U1) FROM UUSIG
[32m- 0986[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM UUSIG WHERE U1 < 0 OR U1 > 3 OR U1 IS NULL
[32m- 0987[0m
Calcite parsing passed, start to transform. SELECT * FROM ABOVE_AVERAGE ORDER BY COLUMN_1
Calcite parsing passed, start to transform. SELECT * FROM ABOVE_AVERAGE ORDER BY COLUMN_1
Calcite parsing passed, start to transform. SELECT * FROM ABOVE_AVERAGE ORDER BY COLUMN_1
[31m- 0988 match for 0988:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['COLUMN_1 ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'UnresolvedRelation [ABOVE_AVERAGE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  column_1: string, column_2: double, column_3: string[0m
[31m  Sort [COLUMN_1#64303 ASC], true[0m
[31m   Project [column_1#64303,column_2#64304,column_3#64305][0m
[31m    MetastoreRelation FLATER, above_average, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [COLUMN_1#64303 ASC], true[0m
[31m   MetastoreRelation FLATER, above_average, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [COLUMN_1#64303 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(COLUMN_1#64303 ASC)[0m
[31m     HiveTableScan [column_1#64303,column_2#64304,column_3#64305], (MetastoreRelation FLATER, above_average, None)[0m
  
[31m  Code Generation: true[0m
[31m  column_1	column_2	column_3[0m
[31m  !== HIVE - 3 row(s) ==    == CATALYST - 3 row(s) ==[0m
[31m  !MAX	30000	Gaithersburg   MAX	30000.0	Gaithersburg[0m
[31m  !P2	30000	Vienna          P2	30000.0	Vienna[0m
[31m  !P7	15000	Gaithersburg    P7	15000.0	Gaithersburg (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT * FROM STAFF_DUP ORDER BY CITY
Calcite parsing passed, start to transform. SELECT * FROM STAFF_DUP ORDER BY CITY
Calcite parsing passed, start to transform. SELECT * FROM STAFF_DUP ORDER BY CITY
[31m- 0989 match for 0989:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['CITY ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'UnresolvedRelation [STAFF_DUP], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  empnum: string, empname: string, grade: double, city: string[0m
[31m  Sort [CITY#64490 ASC], true[0m
[31m   Project [empnum#64487,empname#64488,grade#64489,city#64490][0m
[31m    MetastoreRelation FLATER, staff_dup, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [CITY#64490 ASC], true[0m
[31m   MetastoreRelation FLATER, staff_dup, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [CITY#64490 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(CITY#64490 ASC)[0m
[31m     HiveTableScan [empnum#64487,empname#64488,grade#64489,city#64490], (MetastoreRelation FLATER, staff_dup, None)[0m
  
[31m  Code Generation: true[0m
[31m  empnum	empname	grade	city[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !E13	ff	82	gg            E13	ff	82.0	gg (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM STAFF_DUP
[32m- 0990[0m
Calcite parsing passed, start to transform. SELECT C2, C1, C3 FROM FOUR_CITIES ORDER BY C3, C2
Calcite parsing passed, start to transform. SELECT C2, C1, C3 FROM FOUR_CITIES ORDER BY C3, C2
Calcite parsing passed, start to transform. SELECT C2, C1, C3 FROM FOUR_CITIES ORDER BY C3, C2
[31m- 0991 match for 0991:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['C3 ASC,'C2 ASC], true[0m
[31m   'Project [unresolvedalias('C2),unresolvedalias('C1),unresolvedalias('C3)][0m
[31m    'UnresolvedRelation [FOUR_CITIES], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C2: string, C1: string, C3: double[0m
[31m  Sort [C3#64770 ASC,C2#64769 ASC], true[0m
[31m   Project [C2#64769,C1#64768,C3#64770][0m
[31m    MetastoreRelation FLATER, four_cities, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [C3#64770 ASC,C2#64769 ASC], true[0m
[31m   Project [C2#64769,C1#64768,C3#64770][0m
[31m    MetastoreRelation FLATER, four_cities, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [C3#64770 ASC,C2#64769 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(C3#64770 ASC,C2#64769 ASC)[0m
[31m     HiveTableScan [C2#64769,C1#64768,C3#64770], (MetastoreRelation FLATER, four_cities, None)[0m
  
[31m  Code Generation: true[0m
[31m  C2	C1	C3[0m
[31m  !== HIVE - 3 row(s) ==   == CATALYST - 3 row(s) ==[0m
[31m  !NULL	P	666              NULL	P	666.0[0m
[31m  !Gaithersburg	P	666      Gaithersburg	P	666.0[0m
[31m  !gg	S	777                gg	S	777.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT (*) FROM FOUR_CITIES
[32m- 0992[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FOUR_CITIES WHERE C3 > 0
[32m- 0993[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM FOUR_CITIES WHERE C2 = 'Vienna'
[32m- 0994[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CONTACTS WHERE DESCRIPTION = 'Harry works in the Redundancy Automation Division of the ' || 'Materials ' || 'Blasting Laboratory in the National Cattle Acceleration ' || 'Project of ' || 'lower Michigan.  His job is to document the trajectory of ' || 'cattle and ' || 'correlate the loft and acceleration versus the quality of ' || 'materials ' || 'used in the trebuchet.  He served ten years as the ' || 'vice-president in ' || 'charge of marketing in the now defunct milk trust of the ' || 'Pennsylvania ' || 'Coalition of All Things Bovine.  Prior to that he ' || 'established himself ' || 'as a world-class graffiti artist and source of all good ' || 'bits related ' || 'to channel dredging in poor weather.  He is author of over ' || 'ten thousand ' || 'paperback novels, including such titles as "How Many ' || 'Pumpkins will Fit ' || 'on the Head of a Pin," "A Whole Bunch of Useless Things ' || 'that you Don''t ' || 'Want to Know," and "How to Lift Heavy Things Over your ' || 'Head without ' || 'Hurting Yourself or Dropping Them."  He attends ANSI and ' || 'ISO standards ' || 'meetings in his copious free time and funds the development ' || 'of test ' || 'suites with his pocket change.' AND KEYWORDS = 'aardvark albatross nutmeg redundancy ' || 'automation materials blasting ' || 'cattle acceleration trebuchet catapult ' || 'loft coffee java sendmail SMTP ' || 'FTP HTTP censorship expletive senility ' || 'extortion distortion conformity ' || 'conformance nachos chicks goslings ' || 'ducklings honk quack melatonin tie ' || 'noose circulation column default ' || 'ionic doric chlorine guanine Guam ' || 'invasions rubicon helmet plastics ' || 'recycle HDPE nylon ceramics plumbing ' || 'parachute zeppelin carbon hydrogen ' || 'vinegar sludge asphalt adhesives ' || 'tensile magnetic Ellesmere Greenland ' || 'Knud Rasmussen precession ' || 'navigation positioning orbit altitude ' || 'resistance radiation levitation ' || 'yoga demiurge election violence ' || 'collapsed fusion cryogenics gravity ' || 'sincerity idiocy budget accounting ' || 'auditing titanium torque pressure ' || 'fragile hernia muffler cartilage ' || 'graphics deblurring headache eyestrain ' || 'interlace bandwidth resolution ' || 'determination steroids barrel oak wine ' || 'ferment yeast brewing bock siphon ' || 'clarity impurities SQL RBAC data ' || 'warehouse security integrity feedback'
[32m- 0995[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CONTACTS WHERE DESCRIPTION LIKE '%change.' AND KEYWORDS LIKE '%feedback'
[32m- 0996[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CONTACTS WHERE DESCRIPTION = 'Harry works in the Redundancy Automation Division of the ' || 'Materials ' || 'Blasting Laboratory in the National Cattle Acceleration ' || 'Project of ' || 'lower Michigan.  His job is to document the trajectory of ' || 'cattle and ' || 'correlate the loft and acceleration versus the quality of ' || 'materials ' || 'used in the trebuchet.  He served ten years as the ' || 'vice-president in ' || 'charge of marketing in the now defunct milk trust of the ' || 'Pennsylvania ' || 'Coalition of All Things Bovine.  Prior to that he ' || 'established himself ' || 'as a world-class graffiti artist and source of all good ' || 'bits related ' || 'to channel dredging in poor weather.  He is author of over ' || 'ten thousand ' || 'paperback novels, including such titles as "How Many ' || 'Pumpkins will Fit ' || 'on the Head of a Pin," "A Whole Bunch of Useless Things ' || 'that you Don''t ' || 'Want to Know," and "How to Lift Heavy Things Over your ' || 'Head without ' || 'Hurting Yourself or Dropping Them."  He attends ANSI and ' || 'ISO standards ' || 'meetings in his copious free time and funds the development ' || 'of test ' || 'suites with his pocket change.' AND KEYWORDS = 'aardvark albatross nutmeg redundancy ' || 'automation materials blasting ' || 'cattle acceleration trebuchet catapult ' || 'loft coffee java sendmail SMTP ' || 'FTP HTTP censorship expletive senility ' || 'extortion distortion conformity ' || 'conformance nachos chicks goslings ' || 'ducklings honk quack melatonin tie ' || 'noose circulation column default ' || 'ionic doric chlorine guanine Guam ' || 'invasions rubicon helmet plastics ' || 'recycle HDPE nylon ceramics plumbing ' || 'parachute zeppelin carbon hydrogen ' || 'vinegar sludge asphalt adhesives ' || 'tensile magnetic Ellesmere Greenland ' || 'Knud Rasmussen precession ' || 'navigation positioning orbit altitude ' || 'resistance radiation levitation ' || 'yoga demiurge election violence ' || 'collapsed fusion cryogenics gravity ' || 'sincerity idiocy budget accounting ' || 'auditing titanium torque pressure ' || 'fragile hernia muffler cartilage ' || 'graphics deblurring headache eyestrain ' || 'interlace bandwidth resolution ' || 'determination steroids barrel oak wine ' || 'ferment yeast brewing bock siphon ' || 'clarity impurities SQL RBAC data ' || 'warehouse security integrity feedback'
NoViableAltException(5@[323:1: atomExpression : ( ( KW_NULL )=> KW_NULL -> TOK_NULL | ( constant )=> constant | castExpression | caseExpression | whenExpression | ( functionName LPAREN )=> function | tableOrColumn | LPAREN ! expression RPAREN !);])
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser$DFA32.specialStateTransition(HiveParser_IdentifiersParser.java)
	at org.antlr.runtime.DFA.predict(DFA.java:80)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.atomExpression(HiveParser_IdentifiersParser.java:6177)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceFieldExpression(HiveParser_IdentifiersParser.java:6383)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceUnaryPrefixExpression(HiveParser_IdentifiersParser.java:6768)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceUnarySuffixExpression(HiveParser_IdentifiersParser.java:6828)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceBitwiseXorExpression(HiveParser_IdentifiersParser.java:7012)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceStarExpression(HiveParser_IdentifiersParser.java:7172)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedencePlusExpression(HiveParser_IdentifiersParser.java:7332)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceAmpersandExpression(HiveParser_IdentifiersParser.java:7483)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceBitwiseOrExpression(HiveParser_IdentifiersParser.java:7665)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceEqualExpression(HiveParser_IdentifiersParser.java:8290)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceNotExpression(HiveParser_IdentifiersParser.java:9177)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceAndExpression(HiveParser_IdentifiersParser.java:9296)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceOrExpression(HiveParser_IdentifiersParser.java:9455)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.expression(HiveParser_IdentifiersParser.java:6105)
	at org.apache.hadoop.hive.ql.parse.HiveParser.expression(HiveParser.java:45846)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.searchCondition(HiveParser_FromClauseParser.java:6637)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.whereClause(HiveParser_FromClauseParser.java:6545)
	at org.apache.hadoop.hive.ql.parse.HiveParser.whereClause(HiveParser.java:45849)
	at org.apache.hadoop.hive.ql.parse.HiveParser.selectStatement(HiveParser.java:41543)
	at org.apache.hadoop.hive.ql.parse.HiveParser.regularBody(HiveParser.java:41402)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpressionBody(HiveParser.java:40413)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpression(HiveParser.java:40283)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1590)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:396)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:308)
	at org.apache.hadoop.hive.ql.Driver.compileInternal(Driver.java:1122)
	at org.apache.hadoop.hive.ql.Driver.runInternal(Driver.java:1170)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:1059)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:1049)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:429)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)
	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)
	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)
	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)
	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)
	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)
	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)
	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)
	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 0997 golden answer for query:[0m
[31m  Error: FAILED: ParseException line 1:111 cannot recognize input near '|' ''Materials '' '|' in expression specification[0m
[31m  org.apache.spark.sql.execution.QueryExecutionException: FAILED: ParseException line 1:111 cannot recognize input near '|' ''Materials '' '|' in expression specification[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:433)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  SELECT COUNT(*) FROM CONTACTS WHERE DESCRIPTION = 'Harry works in the Redundancy Automation Division of the ' || 'Materials ' || 'Blasting Laboratory in the National Cattle Acceleration ' || 'Project of ' || 'lower Michigan.  His job is to document the trajectory of ' || 'cattle and ' || 'correlate the loft and acceleration versus the quality of ' || 'materials ' || 'used in the trebuchet.  He served ten years as the ' || 'vice-president in ' || 'charge of marketing in the now defunct milk trust of the ' || 'Pennsylvania ' || 'Coalition of All Things Bovine.  Prior to that he ' || 'established himself ' || 'as a world-class graffiti artist and source of all good ' || 'bits related ' || 'to channel dredging in poor weather.  He is author of over ' || 'ten thousand ' || 'paperback novels, including such titles as "How Many ' || 'Pumpkins will Fit ' || 'on the Head of a Pin," "A Whole Bunch of Useless Things ' || 'that you Don''t ' || 'Want to Know," and "How to Lift Heavy Things Over your ' || 'Head without ' || 'Hurting Yourself or Dropping Them."  He attends ANSI and ' || 'ISO standards ' || 'meetings in his copious free time and funds the development ' || 'of test ' || 'suites with his pocket change.' AND KEYWORDS = 'aardvark albatross nutmeg redundancy ' || 'automation materials blasting ' || 'cattle acceleration trebuchet catapult ' || 'loft coffee java sendmail SMTP ' || 'FTP HTTP censorship expletive senility ' || 'extortion distortion conformity ' || 'conformance nachos chicks goslings ' || 'ducklings honk quack melatonin tie ' || 'noose circulation column default ' || 'ionic doric chlorine guanine Guam ' || 'invasions rubicon helmet plastics ' || 'recycle HDPE nylon ceramics plumbing ' || 'parachute zeppelin carbon hydrogen ' || 'vinegar sludge asphalt adhesives ' || 'tensile magnetic Ellesmere Greenland ' || 'Knud Rasmussen precession ' || 'navigation positioning orbit altitude ' || 'resistance radiation levitation ' || 'yoga demiurge election violence ' || 'collapsed fusion cryogenics gravity ' || 'sincerity idiocy budget accounting ' || 'auditing titanium torque pressure ' || 'fragile hernia muffler cartilage ' || 'graphics deblurring headache eyestrain ' || 'interlace bandwidth resolution ' || 'determination steroids barrel oak wine ' || 'ferment yeast brewing bock siphon ' || 'clarity impurities SQL RBAC data ' || 'warehouse security integrity feedback' (HiveComparisonTest.scala:343)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CONTACTS WHERE DESCRIPTION LIKE '%change.' AND KEYWORDS LIKE '%feedback'
[32m- 0998[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CONTACTS WHERE DESCRIPTION = N'Harry works in the Redundancy Automation Division of the ' || 'Materials ' || 'Blasting Laboratory in the National Cattle Acceleration ' || 'Project of ' || 'lower Michigan.  His job is to document the trajectory of ' || 'cattle and ' || 'correlate the loft and acceleration versus the quality of ' || 'materials ' || 'used in the trebuchet.  He served ten years as the ' || 'vice-president in ' || 'charge of marketing in the now defunct milk trust of the ' || 'Pennsylvania ' || 'Coalition of All Things Bovine.  Prior to that he ' || 'established himself ' || 'as a world-class gra' AND KEYWORDS = N'aardvark albatross nutmeg redundancy ' || 'automation materials blasting ' || 'cattle acceleration trebuchet catapult ' || 'loft coffee java sendmail SMTP ' || 'FTP HTTP censorship expletive senility ' || 'extortion distortion conformity ' || 'conformance nachos chicks goslings ' || 'ducklings honk quack melatonin tie ' || 'noose circulation column default ' || 'ionic doric chlorine guanine Guam ' || 'invasions rubicon helmet plastics ' || 'recycle HDPE nylon ceramics plumbing ' || 'parachute zeppelin carbon hydrogen ' || 'vinegar sludge asphalt adhesives ' || 'tensile magnetic'
NoViableAltException(313@[323:1: atomExpression : ( ( KW_NULL )=> KW_NULL -> TOK_NULL | ( constant )=> constant | castExpression | caseExpression | whenExpression | ( functionName LPAREN )=> function | tableOrColumn | LPAREN ! expression RPAREN !);])
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser$DFA32.specialStateTransition(HiveParser_IdentifiersParser.java)
	at org.antlr.runtime.DFA.predict(DFA.java:80)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.atomExpression(HiveParser_IdentifiersParser.java:6177)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceFieldExpression(HiveParser_IdentifiersParser.java:6383)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceUnaryPrefixExpression(HiveParser_IdentifiersParser.java:6768)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceUnarySuffixExpression(HiveParser_IdentifiersParser.java:6828)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceBitwiseXorExpression(HiveParser_IdentifiersParser.java:7012)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceStarExpression(HiveParser_IdentifiersParser.java:7172)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedencePlusExpression(HiveParser_IdentifiersParser.java:7332)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceAmpersandExpression(HiveParser_IdentifiersParser.java:7483)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceBitwiseOrExpression(HiveParser_IdentifiersParser.java:7634)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceEqualExpression(HiveParser_IdentifiersParser.java:8290)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceNotExpression(HiveParser_IdentifiersParser.java:9177)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceAndExpression(HiveParser_IdentifiersParser.java:9296)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceOrExpression(HiveParser_IdentifiersParser.java:9455)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.expression(HiveParser_IdentifiersParser.java:6105)
	at org.apache.hadoop.hive.ql.parse.HiveParser.expression(HiveParser.java:45846)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.searchCondition(HiveParser_FromClauseParser.java:6637)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.whereClause(HiveParser_FromClauseParser.java:6545)
	at org.apache.hadoop.hive.ql.parse.HiveParser.whereClause(HiveParser.java:45849)
	at org.apache.hadoop.hive.ql.parse.HiveParser.selectStatement(HiveParser.java:41543)
	at org.apache.hadoop.hive.ql.parse.HiveParser.regularBody(HiveParser.java:41402)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpressionBody(HiveParser.java:40413)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpression(HiveParser.java:40283)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1590)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:396)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:308)
	at org.apache.hadoop.hive.ql.Driver.compileInternal(Driver.java:1122)
	at org.apache.hadoop.hive.ql.Driver.runInternal(Driver.java:1170)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:1059)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:1049)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:429)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)
	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)
	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)
	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)
	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)
	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)
	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)
	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)
	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 0999 golden answer for query:[0m
[31m  Error: FAILED: ParseException line 1:51 cannot recognize input near 'N' ''Harry works in the Redundancy Automation Division of the '' '|' in expression specification[0m
[31m  org.apache.spark.sql.execution.QueryExecutionException: FAILED: ParseException line 1:51 cannot recognize input near 'N' ''Harry works in the Redundancy Automation Division of the '' '|' in expression specification[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:433)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  SELECT COUNT(*) FROM CONTACTS WHERE DESCRIPTION = N'Harry works in the Redundancy Automation Division of the ' || 'Materials ' || 'Blasting Laboratory in the National Cattle Acceleration ' || 'Project of ' || 'lower Michigan.  His job is to document the trajectory of ' || 'cattle and ' || 'correlate the loft and acceleration versus the quality of ' || 'materials ' || 'used in the trebuchet.  He served ten years as the ' || 'vice-president in ' || 'charge of marketing in the now defunct milk trust of the ' || 'Pennsylvania ' || 'Coalition of All Things Bovine.  Prior to that he ' || 'established himself ' || 'as a world-class gra' AND KEYWORDS = N'aardvark albatross nutmeg redundancy ' || 'automation materials blasting ' || 'cattle acceleration trebuchet catapult ' || 'loft coffee java sendmail SMTP ' || 'FTP HTTP censorship expletive senility ' || 'extortion distortion conformity ' || 'conformance nachos chicks goslings ' || 'ducklings honk quack melatonin tie ' || 'noose circulation column default ' || 'ionic doric chlorine guanine Guam ' || 'invasions rubicon helmet plastics ' || 'recycle HDPE nylon ceramics plumbing ' || 'parachute zeppelin carbon hydrogen ' || 'vinegar sludge asphalt adhesives ' || 'tensile magnetic' (HiveComparisonTest.scala:343)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM CONTACTS WHERE DESCRIPTION = N'Harry works in the Redundancy Automation Division of the ' || 'Materials ' || 'Blasting Laboratory in the National Cattle Acceleration ' || 'Project of ' || 'lower Michigan.  His job is to document the trajectory of ' || 'cattle and ' || 'correlate the loft and acceleration versus the quality of ' || 'materials ' || 'used in the trebuchet.  He served ten years as the ' || 'vice-president in ' || 'charge of marketing in the now defunct milk trust of the ' || 'Pennsylvania ' || 'Coalition of All Things Bovine.  Prior to that he ' || 'established himself ' || 'as a world-class gra' AND KEYWORDS = N'aardvark albatross nutmeg redundancy ' || 'automation materials blasting ' || 'cattle acceleration trebuchet catapult ' || 'loft coffee java sendmail SMTP ' || 'FTP HTTP censorship expletive senility ' || 'extortion distortion conformity ' || 'conformance nachos chicks goslings ' || 'ducklings honk quack melatonin tie ' || 'noose circulation column default ' || 'ionic doric chlorine guanine Guam ' || 'invasions rubicon helmet plastics ' || 'recycle HDPE nylon ceramics plumbing ' || 'parachute zeppelin carbon hydrogen ' || 'vinegar sludge asphalt adhesives ' || 'tensile magnetic'
NoViableAltException(313@[323:1: atomExpression : ( ( KW_NULL )=> KW_NULL -> TOK_NULL | ( constant )=> constant | castExpression | caseExpression | whenExpression | ( functionName LPAREN )=> function | tableOrColumn | LPAREN ! expression RPAREN !);])
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser$DFA32.specialStateTransition(HiveParser_IdentifiersParser.java)
	at org.antlr.runtime.DFA.predict(DFA.java:80)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.atomExpression(HiveParser_IdentifiersParser.java:6177)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceFieldExpression(HiveParser_IdentifiersParser.java:6383)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceUnaryPrefixExpression(HiveParser_IdentifiersParser.java:6768)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceUnarySuffixExpression(HiveParser_IdentifiersParser.java:6828)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceBitwiseXorExpression(HiveParser_IdentifiersParser.java:7012)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceStarExpression(HiveParser_IdentifiersParser.java:7172)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedencePlusExpression(HiveParser_IdentifiersParser.java:7332)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceAmpersandExpression(HiveParser_IdentifiersParser.java:7483)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceBitwiseOrExpression(HiveParser_IdentifiersParser.java:7634)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceEqualExpression(HiveParser_IdentifiersParser.java:8290)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceNotExpression(HiveParser_IdentifiersParser.java:9177)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceAndExpression(HiveParser_IdentifiersParser.java:9296)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.precedenceOrExpression(HiveParser_IdentifiersParser.java:9455)
	at org.apache.hadoop.hive.ql.parse.HiveParser_IdentifiersParser.expression(HiveParser_IdentifiersParser.java:6105)
	at org.apache.hadoop.hive.ql.parse.HiveParser.expression(HiveParser.java:45846)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.searchCondition(HiveParser_FromClauseParser.java:6637)
	at org.apache.hadoop.hive.ql.parse.HiveParser_FromClauseParser.whereClause(HiveParser_FromClauseParser.java:6545)
	at org.apache.hadoop.hive.ql.parse.HiveParser.whereClause(HiveParser.java:45849)
	at org.apache.hadoop.hive.ql.parse.HiveParser.selectStatement(HiveParser.java:41543)
	at org.apache.hadoop.hive.ql.parse.HiveParser.regularBody(HiveParser.java:41402)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpressionBody(HiveParser.java:40413)
	at org.apache.hadoop.hive.ql.parse.HiveParser.queryStatementExpression(HiveParser.java:40283)
	at org.apache.hadoop.hive.ql.parse.HiveParser.execStatement(HiveParser.java:1590)
	at org.apache.hadoop.hive.ql.parse.HiveParser.statement(HiveParser.java:1109)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:202)
	at org.apache.hadoop.hive.ql.parse.ParseDriver.parse(ParseDriver.java:166)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:396)
	at org.apache.hadoop.hive.ql.Driver.compile(Driver.java:308)
	at org.apache.hadoop.hive.ql.Driver.compileInternal(Driver.java:1122)
	at org.apache.hadoop.hive.ql.Driver.runInternal(Driver.java:1170)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:1059)
	at org.apache.hadoop.hive.ql.Driver.run(Driver.java:1049)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:429)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)
	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)
	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)
	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)
	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)
	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)
	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)
	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)
	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)
	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)
	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)
	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)
	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)
	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)
	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)
	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)
	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)
	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)
	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)
	at org.scalatest.Suite$class.run(Suite.scala:1421)
	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)
	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)
	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)
	at org.scalatest.tools.Runner$.main(Runner.scala:860)
	at org.scalatest.tools.Runner.main(Runner.scala)
[31m- 1001 golden answer for query:[0m
[31m  Error: FAILED: ParseException line 1:51 cannot recognize input near 'N' ''Harry works in the Redundancy Automation Division of the '' '|' in expression specification[0m
[31m  org.apache.spark.sql.execution.QueryExecutionException: FAILED: ParseException line 1:51 cannot recognize input near 'N' ''Harry works in the Redundancy Automation Division of the '' '|' in expression specification[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:433)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$runHive$1.apply(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper$$anonfun$withHiveState$1.apply(ClientWrapper.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.retryLocked(ClientWrapper.scala:211)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.withHiveState(ClientWrapper.scala:248)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runHive(ClientWrapper.scala:418)[0m
[31m  	at org.apache.spark.sql.hive.client.ClientWrapper.runSqlHive(ClientWrapper.scala:408)[0m
[31m  	at org.apache.spark.sql.hive.HiveContext.runSqlHive(HiveContext.scala:558)[0m
[31m  	at org.apache.spark.sql.hive.test.TestHiveContext.runSqlHive(TestHive.scala:111)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:323)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1$$anonfun$32.apply(HiveComparisonTest.scala:308)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:37)[0m
[31m  	at scala.runtime.Tuple3Zipped$$anonfun$map$extension$1.apply(Tuple3Zipped.scala:35)[0m
[31m  	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[31m  	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)[0m
[31m  	at scala.runtime.Tuple3Zipped$.map$extension(Tuple3Zipped.scala:35)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply$mcV$sp(HiveComparisonTest.scala:308)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest$$anonfun$createQueryTest$1.apply(HiveComparisonTest.scala:240)[0m
[31m  	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m
[31m  	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m
[31m  	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:22)[0m
[31m  	at org.scalatest.Transformer.apply(Transformer.scala:20)[0m
[31m  	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:166)[0m
[31m  	at org.apache.spark.SparkFunSuite.withFixture(SparkFunSuite.scala:42)[0m
[31m  	at org.scalatest.FunSuiteLike$class.invokeWithFixture$1(FunSuiteLike.scala:163)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTest$1.apply(FunSuiteLike.scala:175)[0m
[31m  	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTest(FunSuiteLike.scala:175)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.runTest(BeforeAndAfter.scala:200)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.runTest(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$runTests$1.apply(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)[0m
[31m  	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)[0m
[31m  	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)[0m
[31m  	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)[0m
[31m  	at org.scalatest.FunSuiteLike$class.runTests(FunSuiteLike.scala:208)[0m
[31m  	at org.scalatest.FunSuite.runTests(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1424)[0m
[31m  	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1555)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.FunSuiteLike$$anonfun$run$1.apply(FunSuiteLike.scala:212)[0m
[31m  	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)[0m
[31m  	at org.scalatest.FunSuiteLike$class.run(FunSuiteLike.scala:212)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveComparisonTest.org$scalatest$BeforeAndAfterAll$$super$run(HiveComparisonTest.scala:44)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.liftedTree1$1(BeforeAndAfterAll.scala:257)[0m
[31m  	at org.scalatest.BeforeAndAfterAll$class.run(BeforeAndAfterAll.scala:256)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.org$scalatest$BeforeAndAfter$$super$run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.BeforeAndAfter$class.run(BeforeAndAfter.scala:241)[0m
[31m  	at org.apache.spark.sql.hive.execution.HiveCompatibilitySuite.run(HiveCompatibilitySuite.scala:32)[0m
[31m  	at org.scalatest.Suite$class.callExecuteOnSuite$1(Suite.scala:1492)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1528)[0m
[31m  	at org.scalatest.Suite$$anonfun$runNestedSuites$1.apply(Suite.scala:1526)[0m
[31m  	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)[0m
[31m  	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)[0m
[31m  	at org.scalatest.Suite$class.runNestedSuites(Suite.scala:1526)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.runNestedSuites(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.Suite$class.run(Suite.scala:1421)[0m
[31m  	at org.scalatest.tools.DiscoverySuite.run(DiscoverySuite.scala:29)[0m
[31m  	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:55)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2563)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$doRunRunRunDaDoRunRun$3.apply(Runner.scala:2557)[0m
[31m  	at scala.collection.immutable.List.foreach(List.scala:318)[0m
[31m  	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:2557)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1044)[0m
[31m  	at org.scalatest.tools.Runner$$anonfun$runOptionallyWithPassFailReporter$2.apply(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:2722)[0m
[31m  	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1043)[0m
[31m  	at org.scalatest.tools.Runner$.main(Runner.scala:860)[0m
[31m  	at org.scalatest.tools.Runner.main(Runner.scala)[0m
  
[31m  SELECT COUNT(*) FROM CONTACTS WHERE DESCRIPTION = N'Harry works in the Redundancy Automation Division of the ' || 'Materials ' || 'Blasting Laboratory in the National Cattle Acceleration ' || 'Project of ' || 'lower Michigan.  His job is to document the trajectory of ' || 'cattle and ' || 'correlate the loft and acceleration versus the quality of ' || 'materials ' || 'used in the trebuchet.  He served ten years as the ' || 'vice-president in ' || 'charge of marketing in the now defunct milk trust of the ' || 'Pennsylvania ' || 'Coalition of All Things Bovine.  Prior to that he ' || 'established himself ' || 'as a world-class gra' AND KEYWORDS = N'aardvark albatross nutmeg redundancy ' || 'automation materials blasting ' || 'cattle acceleration trebuchet catapult ' || 'loft coffee java sendmail SMTP ' || 'FTP HTTP censorship expletive senility ' || 'extortion distortion conformity ' || 'conformance nachos chicks goslings ' || 'ducklings honk quack melatonin tie ' || 'noose circulation column default ' || 'ionic doric chlorine guanine Guam ' || 'invasions rubicon helmet plastics ' || 'recycle HDPE nylon ceramics plumbing ' || 'parachute zeppelin carbon hydrogen ' || 'vinegar sludge asphalt adhesives ' || 'tensile magnetic' (HiveComparisonTest.scala:343)[0m
Calcite parsing passed, start to transform. SELECT C1 FROM NOMAIL WHERE C1 > 0
Calcite parsing passed, start to transform. SELECT C1 FROM NOMAIL WHERE C1 > 0
Calcite parsing passed, start to transform. SELECT C1 FROM NOMAIL WHERE C1 > 0
[31m- 1003 match for 1003:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('C1)][0m
[31m   'Filter ('C1 > 0)[0m
[31m    'UnresolvedRelation [NOMAIL], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double[0m
[31m  Project [C1#65672][0m
[31m   Filter (C1#65672 > cast(0 as double))[0m
[31m    MetastoreRelation FLATER, nomail, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [C1#65672][0m
[31m   Filter (C1#65672 > 0.0)[0m
[31m    MetastoreRelation FLATER, nomail, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (C1#65672 > 0.0)[0m
[31m   HiveTableScan [C1#65672], (MetastoreRelation FLATER, nomail, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1[0m
[31m  !== HIVE - 22 row(s) ==   == CATALYST - 22 row(s) ==[0m
[31m  !2147483634               2.147483634E9[0m
[31m  !2147483635               2.147483635E9[0m
[31m  !2147483636               2.147483636E9[0m
[31m  !2147483636               2.147483636E9[0m
[31m  !2147483637               2.147483637E9[0m
[31m  !2147483637               2.147483637E9[0m
[31m  !2147483638               2.147483638E9[0m
[31m  !2147483638               2.147483638E9[0m
[31m  !2147483639               2.147483639E9[0m
[31m  !2147483639               2.147483639E9[0m
[31m  !2147483640               2.147483641E9[0m
[31m  !2147483640               2.147483641E9[0m
[31m  !2147483641               2.147483642E9[0m
[31m  !2147483641               2.147483642E9[0m
[31m  !2147483642               2.147483643E9[0m
[31m  !2147483642               2.147483643E9[0m
[31m  !2147483643               2.147483644E9[0m
[31m  !2147483643               2.147483645E9[0m
[31m  !2147483644               2.147483646E9[0m
[31m  !2147483645               2.147483647E9[0m
[31m  !2147483646               2.14748364E9[0m
[31m  !2147483647               2.14748364E9 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1 FROM NOMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 FROM NOMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 FROM NOMAIL WHERE C1 < 0
[31m- 1004 match for 1004:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('C1)][0m
[31m   'Filter ('C1 < 0)[0m
[31m    'UnresolvedRelation [NOMAIL], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double[0m
[31m  Project [C1#65850][0m
[31m   Filter (C1#65850 < cast(0 as double))[0m
[31m    MetastoreRelation FLATER, nomail, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [C1#65850][0m
[31m   Filter (C1#65850 < 0.0)[0m
[31m    MetastoreRelation FLATER, nomail, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (C1#65850 < 0.0)[0m
[31m   HiveTableScan [C1#65850], (MetastoreRelation FLATER, nomail, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1[0m
[31m  !== HIVE - 2 row(s) ==   == CATALYST - 2 row(s) ==[0m
[31m  !-2                      -2.0[0m
[31m  !-2147483647             -2.147483647E9 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1 - 2147483646 FROM NOMAIL WHERE C1 > 0
Calcite parsing passed, start to transform. SELECT C1 - 2147483646 FROM NOMAIL WHERE C1 > 0
Calcite parsing passed, start to transform. SELECT C1 - 2147483646 FROM NOMAIL WHERE C1 > 0
[31m- 1005 match for 1005:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(('C1 - 2147483646))][0m
[31m   'Filter ('C1 > 0)[0m
[31m    'UnresolvedRelation [NOMAIL], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double[0m
[31m  Project [(C1#66028 - cast(2147483646 as double)) AS _c0#66029][0m
[31m   Filter (C1#66028 > cast(0 as double))[0m
[31m    MetastoreRelation FLATER, nomail, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [(C1#66028 - 2.147483646E9) AS _c0#66029][0m
[31m   Filter (C1#66028 > 0.0)[0m
[31m    MetastoreRelation FLATER, nomail, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [(C1#66028 - 2.147483646E9) AS _c0#66029][0m
[31m   Filter (C1#66028 > 0.0)[0m
[31m    HiveTableScan [C1#66028], (MetastoreRelation FLATER, nomail, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 22 row(s) ==   == CATALYST - 22 row(s) ==[0m
[31m  !-1                       -1.0[0m
[31m  !-10                      -10.0[0m
[31m  !-10                      -10.0[0m
[31m  !-11                      -11.0[0m
[31m  !-12                      -12.0[0m
[31m  !-2                       -2.0[0m
[31m  !-3                       -3.0[0m
[31m  !-3                       -3.0[0m
[31m  !-4                       -4.0[0m
[31m  !-4                       -4.0[0m
[31m  !-5                       -5.0[0m
[31m  !-5                       -5.0[0m
[31m  !-6                       -6.0[0m
[31m  !-6                       -6.0[0m
[31m  !-7                       -7.0[0m
[31m  !-7                       -7.0[0m
[31m  !-8                       -8.0[0m
[31m  !-8                       -8.0[0m
[31m  !-9                       -9.0[0m
[31m  !-9                       -9.0[0m
[31m  !0                        0.0[0m
[31m  !1                        1.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1 + 2147483646 FROM NOMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 + 2147483646 FROM NOMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 + 2147483646 FROM NOMAIL WHERE C1 < 0
[31m- 1006 match for 1006:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(('C1 + 2147483646))][0m
[31m   'Filter ('C1 < 0)[0m
[31m    'UnresolvedRelation [NOMAIL], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double[0m
[31m  Project [(C1#66209 + cast(2147483646 as double)) AS _c0#66210][0m
[31m   Filter (C1#66209 < cast(0 as double))[0m
[31m    MetastoreRelation FLATER, nomail, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [(C1#66209 + 2.147483646E9) AS _c0#66210][0m
[31m   Filter (C1#66209 < 0.0)[0m
[31m    MetastoreRelation FLATER, nomail, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [(C1#66209 + 2.147483646E9) AS _c0#66210][0m
[31m   Filter (C1#66209 < 0.0)[0m
[31m    HiveTableScan [C1#66209], (MetastoreRelation FLATER, nomail, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 2 row(s) ==   == CATALYST - 2 row(s) ==[0m
[31m  !-1                      -1.0[0m
[31m  !2147483644              2.147483644E9 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1 FROM NOMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 FROM NOMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 FROM NOMAIL WHERE C1 < 0
[31m- 1007 match for 1007:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('C1)][0m
[31m   'Filter ('C1 < 0)[0m
[31m    'UnresolvedRelation [NOMAIL], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double[0m
[31m  Project [C1#66390][0m
[31m   Filter (C1#66390 < cast(0 as double))[0m
[31m    MetastoreRelation FLATER, nomail, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [C1#66390][0m
[31m   Filter (C1#66390 < 0.0)[0m
[31m    MetastoreRelation FLATER, nomail, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (C1#66390 < 0.0)[0m
[31m   HiveTableScan [C1#66390], (MetastoreRelation FLATER, nomail, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !-1                      -1.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NOMAIL WHERE C1 = 2147483645
[32m- 1008[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NOMAIL WHERE C1 = 2147483646
[32m- 1009[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM NOMAIL WHERE C1 = 2147483647
[32m- 1010[0m
Calcite parsing passed, start to transform. SELECT C1 FROM YESMAIL WHERE C1 > 0
Calcite parsing passed, start to transform. SELECT C1 FROM YESMAIL WHERE C1 > 0
Calcite parsing passed, start to transform. SELECT C1 FROM YESMAIL WHERE C1 > 0
[31m- 1011 match for 1011:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('C1)][0m
[31m   'Filter ('C1 > 0)[0m
[31m    'UnresolvedRelation [YESMAIL], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double[0m
[31m  Project [C1#66841][0m
[31m   Filter (C1#66841 > cast(0 as double))[0m
[31m    MetastoreRelation FLATER, yesmail, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [C1#66841][0m
[31m   Filter (C1#66841 > 0.0)[0m
[31m    MetastoreRelation FLATER, yesmail, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (C1#66841 > 0.0)[0m
[31m   HiveTableScan [C1#66841], (MetastoreRelation FLATER, yesmail, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1[0m
[31m  !== HIVE - 22 row(s) ==   == CATALYST - 22 row(s) ==[0m
[31m  !32754                    32754.0[0m
[31m  !32755                    32755.0[0m
[31m  !32756                    32756.0[0m
[31m  !32756                    32756.0[0m
[31m  !32757                    32757.0[0m
[31m  !32757                    32757.0[0m
[31m  !32758                    32758.0[0m
[31m  !32758                    32758.0[0m
[31m  !32759                    32759.0[0m
[31m  !32759                    32759.0[0m
[31m  !32760                    32760.0[0m
[31m  !32760                    32760.0[0m
[31m  !32761                    32761.0[0m
[31m  !32761                    32761.0[0m
[31m  !32762                    32762.0[0m
[31m  !32762                    32762.0[0m
[31m  !32763                    32763.0[0m
[31m  !32763                    32763.0[0m
[31m  !32764                    32764.0[0m
[31m  !32765                    32765.0[0m
[31m  !32766                    32766.0[0m
[31m  !32767                    32767.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1 FROM YESMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 FROM YESMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 FROM YESMAIL WHERE C1 < 0
[31m- 1012 match for 1012:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('C1)][0m
[31m   'Filter ('C1 < 0)[0m
[31m    'UnresolvedRelation [YESMAIL], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double[0m
[31m  Project [C1#67019][0m
[31m   Filter (C1#67019 < cast(0 as double))[0m
[31m    MetastoreRelation FLATER, yesmail, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [C1#67019][0m
[31m   Filter (C1#67019 < 0.0)[0m
[31m    MetastoreRelation FLATER, yesmail, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (C1#67019 < 0.0)[0m
[31m   HiveTableScan [C1#67019], (MetastoreRelation FLATER, yesmail, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1[0m
[31m  !== HIVE - 2 row(s) ==   == CATALYST - 2 row(s) ==[0m
[31m  !-2                      -2.0[0m
[31m  !-32767                  -32767.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1 - 32766 FROM YESMAIL WHERE C1 > 0
Calcite parsing passed, start to transform. SELECT C1 - 32766 FROM YESMAIL WHERE C1 > 0
Calcite parsing passed, start to transform. SELECT C1 - 32766 FROM YESMAIL WHERE C1 > 0
[31m- 1013 match for 1013:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(('C1 - 32766))][0m
[31m   'Filter ('C1 > 0)[0m
[31m    'UnresolvedRelation [YESMAIL], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double[0m
[31m  Project [(C1#67197 - cast(32766 as double)) AS _c0#67198][0m
[31m   Filter (C1#67197 > cast(0 as double))[0m
[31m    MetastoreRelation FLATER, yesmail, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [(C1#67197 - 32766.0) AS _c0#67198][0m
[31m   Filter (C1#67197 > 0.0)[0m
[31m    MetastoreRelation FLATER, yesmail, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [(C1#67197 - 32766.0) AS _c0#67198][0m
[31m   Filter (C1#67197 > 0.0)[0m
[31m    HiveTableScan [C1#67197], (MetastoreRelation FLATER, yesmail, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 22 row(s) ==   == CATALYST - 22 row(s) ==[0m
[31m  !-1                       -1.0[0m
[31m  !-10                      -10.0[0m
[31m  !-10                      -10.0[0m
[31m  !-11                      -11.0[0m
[31m  !-12                      -12.0[0m
[31m  !-2                       -2.0[0m
[31m  !-3                       -3.0[0m
[31m  !-3                       -3.0[0m
[31m  !-4                       -4.0[0m
[31m  !-4                       -4.0[0m
[31m  !-5                       -5.0[0m
[31m  !-5                       -5.0[0m
[31m  !-6                       -6.0[0m
[31m  !-6                       -6.0[0m
[31m  !-7                       -7.0[0m
[31m  !-7                       -7.0[0m
[31m  !-8                       -8.0[0m
[31m  !-8                       -8.0[0m
[31m  !-9                       -9.0[0m
[31m  !-9                       -9.0[0m
[31m  !0                        0.0[0m
[31m  !1                        1.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1 + 32766 FROM YESMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 + 32766 FROM YESMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 + 32766 FROM YESMAIL WHERE C1 < 0
[31m- 1014 match for 1014:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias(('C1 + 32766))][0m
[31m   'Filter ('C1 < 0)[0m
[31m    'UnresolvedRelation [YESMAIL], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double[0m
[31m  Project [(C1#67378 + cast(32766 as double)) AS _c0#67379][0m
[31m   Filter (C1#67378 < cast(0 as double))[0m
[31m    MetastoreRelation FLATER, yesmail, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [(C1#67378 + 32766.0) AS _c0#67379][0m
[31m   Filter (C1#67378 < 0.0)[0m
[31m    MetastoreRelation FLATER, yesmail, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Project [(C1#67378 + 32766.0) AS _c0#67379][0m
[31m   Filter (C1#67378 < 0.0)[0m
[31m    HiveTableScan [C1#67378], (MetastoreRelation FLATER, yesmail, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0[0m
[31m  !== HIVE - 2 row(s) ==   == CATALYST - 2 row(s) ==[0m
[31m  !-1                      -1.0[0m
[31m  !32764                   32764.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT C1 FROM YESMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 FROM YESMAIL WHERE C1 < 0
Calcite parsing passed, start to transform. SELECT C1 FROM YESMAIL WHERE C1 < 0
[31m- 1015 match for 1015:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('C1)][0m
[31m   'Filter ('C1 < 0)[0m
[31m    'UnresolvedRelation [YESMAIL], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double[0m
[31m  Project [C1#67559][0m
[31m   Filter (C1#67559 < cast(0 as double))[0m
[31m    MetastoreRelation FLATER, yesmail, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [C1#67559][0m
[31m   Filter (C1#67559 < 0.0)[0m
[31m    MetastoreRelation FLATER, yesmail, None[0m
  
[31m  == Physical Plan ==[0m
[31m  Filter (C1#67559 < 0.0)[0m
[31m   HiveTableScan [C1#67559], (MetastoreRelation FLATER, yesmail, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1[0m
[31m  !== HIVE - 1 row(s) ==   == CATALYST - 1 row(s) ==[0m
[31m  !-1                      -1.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM YESMAIL WHERE C1 = 32765
[32m- 1016[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM YESMAIL WHERE C1 = 32766
[32m- 1017[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM YESMAIL WHERE C1 = 32767
[32m- 1018[0m
Calcite parsing passed, start to transform. SELECT C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31, C32, C33, C34, C35, C36, C37, C38, C39, C40, C41, C42, C43, C44, C45, C46, C47, C48, C49, C50, C51, C52, C53, C54, C55, C56, C57, C58, C59, C60, C61, C62, C63, C64, C65, C66, C67, C68, C69, C70, C71, C72, C73, C74, C75, C76, C77, C78, C79, C80, C81, C82, C83, C84, C85, C86, C87, C88, C89, C90, C91, C92, C93, C94, C95, C96, C97, C98, C99, C100, C101, C102, C103, C104, C105, C106, C107, C108, C109, C110, C111, C112, C113, C114, C115, C116, C117, C118, C119, C120, C121, C122, C123, C124, C125, C126, C127, C128, C129, C130, C131, C132, C133, C134, C135, C136, C137, C138, C139, C140, C141, C142, C143, C144, C145, C146, C147, C148, C149, C150, C151, C152, C153, C154, C155, C156, C157, C158, C159, C160, C161, C162, C163, C164, C165, C166, C167, C168, C169, C170, C171, C172, C173, C174, C175, C176, C177, C178, C179, C180, C181, C182, C183, C184, C185, C186, C187, C188, C189, C190, C191, C192, C193, C194, C195, C196, C197, C198, C199, C200, C201, C202, C203, C204, C205, C206, C207, C208, C209, C210, C211, C212, C213, C214, C215, C216, C217, C218, C219, C220, C221, C222, C223, C224, C225, C226, C227, C228, C229, C230, C231, C232, C233, C234, C235, C236, C237, C238, C239, C240, C241, C242, C243, C244, C245, C246, C247, C248, C249, C250 FROM L1
Calcite parsing passed, start to transform. SELECT C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31, C32, C33, C34, C35, C36, C37, C38, C39, C40, C41, C42, C43, C44, C45, C46, C47, C48, C49, C50, C51, C52, C53, C54, C55, C56, C57, C58, C59, C60, C61, C62, C63, C64, C65, C66, C67, C68, C69, C70, C71, C72, C73, C74, C75, C76, C77, C78, C79, C80, C81, C82, C83, C84, C85, C86, C87, C88, C89, C90, C91, C92, C93, C94, C95, C96, C97, C98, C99, C100, C101, C102, C103, C104, C105, C106, C107, C108, C109, C110, C111, C112, C113, C114, C115, C116, C117, C118, C119, C120, C121, C122, C123, C124, C125, C126, C127, C128, C129, C130, C131, C132, C133, C134, C135, C136, C137, C138, C139, C140, C141, C142, C143, C144, C145, C146, C147, C148, C149, C150, C151, C152, C153, C154, C155, C156, C157, C158, C159, C160, C161, C162, C163, C164, C165, C166, C167, C168, C169, C170, C171, C172, C173, C174, C175, C176, C177, C178, C179, C180, C181, C182, C183, C184, C185, C186, C187, C188, C189, C190, C191, C192, C193, C194, C195, C196, C197, C198, C199, C200, C201, C202, C203, C204, C205, C206, C207, C208, C209, C210, C211, C212, C213, C214, C215, C216, C217, C218, C219, C220, C221, C222, C223, C224, C225, C226, C227, C228, C229, C230, C231, C232, C233, C234, C235, C236, C237, C238, C239, C240, C241, C242, C243, C244, C245, C246, C247, C248, C249, C250 FROM L1
Calcite parsing passed, start to transform. SELECT C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C22, C23, C24, C25, C26, C27, C28, C29, C30, C31, C32, C33, C34, C35, C36, C37, C38, C39, C40, C41, C42, C43, C44, C45, C46, C47, C48, C49, C50, C51, C52, C53, C54, C55, C56, C57, C58, C59, C60, C61, C62, C63, C64, C65, C66, C67, C68, C69, C70, C71, C72, C73, C74, C75, C76, C77, C78, C79, C80, C81, C82, C83, C84, C85, C86, C87, C88, C89, C90, C91, C92, C93, C94, C95, C96, C97, C98, C99, C100, C101, C102, C103, C104, C105, C106, C107, C108, C109, C110, C111, C112, C113, C114, C115, C116, C117, C118, C119, C120, C121, C122, C123, C124, C125, C126, C127, C128, C129, C130, C131, C132, C133, C134, C135, C136, C137, C138, C139, C140, C141, C142, C143, C144, C145, C146, C147, C148, C149, C150, C151, C152, C153, C154, C155, C156, C157, C158, C159, C160, C161, C162, C163, C164, C165, C166, C167, C168, C169, C170, C171, C172, C173, C174, C175, C176, C177, C178, C179, C180, C181, C182, C183, C184, C185, C186, C187, C188, C189, C190, C191, C192, C193, C194, C195, C196, C197, C198, C199, C200, C201, C202, C203, C204, C205, C206, C207, C208, C209, C210, C211, C212, C213, C214, C215, C216, C217, C218, C219, C220, C221, C222, C223, C224, C225, C226, C227, C228, C229, C230, C231, C232, C233, C234, C235, C236, C237, C238, C239, C240, C241, C242, C243, C244, C245, C246, C247, C248, C249, C250 FROM L1
[31m- 1019 match for 1019:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('C1),unresolvedalias('C2),unresolvedalias('C3),unresolvedalias('C4),unresolvedalias('C5),unresolvedalias('C6),unresolvedalias('C7),unresolvedalias('C8),unresolvedalias('C9),unresolvedalias('C10),unresolvedalias('C11),unresolvedalias('C12),unresolvedalias('C13),unresolvedalias('C14),unresolvedalias('C15),unresolvedalias('C16),unresolvedalias('C17),unresolvedalias('C18),unresolvedalias('C19),unresolvedalias('C20),unresolvedalias('C21),unresolvedalias('C22),unresolvedalias('C23),unresolvedalias('C24),unresolvedalias('C25),unresolvedalias('C26),unresolvedalias('C27),unresolvedalias('C28),unresolvedalias('C29),unresolvedalias('C30),unresolvedalias('C31),unresolvedalias('C32),unresolvedalias('C33),unresolvedalias('C34),unresolvedalias('C35),unresolvedalias('C36),unresolvedalias('C37),unresolvedalias('C38),unresolvedalias('C39),unresolvedalias('C40),unresolvedalias('C41),unresolvedalias('C42),unresolvedalias('C43),unresolvedalias('C44),unresolvedalias('C45),unresolvedalias('C46),unresolvedalias('C47),unresolvedalias('C48),unresolvedalias('C49),unresolvedalias('C50),unresolvedalias('C51),unresolvedalias('C52),unresolvedalias('C53),unresolvedalias('C54),unresolvedalias('C55),unresolvedalias('C56),unresolvedalias('C57),unresolvedalias('C58),unresolvedalias('C59),unresolvedalias('C60),unresolvedalias('C61),unresolvedalias('C62),unresolvedalias('C63),unresolvedalias('C64),unresolvedalias('C65),unresolvedalias('C66),unresolvedalias('C67),unresolvedalias('C68),unresolvedalias('C69),unresolvedalias('C70),unresolvedalias('C71),unresolvedalias('C72),unresolvedalias('C73),unresolvedalias('C74),unresolvedalias('C75),unresolvedalias('C76),unresolvedalias('C77),unresolvedalias('C78),unresolvedalias('C79),unresolvedalias('C80),unresolvedalias('C81),unresolvedalias('C82),unresolvedalias('C83),unresolvedalias('C84),unresolvedalias('C85),unresolvedalias('C86),unresolvedalias('C87),unresolvedalias('C88),unresolvedalias('C89),unresolvedalias('C90),unresolvedalias('C91),unresolvedalias('C92),unresolvedalias('C93),unresolvedalias('C94),unresolvedalias('C95),unresolvedalias('C96),unresolvedalias('C97),unresolvedalias('C98),unresolvedalias('C99),unresolvedalias('C100),unresolvedalias('C101),unresolvedalias('C102),unresolvedalias('C103),unresolvedalias('C104),unresolvedalias('C105),unresolvedalias('C106),unresolvedalias('C107),unresolvedalias('C108),unresolvedalias('C109),unresolvedalias('C110),unresolvedalias('C111),unresolvedalias('C112),unresolvedalias('C113),unresolvedalias('C114),unresolvedalias('C115),unresolvedalias('C116),unresolvedalias('C117),unresolvedalias('C118),unresolvedalias('C119),unresolvedalias('C120),unresolvedalias('C121),unresolvedalias('C122),unresolvedalias('C123),unresolvedalias('C124),unresolvedalias('C125),unresolvedalias('C126),unresolvedalias('C127),unresolvedalias('C128),unresolvedalias('C129),unresolvedalias('C130),unresolvedalias('C131),unresolvedalias('C132),unresolvedalias('C133),unresolvedalias('C134),unresolvedalias('C135),unresolvedalias('C136),unresolvedalias('C137),unresolvedalias('C138),unresolvedalias('C139),unresolvedalias('C140),unresolvedalias('C141),unresolvedalias('C142),unresolvedalias('C143),unresolvedalias('C144),unresolvedalias('C145),unresolvedalias('C146),unresolvedalias('C147),unresolvedalias('C148),unresolvedalias('C149),unresolvedalias('C150),unresolvedalias('C151),unresolvedalias('C152),unresolvedalias('C153),unresolvedalias('C154),unresolvedalias('C155),unresolvedalias('C156),unresolvedalias('C157),unresolvedalias('C158),unresolvedalias('C159),unresolvedalias('C160),unresolvedalias('C161),unresolvedalias('C162),unresolvedalias('C163),unresolvedalias('C164),unresolvedalias('C165),unresolvedalias('C166),unresolvedalias('C167),unresolvedalias('C168),unresolvedalias('C169),unresolvedalias('C170),unresolvedalias('C171),unresolvedalias('C172),unresolvedalias('C173),unresolvedalias('C174),unresolvedalias('C175),unresolvedalias('C176),unresolvedalias('C177),unresolvedalias('C178),unresolvedalias('C179),unresolvedalias('C180),unresolvedalias('C181),unresolvedalias('C182),unresolvedalias('C183),unresolvedalias('C184),unresolvedalias('C185),unresolvedalias('C186),unresolvedalias('C187),unresolvedalias('C188),unresolvedalias('C189),unresolvedalias('C190),unresolvedalias('C191),unresolvedalias('C192),unresolvedalias('C193),unresolvedalias('C194),unresolvedalias('C195),unresolvedalias('C196),unresolvedalias('C197),unresolvedalias('C198),unresolvedalias('C199),unresolvedalias('C200),unresolvedalias('C201),unresolvedalias('C202),unresolvedalias('C203),unresolvedalias('C204),unresolvedalias('C205),unresolvedalias('C206),unresolvedalias('C207),unresolvedalias('C208),unresolvedalias('C209),unresolvedalias('C210),unresolvedalias('C211),unresolvedalias('C212),unresolvedalias('C213),unresolvedalias('C214),unresolvedalias('C215),unresolvedalias('C216),unresolvedalias('C217),unresolvedalias('C218),unresolvedalias('C219),unresolvedalias('C220),unresolvedalias('C221),unresolvedalias('C222),unresolvedalias('C223),unresolvedalias('C224),unresolvedalias('C225),unresolvedalias('C226),unresolvedalias('C227),unresolvedalias('C228),unresolvedalias('C229),unresolvedalias('C230),unresolvedalias('C231),unresolvedalias('C232),unresolvedalias('C233),unresolvedalias('C234),unresolvedalias('C235),unresolvedalias('C236),unresolvedalias('C237),unresolvedalias('C238),unresolvedalias('C239),unresolvedalias('C240),unresolvedalias('C241),unresolvedalias('C242),unresolvedalias('C243),unresolvedalias('C244),unresolvedalias('C245),unresolvedalias('C246),unresolvedalias('C247),unresolvedalias('C248),unresolvedalias('C249),unresolvedalias('C250)][0m
[31m   'UnresolvedRelation [L1], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  C1: double, C2: double, C3: double, C4: double, C5: double, C6: double, C7: double, C8: double, C9: double, C10: double, C11: double, C12: double, C13: double, C14: double, C15: double, C16: double, C17: double, C18: double, C19: double, C20: double, C21: double, C22: double, C23: double, C24: double, C25: double, C26: double, C27: double, C28: double, C29: double, C30: double, C31: double, C32: double, C33: double, C34: double, C35: double, C36: double, C37: double, C38: double, C39: double, C40: double, C41: double, C42: double, C43: double, C44: double, C45: double, C46: double, C47: double, C48: double, C49: double, C50: double, C51: double, C52: double, C53: double, C54: double, C55: double, C56: double, C57: double, C58: double, C59: double, C60: double, C61: double, C62: double, C63: double, C64: double, C65: double, C66: double, C67: double, C68: double, C69: double, C70: double, C71: double, C72: double, C73: double, C74: double, C75: double, C76: double, C77: double, C78: double, C79: double, C80: double, C81: double, C82: double, C83: double, C84: double, C85: double, C86: double, C87: double, C88: double, C89: double, C90: double, C91: double, C92: double, C93: double, C94: double, C95: double, C96: double, C97: double, C98: double, C99: double, C100: double, C101: double, C102: double, C103: double, C104: double, C105: double, C106: double, C107: double, C108: double, C109: double, C110: double, C111: double, C112: double, C113: double, C114: double, C115: double, C116: double, C117: double, C118: double, C119: double, C120: double, C121: double, C122: double, C123: double, C124: double, C125: double, C126: double, C127: double, C128: double, C129: double, C130: double, C131: double, C132: double, C133: double, C134: double, C135: double, C136: double, C137: double, C138: double, C139: double, C140: double, C141: double, C142: double, C143: double, C144: double, C145: double, C146: double, C147: double, C148: double, C149: double, C150: double, C151: double, C152: double, C153: double, C154: double, C155: double, C156: double, C157: double, C158: double, C159: double, C160: double, C161: double, C162: double, C163: double, C164: double, C165: double, C166: double, C167: double, C168: double, C169: double, C170: double, C171: double, C172: double, C173: double, C174: double, C175: double, C176: double, C177: double, C178: double, C179: double, C180: double, C181: double, C182: double, C183: double, C184: double, C185: double, C186: double, C187: double, C188: double, C189: double, C190: double, C191: double, C192: double, C193: double, C194: double, C195: double, C196: double, C197: double, C198: double, C199: double, C200: double, C201: double, C202: double, C203: double, C204: double, C205: double, C206: double, C207: double, C208: double, C209: double, C210: double, C211: double, C212: double, C213: double, C214: double, C215: double, C216: double, C217: double, C218: double, C219: double, C220: double, C221: double, C222: double, C223: double, C224: double, C225: double, C226: double, C227: double, C228: double, C229: double, C230: double, C231: double, C232: double, C233: double, C234: double, C235: double, C236: double, C237: double, C238: double, C239: double, C240: double, C241: double, C242: double, C243: double, C244: double, C245: double, C246: double, C247: double, C248: double, C249: double, C250: double[0m
[31m  Project [C1#68024,C2#68025,C3#68026,C4#68027,C5#68028,C6#68029,C7#68030,C8#68031,C9#68032,C10#68033,C11#68034,C12#68035,C13#68036,C14#68037,C15#68038,C16#68039,C17#68040,C18#68041,C19#68042,C20#68043,C21#68044,C22#68045,C23#68046,C24#68047,C25#68048,C26#68049,C27#68050,C28#68051,C29#68052,C30#68053,C31#68054,C32#68055,C33#68056,C34#68057,C35#68058,C36#68059,C37#68060,C38#68061,C39#68062,C40#68063,C41#68064,C42#68065,C43#68066,C44#68067,C45#68068,C46#68069,C47#68070,C48#68071,C49#68072,C50#68073,C51#68074,C52#68075,C53#68076,C54#68077,C55#68078,C56#68079,C57#68080,C58#68081,C59#68082,C60#68083,C61#68084,C62#68085,C63#68086,C64#68087,C65#68088,C66#68089,C67#68090,C68#68091,C69#68092,C70#68093,C71#68094,C72#68095,C73#68096,C74#68097,C75#68098,C76#68099,C77#68100,C78#68101,C79#68102,C80#68103,C81#68104,C82#68105,C83#68106,C84#68107,C85#68108,C86#68109,C87#68110,C88#68111,C89#68112,C90#68113,C91#68114,C92#68115,C93#68116,C94#68117,C95#68118,C96#68119,C97#68120,C98#68121,C99#68122,C100#68123,C101#68124,C102#68125,C103#68126,C104#68127,C105#68128,C106#68129,C107#68130,C108#68131,C109#68132,C110#68133,C111#68134,C112#68135,C113#68136,C114#68137,C115#68138,C116#68139,C117#68140,C118#68141,C119#68142,C120#68143,C121#68144,C122#68145,C123#68146,C124#68147,C125#68148,C126#68149,C127#68150,C128#68151,C129#68152,C130#68153,C131#68154,C132#68155,C133#68156,C134#68157,C135#68158,C136#68159,C137#68160,C138#68161,C139#68162,C140#68163,C141#68164,C142#68165,C143#68166,C144#68167,C145#68168,C146#68169,C147#68170,C148#68171,C149#68172,C150#68173,C151#68174,C152#68175,C153#68176,C154#68177,C155#68178,C156#68179,C157#68180,C158#68181,C159#68182,C160#68183,C161#68184,C162#68185,C163#68186,C164#68187,C165#68188,C166#68189,C167#68190,C168#68191,C169#68192,C170#68193,C171#68194,C172#68195,C173#68196,C174#68197,C175#68198,C176#68199,C177#68200,C178#68201,C179#68202,C180#68203,C181#68204,C182#68205,C183#68206,C184#68207,C185#68208,C186#68209,C187#68210,C188#68211,C189#68212,C190#68213,C191#68214,C192#68215,C193#68216,C194#68217,C195#68218,C196#68219,C197#68220,C198#68221,C199#68222,C200#68223,C201#68224,C202#68225,C203#68226,C204#68227,C205#68228,C206#68229,C207#68230,C208#68231,C209#68232,C210#68233,C211#68234,C212#68235,C213#68236,C214#68237,C215#68238,C216#68239,C217#68240,C218#68241,C219#68242,C220#68243,C221#68244,C222#68245,C223#68246,C224#68247,C225#68248,C226#68249,C227#68250,C228#68251,C229#68252,C230#68253,C231#68254,C232#68255,C233#68256,C234#68257,C235#68258,C236#68259,C237#68260,C238#68261,C239#68262,C240#68263,C241#68264,C242#68265,C243#68266,C244#68267,C245#68268,C246#68269,C247#68270,C248#68271,C249#68272,C250#68273][0m
[31m   MetastoreRelation FLATER, l1, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [C1#68024,C2#68025,C3#68026,C4#68027,C5#68028,C6#68029,C7#68030,C8#68031,C9#68032,C10#68033,C11#68034,C12#68035,C13#68036,C14#68037,C15#68038,C16#68039,C17#68040,C18#68041,C19#68042,C20#68043,C21#68044,C22#68045,C23#68046,C24#68047,C25#68048,C26#68049,C27#68050,C28#68051,C29#68052,C30#68053,C31#68054,C32#68055,C33#68056,C34#68057,C35#68058,C36#68059,C37#68060,C38#68061,C39#68062,C40#68063,C41#68064,C42#68065,C43#68066,C44#68067,C45#68068,C46#68069,C47#68070,C48#68071,C49#68072,C50#68073,C51#68074,C52#68075,C53#68076,C54#68077,C55#68078,C56#68079,C57#68080,C58#68081,C59#68082,C60#68083,C61#68084,C62#68085,C63#68086,C64#68087,C65#68088,C66#68089,C67#68090,C68#68091,C69#68092,C70#68093,C71#68094,C72#68095,C73#68096,C74#68097,C75#68098,C76#68099,C77#68100,C78#68101,C79#68102,C80#68103,C81#68104,C82#68105,C83#68106,C84#68107,C85#68108,C86#68109,C87#68110,C88#68111,C89#68112,C90#68113,C91#68114,C92#68115,C93#68116,C94#68117,C95#68118,C96#68119,C97#68120,C98#68121,C99#68122,C100#68123,C101#68124,C102#68125,C103#68126,C104#68127,C105#68128,C106#68129,C107#68130,C108#68131,C109#68132,C110#68133,C111#68134,C112#68135,C113#68136,C114#68137,C115#68138,C116#68139,C117#68140,C118#68141,C119#68142,C120#68143,C121#68144,C122#68145,C123#68146,C124#68147,C125#68148,C126#68149,C127#68150,C128#68151,C129#68152,C130#68153,C131#68154,C132#68155,C133#68156,C134#68157,C135#68158,C136#68159,C137#68160,C138#68161,C139#68162,C140#68163,C141#68164,C142#68165,C143#68166,C144#68167,C145#68168,C146#68169,C147#68170,C148#68171,C149#68172,C150#68173,C151#68174,C152#68175,C153#68176,C154#68177,C155#68178,C156#68179,C157#68180,C158#68181,C159#68182,C160#68183,C161#68184,C162#68185,C163#68186,C164#68187,C165#68188,C166#68189,C167#68190,C168#68191,C169#68192,C170#68193,C171#68194,C172#68195,C173#68196,C174#68197,C175#68198,C176#68199,C177#68200,C178#68201,C179#68202,C180#68203,C181#68204,C182#68205,C183#68206,C184#68207,C185#68208,C186#68209,C187#68210,C188#68211,C189#68212,C190#68213,C191#68214,C192#68215,C193#68216,C194#68217,C195#68218,C196#68219,C197#68220,C198#68221,C199#68222,C200#68223,C201#68224,C202#68225,C203#68226,C204#68227,C205#68228,C206#68229,C207#68230,C208#68231,C209#68232,C210#68233,C211#68234,C212#68235,C213#68236,C214#68237,C215#68238,C216#68239,C217#68240,C218#68241,C219#68242,C220#68243,C221#68244,C222#68245,C223#68246,C224#68247,C225#68248,C226#68249,C227#68250,C228#68251,C229#68252,C230#68253,C231#68254,C232#68255,C233#68256,C234#68257,C235#68258,C236#68259,C237#68260,C238#68261,C239#68262,C240#68263,C241#68264,C242#68265,C243#68266,C244#68267,C245#68268,C246#68269,C247#68270,C248#68271,C249#68272,C250#68273][0m
[31m   MetastoreRelation FLATER, l1, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [C1#68024,C2#68025,C3#68026,C4#68027,C5#68028,C6#68029,C7#68030,C8#68031,C9#68032,C10#68033,C11#68034,C12#68035,C13#68036,C14#68037,C15#68038,C16#68039,C17#68040,C18#68041,C19#68042,C20#68043,C21#68044,C22#68045,C23#68046,C24#68047,C25#68048,C26#68049,C27#68050,C28#68051,C29#68052,C30#68053,C31#68054,C32#68055,C33#68056,C34#68057,C35#68058,C36#68059,C37#68060,C38#68061,C39#68062,C40#68063,C41#68064,C42#68065,C43#68066,C44#68067,C45#68068,C46#68069,C47#68070,C48#68071,C49#68072,C50#68073,C51#68074,C52#68075,C53#68076,C54#68077,C55#68078,C56#68079,C57#68080,C58#68081,C59#68082,C60#68083,C61#68084,C62#68085,C63#68086,C64#68087,C65#68088,C66#68089,C67#68090,C68#68091,C69#68092,C70#68093,C71#68094,C72#68095,C73#68096,C74#68097,C75#68098,C76#68099,C77#68100,C78#68101,C79#68102,C80#68103,C81#68104,C82#68105,C83#68106,C84#68107,C85#68108,C86#68109,C87#68110,C88#68111,C89#68112,C90#68113,C91#68114,C92#68115,C93#68116,C94#68117,C95#68118,C96#68119,C97#68120,C98#68121,C99#68122,C100#68123,C101#68124,C102#68125,C103#68126,C104#68127,C105#68128,C106#68129,C107#68130,C108#68131,C109#68132,C110#68133,C111#68134,C112#68135,C113#68136,C114#68137,C115#68138,C116#68139,C117#68140,C118#68141,C119#68142,C120#68143,C121#68144,C122#68145,C123#68146,C124#68147,C125#68148,C126#68149,C127#68150,C128#68151,C129#68152,C130#68153,C131#68154,C132#68155,C133#68156,C134#68157,C135#68158,C136#68159,C137#68160,C138#68161,C139#68162,C140#68163,C141#68164,C142#68165,C143#68166,C144#68167,C145#68168,C146#68169,C147#68170,C148#68171,C149#68172,C150#68173,C151#68174,C152#68175,C153#68176,C154#68177,C155#68178,C156#68179,C157#68180,C158#68181,C159#68182,C160#68183,C161#68184,C162#68185,C163#68186,C164#68187,C165#68188,C166#68189,C167#68190,C168#68191,C169#68192,C170#68193,C171#68194,C172#68195,C173#68196,C174#68197,C175#68198,C176#68199,C177#68200,C178#68201,C179#68202,C180#68203,C181#68204,C182#68205,C183#68206,C184#68207,C185#68208,C186#68209,C187#68210,C188#68211,C189#68212,C190#68213,C191#68214,C192#68215,C193#68216,C194#68217,C195#68218,C196#68219,C197#68220,C198#68221,C199#68222,C200#68223,C201#68224,C202#68225,C203#68226,C204#68227,C205#68228,C206#68229,C207#68230,C208#68231,C209#68232,C210#68233,C211#68234,C212#68235,C213#68236,C214#68237,C215#68238,C216#68239,C217#68240,C218#68241,C219#68242,C220#68243,C221#68244,C222#68245,C223#68246,C224#68247,C225#68248,C226#68249,C227#68250,C228#68251,C229#68252,C230#68253,C231#68254,C232#68255,C233#68256,C234#68257,C235#68258,C236#68259,C237#68260,C238#68261,C239#68262,C240#68263,C241#68264,C242#68265,C243#68266,C244#68267,C245#68268,C246#68269,C247#68270,C248#68271,C249#68272,C250#68273], (MetastoreRelation FLATER, l1, None)[0m
  
[31m  Code Generation: true[0m
[31m  C1	C2	C3	C4	C5	C6	C7	C8	C9	C10	C11	C12	C13	C14	C15	C16	C17	C18	C19	C20	C21	C22	C23	C24	C25	C26	C27	C28	C29	C30	C31	C32	C33	C34	C35	C36	C37	C38	C39	C40	C41	C42	C43	C44	C45	C46	C47	C48	C49	C50	C51	C52	C53	C54	C55	C56	C57	C58	C59	C60	C61	C62	C63	C64	C65	C66	C67	C68	C69	C70	C71	C72	C73	C74	C75	C76	C77	C78	C79	C80	C81	C82	C83	C84	C85	C86	C87	C88	C89	C90	C91	C92	C93	C94	C95	C96	C97	C98	C99	C100	C101	C102	C103	C104	C105	C106	C107	C108	C109	C110	C111	C112	C113	C114	C115	C116	C117	C118	C119	C120	C121	C122	C123	C124	C125	C126	C127	C128	C129	C130	C131	C132	C133	C134	C135	C136	C137	C138	C139	C140	C141	C142	C143	C144	C145	C146	C147	C148	C149	C150	C151	C152	C153	C154	C155	C156	C157	C158	C159	C160	C161	C162	C163	C164	C165	C166	C167	C168	C169	C170	C171	C172	C173	C174	C175	C176	C177	C178	C179	C180	C181	C182	C183	C184	C185	C186	C187	C188	C189	C190	C191	C192	C193	C194	C195	C196	C197	C198	C199	C200	C201	C202	C203	C204	C205	C206	C207	C208	C209	C210	C211	C212	C213	C214	C215	C216	C217	C218	C219	C220	C221	C222	C223	C224	C225	C226	C227	C228	C229	C230	C231	C232	C233	C234	C235	C236	C237	C238	C239	C240	C241	C242	C243	C244	C245	C246	C247	C248	C249	C250[0m
[31m  !== HIVE - 12 row(srow(s) ==[0m
[31m  !10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252	253	254	255	256	257	258	259      10.0	11.0	12.0	13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0	252.0	253.0	254.0	255.0	256.0	257.0	258.0	259.0[0m
[31m  !11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252	253	254	255	256	257	258	259	260     11.0	12.0	13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0	252.0	253.0	254.0	255.0	256.0	257.0	258.0	259.0	260.0[0m
[31m  !12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252	253	254	255	256	257	258	259	260	261    12.0	13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0	252.0	253.0	254.0	255.0	256.0	257.0	258.0	259.0	260.0	261.0[0m
[31m  !13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252	253	254	255	256	257	258	259	260	261	262   13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0	252.0	253.0	254.0	255.0	256.0	257.0	258.0	259.0	260.0	261.0	262.0[0m
[31m  !2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251                      2.0	3.0	4.0	5.0	6.0	7.0	8.0	9.0	10.0	11.0	12.0	13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0[0m
[31m  !3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252                    3.0	4.0	5.0	6.0	7.0	8.0	9.0	10.0	11.0	12.0	13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0	252.0[0m
[31m  !4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252	253                  4.0	5.0	6.0	7.0	8.0	9.0	10.0	11.0	12.0	13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0	252.0	253.0[0m
[31m  !5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252	253	254                5.0	6.0	7.0	8.0	9.0	10.0	11.0	12.0	13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0	252.0	253.0	254.0[0m
[31m  !6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252	253	254	255              6.0	7.0	8.0	9.0	10.0	11.0	12.0	13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0	252.0	253.0	254.0	255.0[0m
[31m  !7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252	253	254	255	256            7.0	8.0	9.0	10.0	11.0	12.0	13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0	252.0	253.0	254.0	255.0	256.0[0m
[31m  !8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252	253	254	255	256	257          8.0	9.0	10.0	11.0	12.0	13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0	252.0	253.0	254.0	255.0	256.0	257.0[0m
[31m  !9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252	253	254	255	256	257	258        9.0	10.0	11.0	12.0	13.0	14.0	15.0	16.0	17.0	18.0	19.0	20.0	21.0	22.0	23.0	24.0	25.0	26.0	27.0	28.0	29.0	30.0	31.0	32.0	33.0	34.0	35.0	36.0	37.0	38.0	39.0	40.0	41.0	42.0	43.0	44.0	45.0	46.0	47.0	48.0	49.0	50.0	51.0	52.0	53.0	54.0	55.0	56.0	57.0	58.0	59.0	60.0	61.0	62.0	63.0	64.0	65.0	66.0	67.0	68.0	69.0	70.0	71.0	72.0	73.0	74.0	75.0	76.0	77.0	78.0	79.0	80.0	81.0	82.0	83.0	84.0	85.0	86.0	87.0	88.0	89.0	90.0	91.0	92.0	93.0	94.0	95.0	96.0	97.0	98.0	99.0	100.0	101.0	102.0	103.0	104.0	105.0	106.0	107.0	108.0	109.0	110.0	111.0	112.0	113.0	114.0	115.0	116.0	117.0	118.0	119.0	120.0	121.0	122.0	123.0	124.0	125.0	126.0	127.0	128.0	129.0	130.0	131.0	132.0	133.0	134.0	135.0	136.0	137.0	138.0	139.0	140.0	141.0	142.0	143.0	144.0	145.0	146.0	147.0	148.0	149.0	150.0	151.0	152.0	153.0	154.0	155.0	156.0	157.0	158.0	159.0	160.0	161.0	162.0	163.0	164.0	165.0	166.0	167.0	168.0	169.0	170.0	171.0	172.0	173.0	174.0	175.0	176.0	177.0	178.0	179.0	180.0	181.0	182.0	183.0	184.0	185.0	186.0	187.0	188.0	189.0	190.0	191.0	192.0	193.0	194.0	195.0	196.0	197.0	198.0	199.0	200.0	201.0	202.0	203.0	204.0	205.0	206.0	207.0	208.0	209.0	210.0	211.0	212.0	213.0	214.0	215.0	216.0	217.0	218.0	219.0	220.0	221.0	222.0	223.0	224.0	225.0	226.0	227.0	228.0	229.0	230.0	231.0	232.0	233.0	234.0	235.0	236.0	237.0	238.0	239.0	240.0	241.0	242.0	243.0	244.0	245.0	246.0	247.0	248.0	249.0	250.0	251.0	252.0	253.0	254.0	255.0	256.0	257.0	258.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT FIRSTNAME, LASTNAME, AVG(COST) FROM PEOPLE_ORDERS GROUP BY LASTNAME, FIRSTNAME ORDER BY LASTNAME, FIRSTNAME
[32m- 1020[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, CASE GRADE WHEN 0 THEN 1000 WHEN 1 THEN 997 WHEN 2 THEN 994 WHEN 3 THEN 991 WHEN 4 THEN 988 WHEN 5 THEN 985 WHEN 6 THEN 982 WHEN 7 THEN 979 WHEN 8 THEN 976 WHEN 9 THEN 973 WHEN 10 THEN 970 WHEN 11 THEN 967 WHEN 12 THEN 964 WHEN 13 THEN 961 WHEN 14 THEN 958 WHEN 15 THEN 955 WHEN 16 THEN 952 WHEN 17 THEN 949 WHEN 18 THEN 946 WHEN 19 THEN 943 WHEN 20 THEN 940 WHEN 21 THEN 937 WHEN 22 THEN 934 WHEN 23 THEN 931 WHEN 24 THEN 928 WHEN 25 THEN 925 WHEN 26 THEN 922 WHEN 27 THEN 919 WHEN 28 THEN 916 WHEN 29 THEN 913 WHEN 30 THEN 910 WHEN 31 THEN 907 WHEN 32 THEN 904 WHEN 33 THEN 901 WHEN 34 THEN 898 WHEN 35 THEN 895 WHEN 36 THEN 892 WHEN 37 THEN 889 WHEN 38 THEN 886 WHEN 39 THEN 883 WHEN 40 THEN 880 WHEN 41 THEN 877 WHEN 42 THEN 874 WHEN 43 THEN 871 WHEN 44 THEN 868 WHEN 45 THEN 865 WHEN 46 THEN 862 WHEN 47 THEN 859 WHEN 48 THEN 856 WHEN 49 THEN 853 END FROM HU.STAFF WHERE EMPNAME = 'Betty'
[32m- 1021[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, CASE WHEN GRADE = 0 THEN 1000 WHEN GRADE = 1 THEN 997 WHEN GRADE = 2 THEN 994 WHEN GRADE = 3 THEN 991 WHEN GRADE = 4 THEN 988 WHEN GRADE = 5 THEN 985 WHEN GRADE = 6 THEN 982 WHEN GRADE = 7 THEN 979 WHEN GRADE = 8 THEN 976 WHEN GRADE = 9 THEN 973 WHEN GRADE = 11 THEN 967 WHEN GRADE = 12 THEN 964 WHEN GRADE = 13 THEN 961 WHEN GRADE = 14 THEN 958 WHEN GRADE = 15 THEN 955 WHEN GRADE = 16 THEN 952 WHEN GRADE = 17 THEN 949 WHEN GRADE = 18 THEN 946 WHEN GRADE = 19 THEN 943 WHEN GRADE = 20 THEN 940 WHEN GRADE = 21 THEN 937 WHEN GRADE = 22 THEN 934 WHEN GRADE = 23 THEN 931 WHEN GRADE = 24 THEN 928 WHEN GRADE = 25 THEN 925 WHEN GRADE = 26 THEN 922 WHEN GRADE = 27 THEN 919 WHEN GRADE = 28 THEN 916 WHEN GRADE = 29 THEN 913 WHEN GRADE = 30 THEN 910 WHEN GRADE = 31 THEN 907 WHEN GRADE = 32 THEN 904 WHEN GRADE = 33 THEN 901 WHEN GRADE = 34 THEN 898 WHEN GRADE = 35 THEN 895 WHEN GRADE = 36 THEN 892 WHEN GRADE = 37 THEN 889 WHEN GRADE = 38 THEN 886 WHEN GRADE = 39 THEN 883 WHEN GRADE = 40 THEN 880 WHEN GRADE = 41 THEN 877 WHEN GRADE = 42 THEN 874 WHEN GRADE = 43 THEN 871 WHEN GRADE = 44 THEN 868 WHEN GRADE = 45 THEN 865 WHEN GRADE = 46 THEN 862 WHEN GRADE = 47 THEN 859 WHEN GRADE = 48 THEN 856 WHEN GRADE = 49 THEN 853 WHEN GRADE = 10 THEN 970 END FROM HU.STAFF WHERE EMPNAME = 'Betty'
[32m- 1022[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, CITY FROM STAFF UNION SELECT PTYPE, CITY FROM PROJ
[32m- 1023[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, CITY FROM STAFF UNION SELECT 'e1', CITY FROM PROJ
[32m- 1024[0m
Calcite parsing passed, start to transform. SELECT EMPNUM, GRADE FROM STAFF UNION SELECT EMPNUM, HOURS FROM WORKS
Calcite parsing passed, start to transform. SELECT EMPNUM, GRADE FROM STAFF UNION SELECT EMPNUM, HOURS FROM WORKS
Calcite parsing passed, start to transform. SELECT EMPNUM, GRADE FROM STAFF UNION SELECT EMPNUM, HOURS FROM WORKS
[31m- 1025 match for 1025:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Distinct[0m
[31m   'Union[0m
[31m    'Project [unresolvedalias('EMPNUM),unresolvedalias('GRADE)][0m
[31m     'UnresolvedRelation [STAFF], None[0m
[31m    'Project [unresolvedalias('EMPNUM),unresolvedalias('HOURS)][0m
[31m     'UnresolvedRelation [WORKS], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  EMPNUM: string, GRADE: double[0m
[31m  Distinct[0m
[31m   Union[0m
[31m    Project [EMPNUM#70316,GRADE#70318][0m
[31m     MetastoreRelation HU, staff, None[0m
[31m    Project [EMPNUM#70320,HOURS#70322][0m
[31m     MetastoreRelation HU, works, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Aggregate [EMPNUM#70316,GRADE#70318], [EMPNUM#70316,GRADE#70318][0m
[31m   Union[0m
[31m    Project [EMPNUM#70316,GRADE#70318][0m
[31m     MetastoreRelation HU, staff, None[0m
[31m    Project [EMPNUM#70320,HOURS#70322][0m
[31m     MetastoreRelation HU, works, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenAggregate(key=[EMPNUM#70316,GRADE#70318], functions=[], output=[EMPNUM#70316,GRADE#70318])[0m
[31m   TungstenExchange hashpartitioning(EMPNUM#70316,GRADE#70318)[0m
[31m    TungstenAggregate(key=[EMPNUM#70316,GRADE#70318], functions=[], output=[EMPNUM#70316,GRADE#70318])[0m
[31m     Union[0m
[31m      HiveTableScan [EMPNUM#70316,GRADE#70318], (MetastoreRelation HU, staff, None)[0m
[31m      HiveTableScan [EMPNUM#70320,HOURS#70322], (MetastoreRelation HU, works, None)[0m
  
[31m  Code Generation: true[0m
[31m  EMPNUM	GRADE[0m
[31m  !== HIVE - 17 row(s) ==   == CATALYST - 17 row(s) ==[0m
[31m   E1	NULL                  E1	NULL[0m
[31m  !E13	82                   E13	82.0[0m
[31m   E18	NULL                 E18	NULL[0m
[31m   E2	NULL                  E2	NULL[0m
[31m   E22	NULL                 E22	NULL[0m
[31m  !E3	100                   E3	100.0[0m
[31m   E3	NULL                  E3	NULL[0m
[31m   E4	NULL                  E4	NULL[0m
[31m   E5	NULL                  E5	NULL[0m
[31m  !E6	55                    E6	55.0[0m
[31m   E6	NULL                  E6	NULL[0m
[31m   E7	NULL                  E7	NULL[0m
[31m   E8	NULL                  E8	NULL[0m
[31m  !E9	10                    E9	10.0[0m
[31m   E9	NULL                  E9	NULL[0m
[31m   UPP	NULL                 UPP	NULL[0m
[31m   e1	NULL                  e1	NULL (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COL2                 FROM  TABLEFGHIJKLMNOPQ19
Calcite parsing passed, start to transform. SELECT COL2                 FROM  TABLEFGHIJKLMNOPQ19
Calcite parsing passed, start to transform. SELECT COL2                 FROM  TABLEFGHIJKLMNOPQ19
[31m- 1026 match for 1026:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('COL2)][0m
[31m   'UnresolvedRelation [TABLEFGHIJKLMNOPQ19], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  COL2: double[0m
[31m  Project [COL2#70736][0m
[31m   MetastoreRelation MCGINN, tablefghijklmnopq19, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [COL2#70736][0m
[31m   MetastoreRelation MCGINN, tablefghijklmnopq19, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [COL2#70736], (MetastoreRelation MCGINN, tablefghijklmnopq19, None)[0m
  
[31m  Code Generation: true[0m
[31m  COL2[0m
[31m  !== HIVE - 14 row(s) ==   == CATALYST - 14 row(s) ==[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COLUMN123456789IS19  FROM  SHORTTABLE
Calcite parsing passed, start to transform. SELECT COLUMN123456789IS19  FROM  SHORTTABLE
Calcite parsing passed, start to transform. SELECT COLUMN123456789IS19  FROM  SHORTTABLE
[31m- 1027 match for 1027:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('COLUMN123456789IS19)][0m
[31m   'UnresolvedRelation [SHORTTABLE], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  COLUMN123456789IS19: double[0m
[31m  Project [COLUMN123456789IS19#70914][0m
[31m   MetastoreRelation MCGINN, shorttable, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [COLUMN123456789IS19#70914][0m
[31m   MetastoreRelation MCGINN, shorttable, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [COLUMN123456789IS19#70914], (MetastoreRelation MCGINN, shorttable, None)[0m
  
[31m  Code Generation: true[0m
[31m  COLUMN123456789IS19[0m
[31m  !== HIVE - 14 row(s) ==   == CATALYST - 14 row(s) ==[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COL3                 FROM  VIEWABCDEFGHIKLMN19
Calcite parsing passed, start to transform. SELECT COL3                 FROM  VIEWABCDEFGHIKLMN19
Calcite parsing passed, start to transform. SELECT COL3                 FROM  VIEWABCDEFGHIKLMN19
[31m- 1028 match for 1028:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('COL3)][0m
[31m   'UnresolvedRelation [VIEWABCDEFGHIKLMN19], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  COL3: double[0m
[31m  Project [COL3#71092][0m
[31m   MetastoreRelation MCGINN, viewabcdefghiklmn19, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [COL3#71092][0m
[31m   MetastoreRelation MCGINN, viewabcdefghiklmn19, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [COL3#71092], (MetastoreRelation MCGINN, viewabcdefghiklmn19, None)[0m
  
[31m  Code Generation: true[0m
[31m  COL3[0m
[31m  !== HIVE - 14 row(s) ==   == CATALYST - 14 row(s) ==[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0[0m
[31m  !299                      299.0 (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT * FROM AA ORDER BY CHARTEST
Calcite parsing passed, start to transform. SELECT * FROM AA ORDER BY CHARTEST
Calcite parsing passed, start to transform. SELECT * FROM AA ORDER BY CHARTEST
[31m- 1029 match for 1029:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['CHARTEST ASC], true[0m
[31m   'Project [unresolvedalias(*)][0m
[31m    'UnresolvedRelation [AA], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  chartest: string[0m
[31m  Sort [CHARTEST#71270 ASC], true[0m
[31m   Project [chartest#71270][0m
[31m    MetastoreRelation HU, aa, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [CHARTEST#71270 ASC], true[0m
[31m   MetastoreRelation HU, aa, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [CHARTEST#71270 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(CHARTEST#71270 ASC)[0m
[31m     HiveTableScan [chartest#71270], (MetastoreRelation HU, aa, None)[0m
  
[31m  Code Generation: true[0m
[31m  chartest[0m
[31m  !== HIVE - 39 row(s) ==   == CATALYST - 39 row(s) ==[0m
[31m  !sp                         sp[0m
[31m   !exc                     !exc[0m
[31m   "dqt                     "dqt[0m
[31m   #pou                     #pou[0m
[31m   $dol                     $dol[0m
[31m   %pct                     %pct[0m
[31m   &amp                     &amp[0m
[31m   '+qt                     '+qt[0m
[31m   (lpr                     (lpr[0m
[31m   )rpr                     )rpr[0m
[31m   *ast                     *ast[0m
[31m   +plu                     +plu[0m
[31m   ,com                     ,com[0m
[31m   -hyp                     -hyp[0m
[31m   .per                     .per[0m
[31m   / sl                     / sl[0m
[31m   0000                     0000[0m
[31m   9999                     9999[0m
[31m   :col                     :col[0m
[31m   < lt                     < lt[0m
[31m   =equ                     =equ[0m
[31m   > gt                     > gt[0m
[31m   ?que                     ?que[0m
[31m   @ at                     @ at[0m
[31m   AAAA                     AAAA[0m
[31m   ZZZZ                     ZZZZ[0m
[31m   [lbk                     [lbk[0m
[31m   \bsl                     \bsl[0m
[31m   ]rbk                     ]rbk[0m
[31m   ^hat                     ^hat[0m
[31m   _und                     _und[0m
[31m   `-qt                     `-qt[0m
[31m   aaaa                     aaaa[0m
[31m   sem                      sem[0m
[31m   zzzz                     zzzz[0m
[31m   {lbc                     {lbc[0m
[31m  dvt                     |dvt[0m
[31m   }rbc                     }rbc[0m
[31m   ~til                     ~til (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM AA
[32m- 1030[0m
Calcite parsing passed, start to transform. SELECT COL2 FROM HU.UPUNIQ WHERE NUMKEY = 1
[32m- 1031[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.STAFF WHERE GRADE < (SELECT MAX(HOURS) FROM HU.WORKS) OR    GRADE > (SELECT MAX(NUMKEY) FROM HU.UPUNIQ) OR    GRADE + 100 > (SELECT MIN(HOURS) FROM HU.WORKS)
zcerror[31m- 1032 *** ; SELECT COUNT(*) FROM HU.STAFF WHERE GRADE < (SELECT MAX(HOURS) FROM HU.WORKS) OR    GRADE > (SELECT MAX(NUMKEY) FROM HU.UPUNIQ) OR    GRADE + 100 > (SELECT MIN(HOURS) FROM HU.WORKS) ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COL2 FROM HU.UPUNIQ WHERE NUMKEY = 1
[32m- 1033[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM HU.STAFF WHERE GRADE < (SELECT MAX(HOURS) FROM HU.WORKS) OR    GRADE > (SELECT MAX(NUMKEY) FROM HU.UPUNIQ) OR    GRADE + 100 > (SELECT MIN(HOURS) FROM HU.WORKS)
zcerror[31m- 1034 *** ; SELECT COUNT(*) FROM HU.STAFF WHERE GRADE < (SELECT MAX(HOURS) FROM HU.WORKS) OR    GRADE > (SELECT MAX(NUMKEY) FROM HU.UPUNIQ) OR    GRADE + 100 > (SELECT MIN(HOURS) FROM HU.WORKS) ***[0m
[31m  java.lang.RuntimeException: Parse failed.[0m
[31m  at scala.sys.package$.error(package.scala:27)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:33)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect$$anonfun$parse$1.apply(CalciteDialect.scala:32)[0m
[31m  at scala.Option.getOrElse(Option.scala:120)[0m
[31m  at com.intel.ssg.bdt.spark.sql.CalciteDialect.parse(CalciteDialect.scala:31)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SQLContext$$anonfun$3.apply(SQLContext.scala:169)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:115)[0m
[31m  at org.apache.spark.sql.SparkSQLParser$$anonfun$org$apache$spark$sql$SparkSQLParser$$others$1.apply(SparkSQLParser.scala:114)[0m
[31m  at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136)[0m
[31m  ...[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM C_TRANSACTION WHERE COMMOD_NO = 17
[32m- 1035[0m
Calcite parsing passed, start to transform. SELECT UNIT_PRICE, FROM_DATE, TO_DATE, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY DESC
Calcite parsing passed, start to transform. SELECT UNIT_PRICE, FROM_DATE, TO_DATE, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY DESC
Calcite parsing passed, start to transform. SELECT UNIT_PRICE, FROM_DATE, TO_DATE, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY DESC
[31m- 1036 match for 1036:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['COMMODITY DESC], true[0m
[31m   'Project [unresolvedalias('UNIT_PRICE),unresolvedalias('FROM_DATE),unresolvedalias('TO_DATE),unresolvedalias('COMMODITY)][0m
[31m    'UnresolvedRelation [DOLLARS_PER_POUND], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  UNIT_PRICE: double, FROM_DATE: double, TO_DATE: double, COMMODITY: string[0m
[31m  Sort [COMMODITY#71951 DESC], true[0m
[31m   Project [UNIT_PRICE#71952,FROM_DATE#71953,TO_DATE#71954,COMMODITY#71951][0m
[31m    MetastoreRelation SUN, dollars_per_pound, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [COMMODITY#71951 DESC], true[0m
[31m   Project [UNIT_PRICE#71952,FROM_DATE#71953,TO_DATE#71954,COMMODITY#71951][0m
[31m    MetastoreRelation SUN, dollars_per_pound, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [COMMODITY#71951 DESC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(COMMODITY#71951 DESC)[0m
[31m     HiveTableScan [UNIT_PRICE#71952,FROM_DATE#71953,TO_DATE#71954,COMMODITY#71951], (MetastoreRelation SUN, dollars_per_pound, None)[0m
  
[31m  Code Generation: true[0m
[31m  UNIT_PRICE	FROM_DATE	TO_DATE	COMMODITY[0m
[31m  !== HIVE - 2 row(s) ==                                            == CATALYST - 2 row(s) ==[0m
[31m  !0.0670745929118773946360153256704980842912	871012	871212	Wheat   0.0670745929118774	871012.0	871212.0	Wheat[0m
[31m  !0.5	880707	880707	Alfalfa                                        0.5	880707.0	880707.0	Alfalfa (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT COUNT(*) FROM COST_PER_UNIT
[32m- 1037[0m
Calcite parsing passed, start to transform. SELECT CURRENCY, MEASURE, UNIT_PRICE, COMMODITY FROM COST_PER_UNIT
Calcite parsing passed, start to transform. SELECT CURRENCY, MEASURE, UNIT_PRICE, COMMODITY FROM COST_PER_UNIT
Calcite parsing passed, start to transform. SELECT CURRENCY, MEASURE, UNIT_PRICE, COMMODITY FROM COST_PER_UNIT
[31m- 1038 match for 1038:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Project [unresolvedalias('CURRENCY),unresolvedalias('MEASURE),unresolvedalias('UNIT_PRICE),unresolvedalias('COMMODITY)][0m
[31m   'UnresolvedRelation [COST_PER_UNIT], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  CURRENCY: string, MEASURE: string, UNIT_PRICE: double, COMMODITY: string[0m
[31m  Project [CURRENCY#72234,MEASURE#72235,UNIT_PRICE#72233,COMMODITY#72232][0m
[31m   MetastoreRelation SUN, cost_per_unit, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Project [CURRENCY#72234,MEASURE#72235,UNIT_PRICE#72233,COMMODITY#72232][0m
[31m   MetastoreRelation SUN, cost_per_unit, None[0m
  
[31m  == Physical Plan ==[0m
[31m  HiveTableScan [CURRENCY#72234,MEASURE#72235,UNIT_PRICE#72233,COMMODITY#72232], (MetastoreRelation SUN, cost_per_unit, None)[0m
  
[31m  Code Generation: true[0m
[31m  CURRENCY	MEASURE	UNIT_PRICE	COMMODITY[0m
[31m  !== HIVE - 24 row(s) ==                                            == CATALYST - 24 row(s) ==[0m
[31m  !DM	KILO	0.3279202320136228182205193699446573009791	Wheat          DM	KILO	0.3279202320136228	Wheat[0m
[31m  !DM	KILO	2.44444444444444444444444444444444444444	Alfalfa          DM	KILO	2.4444444444444446	Alfalfa[0m
[31m  !DM	OUNCE	0.00894327905491698595146871008939974457216	Wheat        DM	OUNCE	0.008943279054916986	Wheat[0m
[31m  !DM	OUNCE	0.0666666666666666666666666666666666666667	Alfalfa       DM	OUNCE	0.06666666666666667	Alfalfa[0m
[31m  !DM	POUND	0.149054650915283099191145168156662409536	Wheat          DM	POUND	0.1490546509152831	Wheat[0m
[31m  !DM	POUND	1.11111111111111111111111111111111111111	Alfalfa         DM	POUND	1.1111111111111112	Alfalfa[0m
[31m  !DM	TON	2222.222222222222222222222222222222222222	Alfalfa          DM	TON	2222.222222222222	Alfalfa[0m
[31m  !DM	TON	298.109301830566198382290336313324819071	Wheat             DM	TON	298.1093018305662	Wheat[0m
[31m  !DOLLAR	KILO	0.1475641044061302681992337164750957854406	Wheat      DOLLAR	KILO	0.14756410440613027	Wheat[0m
[31m   DOLLAR	KILO	1.1	Alfalfa                                           DOLLAR	KILO	1.1	Alfalfa[0m
[31m  !DOLLAR	OUNCE	0.004024475574712643678160919540229885057472	Wheat   DOLLAR	OUNCE	0.004024475574712643	Wheat[0m
[31m   DOLLAR	OUNCE	0.03	Alfalfa                                         DOLLAR	OUNCE	0.03	Alfalfa[0m
[31m  !DOLLAR	POUND	0.0670745929118773946360153256704980842912	Wheat     DOLLAR	POUND	0.0670745929118774	Wheat[0m
[31m   DOLLAR	POUND	0.5	Alfalfa                                          DOLLAR	POUND	0.5	Alfalfa[0m
[31m  !DOLLAR	TON	1000	Alfalfa                                           DOLLAR	TON	1000.0	Alfalfa[0m
[31m  !DOLLAR	TON	134.149185823754789272030651340996168582	Wheat         DOLLAR	TON	134.14918582375478	Wheat[0m
[31m  !POUND	KILO	0.077258693406350925758761108102144390283	Wheat        POUND	KILO	0.07725869340635093	Wheat[0m
[31m  !POUND	KILO	0.5759162303664921465968586387434554973822	Alfalfa     POUND	KILO	0.5759162303664922	Alfalfa[0m
[31m  !POUND	OUNCE	0.002107055274718661611602575675513028825902	Wheat    POUND	OUNCE	0.0021070552747186615	Wheat[0m
[31m  !POUND	OUNCE	0.0157068062827225130890052356020942408377	Alfalfa    POUND	OUNCE	0.015706806282722512	Alfalfa[0m
[31m  !POUND	POUND	0.035117587911977693526709594591883813765	Wheat       POUND	POUND	0.035117587911977693	Wheat[0m
[31m  !POUND	POUND	0.2617801047120418848167539267015706806283	Alfalfa    POUND	POUND	0.2617801047120419	Alfalfa[0m
[31m  !POUND	TON	523.560209424083769633507853403141361257	Alfalfa        POUND	TON	523.5602094240837	Alfalfa[0m
[31m  !POUND	TON	70.23517582395538705341918918376762752984	Wheat         POUND	TON	70.23517582395539	Wheat (HiveComparisonTest.scala:433)[0m
Calcite parsing passed, start to transform. SELECT (100 + 7) * UNIT_PRICE * 700 / 100, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY
Calcite parsing passed, start to transform. SELECT (100 + 7) * UNIT_PRICE * 700 / 100, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY
Calcite parsing passed, start to transform. SELECT (100 + 7) * UNIT_PRICE * 700 / 100, COMMODITY FROM DOLLARS_PER_POUND ORDER BY COMMODITY
[31m- 1039 match for 1039:[0m
[31m  == Parsed Logical Plan ==[0m
[31m  'Sort ['COMMODITY ASC], true[0m
[31m   'Project [unresolvedalias(((((100 + 7) * 'UNIT_PRICE) * 700) / 100)),unresolvedalias('COMMODITY)][0m
[31m    'UnresolvedRelation [DOLLARS_PER_POUND], None[0m
  
[31m  == Analyzed Logical Plan ==[0m
[31m  _c0: double, COMMODITY: string[0m
[31m  Sort [COMMODITY#72419 ASC], true[0m
[31m   Project [(((cast((100 + 7) as double) * UNIT_PRICE#72420) * cast(700 as double)) / cast(100 as double)) AS _c0#72423,COMMODITY#72419][0m
[31m    MetastoreRelation SUN, dollars_per_pound, None[0m
  
[31m  == Optimized Logical Plan ==[0m
[31m  Sort [COMMODITY#72419 ASC], true[0m
[31m   Project [(((107.0 * UNIT_PRICE#72420) * 700.0) / 100.0) AS _c0#72423,COMMODITY#72419][0m
[31m    MetastoreRelation SUN, dollars_per_pound, None[0m
  
[31m  == Physical Plan ==[0m
[31m  TungstenSort [COMMODITY#72419 ASC], true, 0[0m
[31m   ConvertToUnsafe[0m
[31m    Exchange rangepartitioning(COMMODITY#72419 ASC)[0m
[31m     Project [(((107.0 * UNIT_PRICE#72420) * 700.0) / 100.0) AS _c0#72423,COMMODITY#72419][0m
[31m      HiveTableScan [UNIT_PRICE#72420,COMMODITY#72419], (MetastoreRelation SUN, dollars_per_pound, None)[0m
  
[31m  Code Generation: true[0m
[31m  _c0	COMMODITY[0m
[31m  !== HIVE - 2 row(s) ==                             == CATALYST - 2 row(s) ==[0m
[31m   374.5	Alfalfa                                     374.5	Alfalfa[0m
[31m  !50.23887009099616858237547892720306513412	Wheat   50.23887009099617	Wheat (HiveComparisonTest.scala:433)[0m
[36mRun completed in 12 minutes, 47 seconds.[0m
[36mTotal number of tests run: 522[0m
[36mSuites: completed 2, aborted 0[0m
[36mTests: succeeded 366, failed 156, canceled 0, ignored 1630, pending 0[0m
[31m*** 156 TESTS FAILED ***[0m
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 13:13 min
[INFO] Finished at: 2015-10-28T14:47:01+08:00
[INFO] Final Memory: 36M/2475M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.scalatest:scalatest-maven-plugin:1.0:test (test) on project spark-calcite-parser: There are test failures -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
